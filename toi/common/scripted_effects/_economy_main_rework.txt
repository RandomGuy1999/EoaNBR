
    # OPTIMIZATION REWORK: PHASE 2
    #
    #   Potential areas of improvement:
    #       pops_update:
    #           Remove first pops_update
    #           Apply changes only to pops that have changed (granted this is likely to be most of them. Only would be minor improvement. Do this last)
    #           Store pop needs (for every 100k) in a global array.
    #
    #       buildings_update
    #           Remove first buildings_update
    #           Apply changes only to buildings that have changed
    #               Track three sets of changes: Production related, Price related, and Wage
    #               Production related updates everything. Price related only updates finances, Wage only to strictly payroll & profit
    #               Only apply changes after a >1% change
    #
    #       Modifiers
    #           Set every modifier to 1, so they don't have to be added to in code
    #           
    #
    #   What could change between ticks:
    #       Modifiers (Tech research, new ideas, etc)
    #       
    #
    #
    #
    #

    # 3.4 secs
    r_advance_time = {
		random_country = {
			if = {
				limit = {
					check_variable = { global.month > 11 }
				}
				set_variable = { global.month = 0 }
				add_to_variable = { global.years_passed = 1 }
			}

			create_econ_order_array = yes

			#Reset
				set_variable = { global.highest_state_gdp = 0 }
				set_variable = { global.highest_state_gdp_c = 0 }
			#
		}

        # 1.4 secs
		for_each_scope_loop = {
			array = global.econ_order_array

            if = {
                limit = {
                    NOT = {
                        has_dynamic_modifier = {
                            modifier = resource_trade
                        }
                    }
                }
                add_dynamic_modifier = { modifier = resource_trade }
            }
            if = {
                limit = {
                    NOT = {
                        has_dynamic_modifier = {
                            modifier = budgetary_spending
                        }
                    }
                }
                add_dynamic_modifier = { modifier = budgetary_spending }
            }
            
            #Budget
                national_debt_update = yes

                add_to_variable = { treasury = net_budget }
                if = {
                    limit = {
                        check_variable = { treasury < 0 }
                    }
                    set_temp_variable = { x_temp = treasury }
                    multiply_temp_variable = { x_temp = -0.001 }
                    add_to_temp_variable = { x_temp = 0.001 }
                    set_temp_variable = { country_temp = 0 }
                    borrow_money = yes
                }
                else_if = {
                    limit = {
                        is_ai = yes
                        check_variable = { treasury > 100 }
                        check_variable = { national_debt_k > 0 }
                    }
					set_temp_variable = { x_temp = treasury }
                    divide_temp_variable = { x_temp = 1000 }
                    repay_debt = yes
                }
                if = { # AI
                    limit = {
                        is_ai = yes
                        check_variable = { net_budget < 0 }
                    }
                    if = { # USA loves import tariffs
                        limit = {
                            tag = USA
                            check_variable = { import_tariff_percentage < import_tariff_max }
                        }
                        set_temp_variable = { percent_change_temp = 100 }
                        change_import_tariff = yes
                    }

                    if = {
                        limit = {
                            check_variable = { sales_tax_percentage < sales_tax_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        if = {
                            limit = {
                                check_variable = { sales_tax_percentage > 0 }
                                check_variable = { sales_tax_revenue > 0 }
                            }
                            set_temp_variable = { st_per = sales_tax_revenue }
                            divide_temp_variable = { st_per = sales_tax_percentage }

                            set_temp_variable = { percent_change_temp = net_budget }
                            divide_temp_variable = { percent_change_temp = st_per }
                            multiply_temp_variable = { percent_change_temp = -1 }
                            add_to_temp_variable = { percent_change_temp = 0.5 }
                            round_temp_variable = percent_change_temp
                            if = {
                                limit = {
                                    check_variable = { percent_change_temp < 5 }
                                }
                                set_temp_variable = { percent_change_temp = 5 }
                            }
                        }
                        change_sales_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_lower_strata_percentage < income_tax_lower_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        if = {
                            limit = {
                                check_variable = { income_tax_lower_strata_percentage > 0 }
                                check_variable = { income_tax_lower_strata_revenue > 0 }
                            }
                            set_temp_variable = { st_per = income_tax_lower_strata_revenue }
                            divide_temp_variable = { st_per = income_tax_lower_strata_percentage }

                            set_temp_variable = { percent_change_temp = net_budget }
                            divide_temp_variable = { percent_change_temp = st_per }
                            multiply_temp_variable = { percent_change_temp = -1 }
                            add_to_temp_variable = { percent_change_temp = 0.5 }
                            round_temp_variable = percent_change_temp
                            if = {
                                limit = {
                                    check_variable = { percent_change_temp < 5 }
                                }
                                set_temp_variable = { percent_change_temp = 5 }
                            }
                        }
                        change_lower_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_middle_strata_percentage < income_tax_middle_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        if = {
                            limit = {
                                check_variable = { income_tax_middle_strata_percentage > 0 }
                                check_variable = { income_tax_middle_strata_revenue > 0 }
                            }
                            set_temp_variable = { st_per = income_tax_middle_strata_revenue }
                            divide_temp_variable = { st_per = income_tax_middle_strata_percentage }

                            set_temp_variable = { percent_change_temp = net_budget }
                            divide_temp_variable = { percent_change_temp = st_per }
                            multiply_temp_variable = { percent_change_temp = -1 }
                            add_to_temp_variable = { percent_change_temp = 0.5 }
                            round_temp_variable = percent_change_temp
                            if = {
                                limit = {
                                    check_variable = { percent_change_temp < 5 }
                                }
                                set_temp_variable = { percent_change_temp = 5 }
                            }
                        }
                        change_middle_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_upper_strata_percentage < income_tax_upper_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        if = {
                            limit = {
                                check_variable = { income_tax_upper_strata_percentage > 0 }
                                check_variable = { income_tax_upper_strata_revenue > 0 }
                            }
                            set_temp_variable = { st_per = income_tax_upper_strata_revenue }
                            divide_temp_variable = { st_per = income_tax_upper_strata_percentage }

                            set_temp_variable = { percent_change_temp = net_budget }
                            divide_temp_variable = { percent_change_temp = st_per }
                            multiply_temp_variable = { percent_change_temp = -1 }
                            add_to_temp_variable = { percent_change_temp = 0.5 }
                            round_temp_variable = percent_change_temp
                            if = {
                                limit = {
                                    check_variable = { percent_change_temp < 5 }
                                }
                                set_temp_variable = { percent_change_temp = 5 }
                            }
                        }
                        change_upper_strata_income_tax = yes
                    }
                }
                else_if = { # AI debt repayment
                    limit = {
                        is_ai = yes
                        check_variable = { national_debt_k > 0 }
                        set_temp_variable = { debt_amount_temp = 0.025 }
                        multiply_temp_variable = { debt_amount_temp = gdp_amount }
                        check_variable = { net_budget < debt_amount_temp }
                    }
                    if = {
                        limit = {
                            check_variable = { sales_tax_percentage < sales_tax_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        change_sales_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_lower_strata_percentage < income_tax_lower_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        change_lower_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_middle_strata_percentage < income_tax_middle_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        change_middle_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_upper_strata_percentage < income_tax_upper_strata_max }
                        }
                        set_temp_variable = { percent_change_temp = 5 }
                        change_upper_strata_income_tax = yes
                    }
                }
                else_if = { # AI lowers taxes if no debt OR if has debt and is earning wayyy too much
                    limit = {
                        is_ai = yes
                        OR = {
                            AND = {
                                check_variable = { national_debt_k = 0 }
                                set_temp_variable = { debt_amount_temp = 0.005 }
                                multiply_temp_variable = { debt_amount_temp = gdp_amount }
                                check_variable = { net_budget > debt_amount_temp }
                            }
                            AND = {
                                check_variable = { national_debt_k > 0 }
                                set_temp_variable = { debt_amount_temp = 0.04 }
                                multiply_temp_variable = { debt_amount_temp = gdp_amount }
                                check_variable = { net_budget > debt_amount_temp }
                            }
                        }
                    }

                    if = {
                        limit = {
                            check_variable = { income_tax_upper_strata_percentage > income_tax_upper_strata_min }
                        }
                        set_temp_variable = { percent_change_temp = -5 }
                        change_upper_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_middle_strata_percentage > income_tax_middle_strata_min }
                        }
                        set_temp_variable = { percent_change_temp = -5 }
                        change_middle_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { income_tax_lower_strata_percentage > income_tax_lower_strata_min }
                        }
                        set_temp_variable = { percent_change_temp = -5 }
                        change_lower_strata_income_tax = yes
                    }
                    else_if = {
                        limit = {
                            check_variable = { sales_tax_percentage > sales_tax_min }
                        }
                        set_temp_variable = { percent_change_temp = -5 }
                        change_sales_tax = yes
                    }
                }
                if = { # AI always funds its military
                    limit = {
                        is_ai = yes
                        check_variable = { military_spending_percentage < 100 }
                    }
					set_temp_variable = { percent_change_temp = 100 }
					change_military_spending = yes
                }

                set_variable = { actual_revenue = revenue }
                set_variable = { actual_income_tax_revenue = income_tax_revenue }
                set_variable = { actual_spending = spending }
                set_variable = { actual_infrastructure_spending = infrastructure_subsidy }
                set_variable = { actual_construction_spending = construction_spending }
                set_variable = { actual_industrial_spending = industrial_subsidy }
                set_variable = { actual_tariff_revenue = tariff_revenue }
                set_variable = { actual_sales_tax_revenue = sales_tax_revenue }
                set_variable = { actual_trade_subsidy_spending = import_subsidy }
                add_to_variable = { actual_trade_subsidy_spending = export_subsidy }
                set_variable = { actual_administration_spending = administration_spending }
                set_variable = { actual_military_spending = military_spending }
                set_variable = { actual_projects_spending = projects_spending }
                set_variable = { actual_net_budget = net_budget }

                spending_effects_update = yes
            #

            #Projects
                for_each_loop = {
                    array = proj_id
                    value = proj_token
                    index = pii

                    set_temp_variable = { project_scope_temp = proj_scope^pii }

                    #food
                    add_to_variable = { project_scope_temp:proj_food_fulfilled@var:proj_token = project_scope_temp:proj_food_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_food_fulfilled@var:proj_token > project_scope_temp:proj_food_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_food_fulfilled@var:proj_token = project_scope_temp:proj_food_need@var:proj_token }
                    }

                    #consumer_goods
                    add_to_variable = { project_scope_temp:proj_consumer_goods_fulfilled@var:proj_token = project_scope_temp:proj_consumer_goods_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_consumer_goods_fulfilled@var:proj_token > project_scope_temp:proj_consumer_goods_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_consumer_goods_fulfilled@var:proj_token = project_scope_temp:proj_consumer_goods_need@var:proj_token }
                    }

                    #luxury_goods
                    add_to_variable = { project_scope_temp:proj_luxury_goods_fulfilled@var:proj_token = project_scope_temp:proj_luxury_goods_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_luxury_goods_fulfilled@var:proj_token > project_scope_temp:proj_luxury_goods_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_luxury_goods_fulfilled@var:proj_token = project_scope_temp:proj_luxury_goods_need@var:proj_token }
                    }

                    #services
                    add_to_variable = { project_scope_temp:proj_services_fulfilled@var:proj_token = project_scope_temp:proj_services_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_services_fulfilled@var:proj_token > project_scope_temp:proj_services_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_services_fulfilled@var:proj_token = project_scope_temp:proj_services_need@var:proj_token }
                    }

                    #raw_materials
                    add_to_variable = { project_scope_temp:proj_raw_materials_fulfilled@var:proj_token = project_scope_temp:proj_raw_materials_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_raw_materials_fulfilled@var:proj_token > project_scope_temp:proj_raw_materials_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_raw_materials_fulfilled@var:proj_token = project_scope_temp:proj_raw_materials_need@var:proj_token }
                    }

                    #energy_materials
                    add_to_variable = { project_scope_temp:proj_energy_materials_fulfilled@var:proj_token = project_scope_temp:proj_energy_materials_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_energy_materials_fulfilled@var:proj_token > project_scope_temp:proj_energy_materials_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_energy_materials_fulfilled@var:proj_token = project_scope_temp:proj_energy_materials_need@var:proj_token }
                    }

                    #industrial_goods
                    add_to_variable = { project_scope_temp:proj_industrial_goods_fulfilled@var:proj_token = project_scope_temp:proj_industrial_goods_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_industrial_goods_fulfilled@var:proj_token > project_scope_temp:proj_industrial_goods_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_industrial_goods_fulfilled@var:proj_token = project_scope_temp:proj_industrial_goods_need@var:proj_token }
                    }

                    #electricity
                    add_to_variable = { project_scope_temp:proj_electricity_fulfilled@var:proj_token = project_scope_temp:proj_electricity_demand@var:proj_token }
                    if = {
                        limit = {
                            check_variable = { project_scope_temp:proj_electricity_fulfilled@var:proj_token > project_scope_temp:proj_electricity_need@var:proj_token }
                        }
                        set_variable = { project_scope_temp:proj_electricity_fulfilled@var:proj_token = project_scope_temp:proj_electricity_need@var:proj_token }
                    }

					add_to_variable = { project_scope_temp:proj_time_elapsed@var:proj_token = 1 }
                }
            #

            set_temp_variable = { upper_earnings_limit = pops_earnings_avg }
            multiply_temp_variable = { upper_earnings_limit = 3 }
            set_temp_variable = { lower_earnings_limit = pops_earnings_avg }

            set_temp_variable = { upper_income_multiplier = income_tax_upper_strata_percentage_actual }
            divide_temp_variable = { upper_income_multiplier = 100 }
            set_temp_variable = { middle_income_multiplier = income_tax_middle_strata_percentage_actual }
            divide_temp_variable = { middle_income_multiplier = 100 }
            set_temp_variable = { lower_income_multiplier = income_tax_lower_strata_percentage_actual }
            divide_temp_variable = { lower_income_multiplier = 100 }
            set_temp_variable = { sales_tax_multiplier = sales_tax_percentage_actual }
            divide_temp_variable = { sales_tax_multiplier = 100 }

            # 1.2 secs (calc: 1.4)
            update_national_production_methods = yes
            r_update_modifiers_country_effects = yes
            buildings_update_base_latest_vals = yes
            every_controlled_state = {
                r_update_modifiers_state_effects = yes # 0.38 secs

                on_monthly_buildings = yes # nil secs
                
                # 0.128 secs
                building_productivity_sort = yes
                base_wage_calculation = yes
                on_monthly_building_adjust_employment_target = yes
                on_monthly_building_employment = yes

                on_monthly_subsistence_farm = yes
                pops_balance = yes

                calc_industrial_capacity = yes # nil secs

                buildings_update = yes # 0.5 secs
                pops_update = yes # 0.2 secs

                on_monthly_pops = yes # 0.2 secs
            }
            
            # 0.273 secs
            calc_shipping_capacity = yes
            
            market_leader_check = yes
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                market_update = yes
            }

            market_calc_gdp = yes
        }

        # 2.00 secs
		for_each_scope_loop = {
			array = global.econ_order_array

            update_country_pop_stats = yes # nil secs

            # Investment
            investment_opportunities_update = yes
            investment_fund_update = yes
            investment_funds_monthly = yes
            investment_opportunities_monthly = yes

            set_variable = { gdp_amount = 0 }

            every_controlled_state = {
                buildings_update = yes # 0.5 secs
                calculate_pop_needs = yes # 0.2 secs
                pops_update = yes # 0.2 secs
				refresh_construction_list = yes # 0.1 secs
                #Statistics - 0.2 to 1.2 secs
                    #GDP
                    set_variable = { prev_gdp_amount = gdp_amount }
                    gdp_update = yes # nil secs

                    # nil secs
                    add_to_array = {
                        array = gdp_amount_array
                        value = gdp_amount
                    }
                    if = {
                        limit = {
                            check_variable = { gdp_amount_array^num > 37 }
                        }
                        remove_from_array = { array = gdp_amount_array index = 0 }
                    }

                    # nil secs
                    set_temp_variable = { num_temp = 12 }
                    if = {
                        limit = {
                            check_variable = { gdp_amount_array^num < num_temp }
                        }
                        set_temp_variable = { num_temp = gdp_amount_array^num }
                    }
                    subtract_from_temp_variable = { num_temp = 1 }

                    # 0.1 secs
                    set_variable = { gdp_growth = gdp_amount }
                    if = {
                        limit = {
                            OR = {
                                check_variable = { gdp_amount > 1000 }
                                check_variable = { gdp_amount_array^num_temp > 1000 }
                            }
                        }
                        set_temp_variable = { gdp_temp = gdp_amount_array^num_temp }
                        divide_temp_variable = { gdp_temp = 100 }
                        divide_variable = { gdp_growth = gdp_temp }
                    }
                    else = {
                        set_variable = { gdp_growth = gdp_amount }
                        multiply_variable = { gdp_growth = 100 }
                        divide_variable = { gdp_growth = gdp_amount_array^num_temp }
                    }
                    subtract_from_variable = { gdp_growth = 100 }

                    add_to_variable = { PREV.gdp_amount = gdp_amount }

                    econ_rerender_gdp_graph = yes
                    if = {
                        limit = {
                            check_variable = { global.month = 0 }
                        }
                        create_pie_chart_pop_type = yes # 0.2 secs
                    }
                #
            }

            #Completing Projects
            for_loop_effect = {
                start = 0
                end = proj_id^num
                value = proj_index_temp

                set_temp_variable = { project_token_temp = proj_id^proj_index_temp }
                set_temp_variable = { project_scope_temp = proj_scope^proj_index_temp }

                # Check if done
                if = {
                    limit = {
                        check_variable = { project_scope_temp:proj_food_fulfilled@var:project_token_temp = project_scope_temp:proj_food_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_consumer_goods_fulfilled@var:project_token_temp = project_scope_temp:proj_consumer_goods_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_luxury_goods_fulfilled@var:project_token_temp = project_scope_temp:proj_luxury_goods_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_services_fulfilled@var:project_token_temp = project_scope_temp:proj_services_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_raw_materials_fulfilled@var:project_token_temp = project_scope_temp:proj_raw_materials_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_energy_materials_fulfilled@var:project_token_temp = project_scope_temp:proj_energy_materials_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_industrial_goods_fulfilled@var:project_token_temp = project_scope_temp:proj_industrial_goods_need@var:project_token_temp }
                        check_variable = { project_scope_temp:proj_electricity_fulfilled@var:project_token_temp = project_scope_temp:proj_electricity_need@var:project_token_temp }
                    }
                    proj_done = yes
                }
            }
            proj_update = yes

            # 0.2 secs
            market_leader_check = yes
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                market_update = yes
            }

            # 0.1 secs
            budget_update = yes
            national_debt_update = yes

            #National Statistics - nil secs
                # GDP
                set_temp_variable = { gdp_amount_temp = gdp_amount }
                divide_temp_variable = { gdp_amount_temp = 1000 }

                add_to_array = { gdp_amount_monthly = gdp_amount_temp }
                if = {
                    limit = {
                        check_variable = { gdp_amount_monthly^num > 2 }
                    }
                    set_temp_variable = { gdp_amount_temp = gdp_amount_monthly^0 }
                    add_to_temp_variable = { gdp_amount_temp = gdp_amount_monthly^1 }
                    add_to_temp_variable = { gdp_amount_temp = gdp_amount_monthly^2 }
                    add_to_array = {
                        array = gdp_amount_quarterly
                        value = gdp_amount_temp
                    }
                    if = {
                        limit = {
                            check_variable = { gdp_amount_array^num > 41 }
                        }
                        remove_from_array = { array = gdp_amount_quarterly index = 0 }
                    }
                    clear_array = gdp_amount_monthly
                }

                if = {
                    limit = {
                        check_variable = { global.month = 0 }
                        check_variable = { global.years_passed > 0 }
                    }
                    set_temp_variable = { gdp_amount_temp = gdp_amount_quarterly^0 }
                    add_to_temp_variable = { gdp_amount_temp = gdp_amount_quarterly^1 }
                    add_to_temp_variable = { gdp_amount_temp = gdp_amount_quarterly^2 }
                    add_to_temp_variable = { gdp_amount_temp = gdp_amount_quarterly^3 }
                    add_to_array = {
                        array = gdp_amount_yearly
                        value = gdp_amount_temp
                    }
                }

                # Budget
                add_to_array = {
                    array = net_budget_array
                    value = net_budget
                }
                if = {
                    limit = {
                        check_variable = { net_budget_array^num > 32 }
                    }
                    remove_from_array = { array = net_budget_array index = 0 }
                }

                #Create the Graphs
                econ_rerender_country_gdp_graph = yes
                econ_rerender_country_budget_graph = yes
            #

            country_update_trade_display = yes
        }

        add_to_variable = { global.month = 1 }
    }

    r_reset = {
        global_variables = yes

		clear_array = global.econ_order_array

        set_historical_state_deposits = yes
        set_historical_state_buildings = yes
        every_country = {
            #Clear Projects
                clear_array = proj_id
                clear_array = proj_scope
            #
            for_each_loop = {
                array = global.resource_token_array
                value = r_token

                set_variable = { offers@var:r_token = 0 }
            }

            if = {
                limit = {
                    check_variable = { debt_to_gdp_ratio > 0 }
                }
                set_variable = { debt_to_gdp_saved = debt_to_gdp_ratio }
            }
            else_if = {
                limit = {
                    check_variable = { debt_level > 0 }
                }
                set_variable = { debt_level_saved = debt_level }
            }

            clear_array = gdp_amount_monthly
            clear_array = gdp_amount_quarterly
            clear_array = gdp_amount_yearly
            clear_array = investment_opportunities

            country_eco_setup = yes

            every_controlled_state = {
                r_update_modifiers_state_effects = yes

                #Clearing old variables (for debugging)
                    set_variable = { gdp_growth = 0 }
                    clear_array = gdp_amount_array

                    for_each_loop = {
                        array = buildings_under_construction_array
                        value = om_building

                        set_variable = { under_construction@var:om_building = 0 }
                        set_variable = { construction_amount@var:om_building = 0 }
                        set_variable = { construction_speed@var:om_building = 0 }
                        set_variable = { construction_expenses@var:om_building = 0 }
                    }
                #

                #Resource Setup
                for_each_loop = {
                    array = global.resource_token_array
                    value = r_token

                    set_variable = { price@var:r_token = global.base_price@var:r_token }
                }

                #Pop Setup
                    set_variable = { pops = state_population_k }
                    set_variable = { pops_workforce = pops }
                    multiply_variable = { pops_workforce = global.pops_workforce_participation }
                    set_variable = { pops_workforce_participation = global.pops_workforce_participation }

                    #Literacy Percentage
                        if = {
                            limit = {
                                NOT = { has_variable = pops_literacy_percentage }
                            }
                            owner = {
                                if = {
                                    limit = {
                                        has_variable = pops_literacy_percentage
                                    }
                                    set_variable = { PREV.pops_literacy_percentage = pops_literacy_percentage }
                                }
                                else = {
                                    set_variable = { PREV.pops_literacy_percentage = global.pops_literacy_percentage }
                                }
                            }
                        }
                    #
                    #Schooling Percentage
                        if = {
                            limit = {
                                NOT = { has_variable = pops_schooling_percentage }
                            }
                            owner = {
                                if = {
                                    limit = {
                                        has_variable = pops_schooling_percentage
                                    }
                                    set_variable = { PREV.pops_schooling_percentage = pops_schooling_percentage }
                                }
                                else = {
                                    set_variable = { PREV.pops_schooling_percentage = global.pops_schooling_percentage }
                                }
                            }
                        }
                    #
                    #Education Percentage
                        if = {
                            limit = {
                                NOT = { has_variable = pops_education_percentage }
                            }
                            owner = {
                                if = {
                                    limit = {
                                        has_variable = pops_education_percentage
                                    }
                                    set_variable = { PREV.pops_education_percentage = pops_education_percentage }
                                }
                                else = {
                                    set_variable = { PREV.pops_education_percentage = global.pops_education_percentage }
                                }
                            }
                        }
                    #
                #

                if = {
                    limit = {
                        NOT = { has_variable = arable_land }
                    }
                    set_variable = { arable_land = pops_workforce }
                    divide_variable = { arable_land = 20 }
                    round_variable = arable_land
                    add_to_variable = { arable_land = 1 }
                }

                #Building Setup
                    #Rural Buildings
                        if = {
                            limit = {
                                check_variable = { building_infrastructure_size > 0 }
                            }
                            set_variable = { size@token:building_infrastructure = building_infrastructure_size }
                            if = {
                                limit = {
                                    has_variable = building_infrastructure_pm
                                }
                                set_variable = { production_method@token:building_infrastructure = building_infrastructure_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_infrastructure = controller:latest_production_method@token:building_infrastructure }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_infrastructure
                            clear_variable = production_method@token:building_infrastructure
                        }
                        if = {
                            limit = {
                                check_variable = { building_railway_size > 0 }
                            }
                            set_variable = { size@token:building_railway = building_railway_size }
                            if = {
                                limit = {
                                    has_variable = building_railway_pm
                                }
                                set_variable = { production_method@token:building_railway = building_railway_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_railway = controller:latest_production_method@token:building_railway }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_railway
                            clear_variable = production_method@token:building_railway
                        }

                        set_temp_variable = { sub_farm_size_temp = arable_land }

                        if = {
                            limit = {
                                check_variable = { building_commercial_farm_size > 0 }
                            }
                            subtract_from_temp_variable = { sub_farm_size_temp = building_commercial_farm_size }

                            set_variable = { size@token:building_commercial_farm = building_commercial_farm_size }
                            if = {
                                limit = {
                                    has_variable = building_commercial_farm_pm
                                }
                                set_variable = { production_method@token:building_commercial_farm = building_commercial_farm_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_commercial_farm = controller:latest_production_method@token:building_commercial_farm }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_commercial_farm
                            clear_variable = production_method@token:building_commercial_farm
                        }
                        if = {
                            limit = {
                                check_variable = { building_food_plantation_size > 0 }
                            }
                            subtract_from_temp_variable = { sub_farm_size_temp = building_food_plantation_size }

                            set_variable = { size@token:building_food_plantation = building_food_plantation_size }
                            if = {
                                limit = {
                                    has_variable = building_food_plantation_pm
                                }
                                set_variable = { production_method@token:building_food_plantation = building_food_plantation_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_food_plantation = controller:latest_production_method@token:building_food_plantation }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_food_plantation
                            clear_variable = production_method@token:building_food_plantation
                        }
                        if = {
                            limit = {
                                check_variable = { building_material_plantation_size > 0 }
                            }
                            subtract_from_temp_variable = { sub_farm_size_temp = building_material_plantation_size }

                            set_variable = { size@token:building_material_plantation = building_material_plantation_size }
                            if = {
                                limit = {
                                    has_variable = building_material_plantation_pm
                                }
                                set_variable = { production_method@token:building_material_plantation = building_material_plantation_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_material_plantation = controller:latest_production_method@token:building_material_plantation }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_material_plantation
                            clear_variable = production_method@token:building_material_plantation
                        }
                        if = {
                            limit = {
                                check_variable = { building_luxuries_plantation_size > 0 }
                            }
                            subtract_from_temp_variable = { sub_farm_size_temp = building_luxuries_plantation_size }

                            set_variable = { size@token:building_luxuries_plantation = building_luxuries_plantation_size }
                            if = {
                                limit = {
                                    has_variable = building_luxuries_plantation_pm
                                }
                                set_variable = { production_method@token:building_luxuries_plantation = building_luxuries_plantation_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_luxuries_plantation = controller:latest_production_method@token:building_luxuries_plantation }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_luxuries_plantation
                            clear_variable = production_method@token:building_luxuries_plantation
                        }

                        if = {
                            limit = {
                                check_variable = { sub_farm_size_temp > 0 }
                            }
                            if = {
                                limit = {
                                    has_state_flag = uses_rice_paddies
                                }
                                set_variable = { size@token:building_rice_paddy = sub_farm_size_temp }
                            }
                            else = {
                                set_variable = { size@token:building_subsistence_farm = sub_farm_size_temp }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_subsistence_farm
                            clear_variable = size@token:building_rice_paddy
                        }


                        if = {
                            limit = {
                                check_variable = { building_lumber_mill_size > 0 }
                            }
                            set_variable = { size@token:building_lumber_mill = building_lumber_mill_size }
                            if = {
                                limit = {
                                    has_variable = building_lumber_mill_pm
                                }
                                set_variable = { production_method@token:building_lumber_mill = building_lumber_mill_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_lumber_mill = controller:latest_production_method@token:building_lumber_mill }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_lumber_mill
                            clear_variable = production_method@token:building_lumber_mill
                        }
                        if = {
                            limit = {
                                check_variable = { building_metals_mine_size > 0 }
                            }
                            set_variable = { size@token:building_metals_mine = building_metals_mine_size }
                            if = {
                                limit = {
                                    has_variable = building_metals_mine_pm
                                }
                                set_variable = { production_method@token:building_metals_mine = building_metals_mine_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_metals_mine = controller:latest_production_method@token:building_metals_mine }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_metals_mine
                            clear_variable = production_method@token:building_metals_mine
                        }
                        if = {
                            limit = {
                                check_variable = { building_coal_mine_size > 0 }
                            }
                            set_variable = { size@token:building_coal_mine = building_coal_mine_size }
                            if = {
                                limit = {
                                    has_variable = building_coal_mine_pm
                                }
                                set_variable = { production_method@token:building_coal_mine = building_coal_mine_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_coal_mine = controller:latest_production_method@token:building_coal_mine }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_coal_mine
                            clear_variable = production_method@token:building_coal_mine
                        }
                        if = {
                            limit = {
                                check_variable = { building_oil_well_size > 0 }
                            }
                            set_variable = { size@token:building_oil_well = building_oil_well_size }
                            if = {
                                limit = {
                                    has_variable = building_oil_well_pm
                                }
                                set_variable = { production_method@token:building_oil_well = building_oil_well_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_oil_well = controller:latest_production_method@token:building_oil_well }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_oil_well
                            clear_variable = production_method@token:building_oil_well
                        }
                        if = {
                            limit = {
                                check_variable = { building_valuables_extractor_size > 0 }
                            }
                            set_variable = { size@token:building_valuables_extractor = building_valuables_extractor_size }
                            if = {
                                limit = {
                                    has_variable = building_valuables_extractor_pm
                                }
                                set_variable = { production_method@token:building_valuables_extractor = building_valuables_extractor_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_valuables_extractor = controller:latest_production_method@token:building_valuables_extractor }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_valuables_extractor
                            clear_variable = production_method@token:building_valuables_extractor
                        }
                    #
                    #Urban Buildings
                        if = {
                            limit = {
                                check_variable = { building_port_size > 0 }
                            }
                            set_variable = { size@token:building_port = building_port_size }
                            if = {
                                limit = {
                                    has_variable = building_port_pm
                                }
                                set_variable = { production_method@token:building_port = building_port_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_port = controller:latest_production_method@token:building_port }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_port
                            clear_variable = production_method@token:building_port
                        }
                        if = {
                            limit = {
                                check_variable = { building_airport_size > 0 }
                            }
                            set_variable = { size@token:building_airport = building_airport_size }
                            if = {
                                limit = {
                                    has_variable = building_airport_pm
                                }
                                set_variable = { production_method@token:building_airport = building_airport_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_airport = controller:latest_production_method@token:building_airport }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_airport
                            clear_variable = production_method@token:building_airport
                        }

                        if = {
                            limit = {
                                check_variable = { arms_factory_level > 0 }
                            }
                            set_variable = { size@token:building_military_industry = arms_factory_level }
                            if = {
                                limit = {
                                    has_variable = building_military_industry_pm
                                }
                                set_variable = { production_method@token:building_military_industry = building_military_industry_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_military_industry = controller:latest_production_method@token:building_military_industry }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_military_industry
                            clear_variable = production_method@token:building_military_industry
                        }
                        if = {
                            limit = {
                                check_variable = { industrial_complex_level > 0 }
                            }
                            set_variable = { size@token:building_civilian_industry = industrial_complex_level }
                            if = {
                                limit = {
                                    has_variable = building_civilian_industry_pm
                                }
                                set_variable = { production_method@token:building_civilian_industry = building_civilian_industry_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_civilian_industry = controller:latest_production_method@token:building_civilian_industry }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_civilian_industry
                            clear_variable = production_method@token:building_civilian_industry
                        }
                        if = {
                            limit = {
                                check_variable = { building_level@dockyard > 0 }
                            }
                            set_variable = { size@token:building_naval_industry = building_level@dockyard }
                            if = {
                                limit = {
                                    has_variable = building_naval_industry_pm
                                }
                                set_variable = { production_method@token:building_naval_industry = building_naval_industry_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_naval_industry = controller:latest_production_method@token:building_naval_industry }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_naval_industry
                            clear_variable = production_method@token:building_naval_industry
                        }

                        if = {
                            limit = {
                                check_variable = { building_consumer_goods_factory_size > 0 }
                            }
                            set_variable = { size@token:building_consumer_goods_factory = building_consumer_goods_factory_size }
                            if = {
                                limit = {
                                    has_variable = building_consumer_goods_factory_pm
                                }
                                set_variable = { production_method@token:building_consumer_goods_factory = building_consumer_goods_factory_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_consumer_goods_factory = controller:latest_production_method@token:building_consumer_goods_factory }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_consumer_goods_factory
                            clear_variable = production_method@token:building_consumer_goods_factory
                        }
                        if = {
                            limit = {
                                check_variable = { building_luxury_goods_factory_size > 0 }
                            }
                            set_variable = { size@token:building_luxury_goods_factory = building_luxury_goods_factory_size }
                            if = {
                                limit = {
                                    has_variable = building_luxury_goods_factory_pm
                                }
                                set_variable = { production_method@token:building_luxury_goods_factory = building_luxury_goods_factory_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_luxury_goods_factory = controller:latest_production_method@token:building_luxury_goods_factory }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_luxury_goods_factory
                            clear_variable = production_method@token:building_luxury_goods_factory
                        }
                        if = {
                            limit = {
                                check_variable = { building_industrial_goods_factory_size > 0 }
                            }
                            set_variable = { size@token:building_industrial_goods_factory = building_industrial_goods_factory_size }
                            if = {
                                limit = {
                                    has_variable = building_industrial_goods_factory_pm
                                }
                                set_variable = { production_method@token:building_industrial_goods_factory = building_industrial_goods_factory_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_industrial_goods_factory = controller:latest_production_method@token:building_industrial_goods_factory }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_industrial_goods_factory
                            clear_variable = production_method@token:building_industrial_goods_factory
                        }
                        if = {
                            limit = {
                                check_variable = { building_services_building_size > 0 }
                            }
                            set_variable = { size@token:building_services_building = building_services_building_size }
                            if = {
                                limit = {
                                    has_variable = building_services_building_pm
                                }
                                set_variable = { production_method@token:building_services_building = building_services_building_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_services_building = controller:latest_production_method@token:building_services_building }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_services_building
                            clear_variable = production_method@token:building_services_building
                        }
                        if = {
                            limit = {
                                check_variable = { building_power_plant_size > 0 }
                            }
                            set_variable = { size@token:building_power_plant = building_power_plant_size }
                            if = {
                                limit = {
                                    has_variable = building_power_plant_pm
                                }
                                set_variable = { production_method@token:building_power_plant = building_power_plant_pm }
                            }
                            else = {
                                set_variable = { production_method@token:building_power_plant = controller:latest_production_method@token:building_power_plant }
                            }
                        }
                        else = {
                            clear_variable = size@token:building_power_plant
                            clear_variable = production_method@token:building_power_plant
                        }
                    #
                    reload_building_array = yes
                    buildings_update = yes
                    building_productivity_sort = yes
                    base_wage_calculation = yes
                #

                r_update_modifiers_state_effects = yes

                #Employment Setup

                    # Add up all the jobs
                    for_each_loop = {
                        array = buildings
                        value = emp_ind_token
                        set_variable = { employment_target@var:emp_ind_token = 100 }
                    }
                    pops_workforce_update = yes

                    # Take chunks out of workforce value until it reaches 0
                    set_variable = { peasants_workforce = pops_workforce }

                    if = { # Capitalists
                        limit = {
                            check_variable = { capitalists_jobs > peasants_workforce }
                        }
                        set_variable = { capitalists_workforce = peasants_workforce }
                        set_variable = { peasants_workforce = 0 }
                    }
                    else = {
                        set_variable = { capitalists_workforce = capitalists_jobs }
                        subtract_from_variable = { peasants_workforce = capitalists_workforce }
                    
                        if = {  # Aristocrats
                            limit = {
                                check_variable = { aristocrats_jobs > peasants_workforce }
                            }
                            set_variable = { aristocrats_workforce = peasants_workforce }
                            set_variable = { peasants_workforce = 0 }
                        }
                        else = {
                            set_variable = { aristocrats_workforce = aristocrats_jobs }
                            subtract_from_variable = { peasants_workforce = aristocrats_workforce }
                        
                            if = {  # Specialists
                                limit = {
                                    check_variable = { specialists_jobs > peasants_workforce }
                                }
                                set_variable = { specialists_workforce = peasants_workforce }
                                set_variable = { peasants_workforce = 0 }
                            }
                            else = {
                                set_variable = { specialists_workforce = specialists_jobs }
                                subtract_from_variable = { peasants_workforce = specialists_workforce }
                            
                                if = {  # Professionals
                                    limit = {
                                        check_variable = { professionals_jobs > peasants_workforce }
                                    }
                                    set_variable = { professionals_workforce = peasants_workforce }
                                    set_variable = { peasants_workforce = 0 }
                                }
                                else = {
                                    set_variable = { professionals_workforce = professionals_jobs }
                                    subtract_from_variable = { peasants_workforce = professionals_workforce }
                                
                                    if = {  # Workers
                                        limit = {
                                            check_variable = { workers_jobs > peasants_workforce }
                                        }
                                        set_variable = { workers_workforce = peasants_workforce }
                                        set_variable = { peasants_workforce = 0 }
                                    }
                                    else = {
                                        set_variable = { workers_workforce = workers_jobs }
                                        subtract_from_variable = { peasants_workforce = workers_workforce }
                                    
                                        if = {  # Laborers
                                            limit = {
                                                check_variable = { laborers_jobs > peasants_workforce }
                                            }
                                            set_variable = { laborers_workforce = peasants_workforce }
                                            set_variable = { peasants_workforce = 0 }
                                        }
                                        else = {
                                            set_variable = { laborers_workforce = laborers_jobs }
                                            subtract_from_variable = { peasants_workforce = laborers_workforce }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    pops_workforce_update = yes

                    buildings_update = yes
                    pops_update = yes

                    for_each_loop = {
                        array = buildings
                        value = emp_ind_token
                        set_variable = { employment_target@var:emp_ind_token = employment_percentage@var:emp_ind_token }
                    }
                #

                calc_industrial_capacity = yes
                buildings_update = yes

                #Standard of Living Setup
                    calculate_pop_needs = yes
                    pops_update = yes

                    #Slaves
                        set_temp_variable = { earnings_temp = slaves_earnings }
                        divide_temp_variable = { earnings_temp = slaves }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { slaves_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Peasants
                        set_temp_variable = { earnings_temp = peasants_earnings }
                        divide_temp_variable = { earnings_temp = peasants }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { peasants_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Laborers
                        set_temp_variable = { earnings_temp = laborers_earnings }
                        divide_temp_variable = { earnings_temp = laborers }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { laborers_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Workers
                        set_temp_variable = { earnings_temp = workers_earnings }
                        divide_temp_variable = { earnings_temp = workers }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { workers_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Professionals
                        set_temp_variable = { earnings_temp = professionals_earnings }
                        divide_temp_variable = { earnings_temp = professionals }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { professionals_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Specialists
                        set_temp_variable = { earnings_temp = specialists_earnings }
                        divide_temp_variable = { earnings_temp = specialists }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { specialists_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Aristocrats
                        set_temp_variable = { earnings_temp = aristocrats_earnings }
                        divide_temp_variable = { earnings_temp = aristocrats }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { aristocrats_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Capitalists
                        set_temp_variable = { earnings_temp = capitalists_earnings }
                        divide_temp_variable = { earnings_temp = capitalists }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { capitalists_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Bureaucrats
                        set_temp_variable = { earnings_temp = bureaucrats_earnings }
                        divide_temp_variable = { earnings_temp = bureaucrats }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { bureaucrats_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #
                    #Soldiers
                        set_temp_variable = { earnings_temp = soldiers_earnings }
                        divide_temp_variable = { earnings_temp = soldiers }
                        for_each_loop = {
                            array = global.pops_spending_at_sol
                            index = sol_temp
                            value = col_temp
                            break = b

                            if = {
                                limit = {
                                    check_variable = { earnings_temp < col_temp }
                                }
                                set_variable = { soldiers_sol = sol_temp }
                                set_temp_variable = { b = 1 }
                            }
                        }
                    #

                    calculate_pop_needs = yes
                #

                calc_industrial_capacity = yes
            }

            calc_shipping_capacity = yes
            market_leader_check = yes
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                market_update = yes
            }
        }
        every_country = {

            market_calc_gdp = yes
            
            # Trade
                if = {
                    limit = {
                        check_variable = { market_leader = THIS }
                    }
                    for_each_loop = {
                        array = global.resource_token_array
                        value = r_token

                        if = {
                            limit = {
                                NOT = { is_in_array = { global.non_tradeable_resources = r_token } }
                                OR = {
                                    check_variable = { demand@var:r_token > 0 }
                                    check_variable = { supply@var:r_token > 0 }
                                }
                            }
                            set_temp_variable = { resource_temp = r_token }
                            trade_ai_determine_max_trade = yes
                            multiply_temp_variable = { amount_temp = 0.95 }
                            set_temp_variable = { no_update_temp = 1 }
                            set_trade = yes
                        }
                    }
                    trade_update = yes
                }
            #
        }
        global_economy_update = yes
        r_weekly_trade = yes
        every_country = {
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                market_update = yes
                trade_update = yes
                market_calc_gdp = yes
            }

            set_variable = { gdp_amount = 0 }
            every_controlled_state = {
                for_each_loop = {
                    array = global.resource_token_array
                    value = r_type
                    set_variable = { trade_amount@var:r_type = demand@var:r_type }
                    subtract_from_variable = { trade_amount@var:r_type = production@var:r_type }

                    set_variable = { trade_value@var:r_type = trade_amount@var:r_type }
                    multiply_variable = { trade_value@var:r_type = price@var:r_type }
                    multiply_variable = { trade_value@var:r_type = -1 }
                }

                pops_update = yes
                buildings_update = yes

                building_productivity_sort = yes
                
                for_each_loop = {
                    array = buildings
                    value = b_token

                    if = {
                        limit = {
                            check_variable = { profit@var:b_token > 0 }
                        }
                        set_variable = { money@var:b_token = money_limit@var:b_token }
                        set_variable = { dividends@var:b_token = profit@var:b_token }
                    }
                    else = {
                        set_variable = { money@var:b_token = 0 }
                        set_variable = { dividends@var:b_token = profit@var:b_token }
                    }
                }

                pops_update = yes

                create_pie_chart_pop_type = yes
                gdp_update = yes
				refresh_construction_list = yes
                add_to_variable = { PREV.gdp_amount = gdp_amount }

                initialize_gdp_graph = yes
            }

            update_country_pop_stats = yes
            io_state_list = yes
            investment_opportunities_update = yes

            for_loop_effect = {
                end = investment_opportunities_cap
                generate_investment_opportunity = yes
            }

            investment_fund_update = yes

            update_country_pop_stats = yes

            budget_update = yes
            national_debt_update = yes

            if = {
                limit = {
                    check_variable = { debt_to_gdp_saved > 0 }
                }
                set_temp_variable = { x_temp = debt_to_gdp_saved }
                set_debt_to_gdp = yes
                clear_variable = debt_to_gdp_saved
            }
            else_if = {
                limit = {
                    check_variable = { debt_level_saved > 0 }
                }
                set_temp_variable = { x_temp = debt_level_saved }
                multiply_temp_variable = { x_temp = 4 }
                set_debt_to_gdp = yes
                clear_variable = debt_level_saved
            }

            market_calc_gdp = yes
            initialize_country_gdp_graph = yes
            initialize_country_budget_graph = yes
            country_update_trade_display = yes
        }
        r_weekly_trade = yes
        r_weekly_trade = yes
        global_economy_update = yes

    }

    r_weekly_trade = {
        # Effect that runs weekly 
		random_country = {
            create_econ_order_array = yes
        }

		for_each_scope_loop = {
			array = global.econ_order_array
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                market_update = yes
            }
        }

		for_each_scope_loop = {
			array = global.econ_order_array
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                trade_ai_calculation = yes
            }
        }
        
		for_each_scope_loop = {
			array = global.econ_order_array
            if = {
                limit = {
                    check_variable = { market_leader = THIS }
                }
                trade_update = yes
            }
        }
    }

    country_recalc = {
        # Used for when auto-completing buildings for setup
        r_update_modifiers_country_effects = yes
        buildings_update_base_latest_vals = yes
        every_controlled_state = {
            r_update_modifiers_state_effects = yes

            reload_building_array = yes
            buildings_update = yes

            # NOTE: Copy and pasted from r_reset

            #Employment Setup

                # Add up all the jobs
                for_each_loop = {
                    array = buildings
                    value = emp_ind_token
                    set_variable = { employment_target@var:emp_ind_token = 100 }
                }
                pops_workforce_update = yes

                # Take chunks out of workforce value until it reaches 0
                set_variable = { peasants_workforce = pops_workforce }

                if = { # Capitalists
                    limit = {
                        check_variable = { capitalists_jobs > peasants_workforce }
                    }
                    set_variable = { capitalists_workforce = peasants_workforce }
                    set_variable = { peasants_workforce = 0 }
                }
                else = {
                    set_variable = { capitalists_workforce = capitalists_jobs }
                    subtract_from_variable = { peasants_workforce = capitalists_workforce }
                
                    if = {  # Aristocrats
                        limit = {
                            check_variable = { aristocrats_jobs > peasants_workforce }
                        }
                        set_variable = { aristocrats_workforce = peasants_workforce }
                        set_variable = { peasants_workforce = 0 }
                    }
                    else = {
                        set_variable = { aristocrats_workforce = aristocrats_jobs }
                        subtract_from_variable = { peasants_workforce = aristocrats_workforce }
                    
                        if = {  # Specialists
                            limit = {
                                check_variable = { specialists_jobs > peasants_workforce }
                            }
                            set_variable = { specialists_workforce = peasants_workforce }
                            set_variable = { peasants_workforce = 0 }
                        }
                        else = {
                            set_variable = { specialists_workforce = specialists_jobs }
                            subtract_from_variable = { peasants_workforce = specialists_workforce }
                        
                            if = {  # Professionals
                                limit = {
                                    check_variable = { professionals_jobs > peasants_workforce }
                                }
                                set_variable = { professionals_workforce = peasants_workforce }
                                set_variable = { peasants_workforce = 0 }
                            }
                            else = {
                                set_variable = { professionals_workforce = professionals_jobs }
                                subtract_from_variable = { peasants_workforce = professionals_workforce }
                            
                                if = {  # Workers
                                    limit = {
                                        check_variable = { workers_jobs > peasants_workforce }
                                    }
                                    set_variable = { workers_workforce = peasants_workforce }
                                    set_variable = { peasants_workforce = 0 }
                                }
                                else = {
                                    set_variable = { workers_workforce = workers_jobs }
                                    subtract_from_variable = { peasants_workforce = workers_workforce }
                                
                                    if = {  # Laborers
                                        limit = {
                                            check_variable = { laborers_jobs > peasants_workforce }
                                        }
                                        set_variable = { laborers_workforce = peasants_workforce }
                                        set_variable = { peasants_workforce = 0 }
                                    }
                                    else = {
                                        set_variable = { laborers_workforce = laborers_jobs }
                                        subtract_from_variable = { peasants_workforce = laborers_workforce }
                                    }
                                }
                            }
                        }
                    }
                }

                pops_workforce_update = yes

                buildings_update = yes
                pops_update = yes

                for_each_loop = {
                    array = buildings
                    value = emp_ind_token
                    set_variable = { employment_target@var:emp_ind_token = employment_percentage@var:emp_ind_token }
                }
            #

            calc_industrial_capacity = yes
            buildings_update = yes
            pops_update = yes

            calculate_standard_of_living = yes # Setup SoL
            readjust_standard_of_living = yes
            readjust_standard_of_living = yes
            readjust_standard_of_living = yes

            calc_industrial_capacity = yes
        }

        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
        }

        every_controlled_state = {
            readjust_standard_of_living = yes
            readjust_standard_of_living = yes
            readjust_standard_of_living = yes
        }

        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
            market_calc_gdp = yes
        }

        every_controlled_state = {
            pops_update = yes
            buildings_update = yes
            create_pie_chart_pop_type = yes
        }

        update_country_pop_stats = yes

        budget_update = yes
    }

#Pops
    pops_update = {
        set_variable = { pops_workforce_percentage = global.pops_workforce_participation }
        
        set_variable = { pops = pops_workforce }
        divide_variable = { pops = global.pops_workforce_participation }

        # Reset to 0
            set_variable = { pops_needs_spending = 0 }
			set_variable = { pops_employed = 0 }
            set_variable = { pops_sol = 0 }
            set_variable = { pops_income_tax_spending = 0 }
            set_variable = { pops_corporate_tax_spending = 0 }
            set_variable = { pops_sales_tax_spending = 0 }
            set_variable = { pops_debt_interest_spending = 0 }
            set_variable = { pops_spending_target = 0 }
            set_variable = { pops_earnings = 0 }
        #

        pops_workforce_update = yes

        set_temp_variable = { cons_conf_temp = controller:modifier@consumer_confidence_modifier }
        divide_temp_variable = { cons_conf_temp = 100 }

        set_temp_variable = { upper_earnings_limit = controller:pops_earnings_avg }
        multiply_temp_variable = { upper_earnings_limit = 3 }
        set_temp_variable = { lower_earnings_limit = controller:pops_earnings_avg }

        set_temp_variable = { upper_income_multiplier = controller:income_tax_upper_strata_percentage_actual }
        divide_temp_variable = { upper_income_multiplier = 100 }
        set_temp_variable = { middle_income_multiplier = controller:income_tax_middle_strata_percentage_actual }
        divide_temp_variable = { middle_income_multiplier = 100 }
        set_temp_variable = { lower_income_multiplier = controller:income_tax_lower_strata_percentage_actual }
        divide_temp_variable = { lower_income_multiplier = 100 }
        set_temp_variable = { sales_tax_multiplier = controller:sales_tax_percentage_actual }
        divide_temp_variable = { sales_tax_multiplier = 100 }
        set_temp_variable = { corporate_tax_multiplier = controller:corporate_tax_percentage_actual }
        divide_temp_variable = { corporate_tax_multiplier = 100 }

        # Slaves
            if = {
                limit = {
                    check_variable = { slaves_workforce > 0 }
                }
                set_variable = { slaves = slaves_workforce }
                divide_variable = { slaves = pops_workforce_percentage }
                set_variable = { slaves_percentage = slaves }
                divide_variable = { slaves_percentage = pops }

                add_to_variable = { pops_employed = slaves_employed }

                set_variable = { slaves_unemployed = slaves_workforce }
                subtract_from_variable = { slaves_unemployed = slaves_employed }

                # Earnings/Spending
                set_variable = { slaves_earnings = slaves_employed }
                multiply_variable = { slaves_earnings = base_wage }
                add_to_variable = { pops_earnings = slaves_earnings }

				set_variable = { slaves_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { slaves_need_cost@var:r_token = slaves_need@var:r_token } 
			        multiply_variable = { slaves_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { slaves_needs_spending = slaves_need_cost@var:r_token }
                }

                set_variable = { slaves_col = slaves_needs_spending }
                divide_variable = { slaves_col = slaves_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = slaves_sol }
                multiply_temp_variable = { sol_temp = slaves_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = slaves_needs_spending }
                set_variable = { slaves_spending = slaves_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = slaves_earnings }
                divide_temp_variable = { avg_earnings_temp = slaves }
                set_variable = { slaves_income_tax_spending = slaves_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { slaves_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { slaves_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { slaves_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { slaves_spending = slaves_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = slaves_income_tax_spending }

                #Spending Target
                set_variable = { slaves_spending_target = slaves_earnings }
                subtract_from_variable = { slaves_spending_target = slaves_income_tax_spending }
                multiply_variable = { slaves_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = slaves_spending_target }

                #Sales Tax
                set_variable = { slaves_sales_tax_spending = slaves_needs_spending }
                multiply_variable = { slaves_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { slaves_spending = slaves_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = slaves_sales_tax_spending }

                #Interest
                set_variable = { slaves_debt_interest_spending = slaves_debt }
                divide_variable = { slaves_debt_interest_spending = 12 }
                multiply_variable = { slaves_debt_interest_spending = controller:interest_rate }
                divide_variable = { slaves_debt_interest_spending = 100 }
                add_to_variable = { slaves_spending = slaves_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = slaves_debt_interest_spending }
            }
            else = {
                set_variable = { slaves_spending = 0 }
                subtract_from_variable = { slaves_spending_target = 0 }
                set_variable = { slaves_income_tax_spending = 0 }
                set_variable = { slaves_sales_tax_spending = 0 }
                set_variable = { slaves_debt_interest_spending = 0 }
            }
        #
        # Peasants
            if = {
                limit = {
                    check_variable = { peasants_workforce > 0 }
                }
                set_variable = { peasants = peasants_workforce }
                divide_variable = { peasants = pops_workforce_percentage }
                set_variable = { peasants_percentage = peasants }
                divide_variable = { peasants_percentage = pops }

                add_to_variable = { pops_employed = peasants_employed }

                set_variable = { peasants_unemployed = peasants_workforce }
                subtract_from_variable = { peasants_unemployed = peasants_employed }

                # Earnings/Spending
                set_variable = { peasants_earnings = expenses_payroll@token:subsistence_farm }
                add_to_variable = { pops_earnings = peasants_earnings }

				set_variable = { peasants_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { peasants_need_cost@var:r_token = peasants_need@var:r_token } 
			        multiply_variable = { peasants_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { peasants_needs_spending = peasants_need_cost@var:r_token }
                }

                set_variable = { peasants_col = peasants_needs_spending }
                divide_variable = { peasants_col = peasants_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = peasants_sol }
                multiply_temp_variable = { sol_temp = peasants_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = peasants_needs_spending }
                set_variable = { peasants_spending = peasants_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = peasants_earnings }
                divide_temp_variable = { avg_earnings_temp = peasants }
                set_variable = { peasants_income_tax_spending = peasants_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { peasants_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { peasants_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { peasants_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { peasants_spending = peasants_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = peasants_income_tax_spending }

                #Spending Target
                set_variable = { peasants_spending_target = peasants_earnings }
                subtract_from_variable = { peasants_spending_target = peasants_income_tax_spending }
                multiply_variable = { peasants_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = peasants_spending_target }

                #Sales Tax
                set_variable = { peasants_sales_tax_spending = peasants_needs_spending }
                multiply_variable = { peasants_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { peasants_spending = peasants_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = peasants_sales_tax_spending }

                #Interest
                set_variable = { peasants_debt_interest_spending = peasants_debt }
                divide_variable = { peasants_debt_interest_spending = 12 }
                multiply_variable = { peasants_debt_interest_spending = controller:interest_rate }
                divide_variable = { peasants_debt_interest_spending = 100 }
                add_to_variable = { peasants_spending = peasants_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = peasants_debt_interest_spending }
            }
            else = {
                set_variable = { peasants_spending = 0 }
                subtract_from_variable = { peasants_spending_target = 0 }
                set_variable = { peasants_income_tax_spending = 0 }
                set_variable = { peasants_sales_tax_spending = 0 }
                set_variable = { peasants_debt_interest_spending = 0 }
            }
        #
        # Laborers
            if = {
                limit = {
                    check_variable = { laborers_workforce > 0 }
                }
                set_variable = { laborers = laborers_workforce }
                divide_variable = { laborers = pops_workforce_percentage }
                set_variable = { laborers_percentage = laborers }
                divide_variable = { laborers_percentage = pops }

                add_to_variable = { pops_employed = laborers_employed }

                set_variable = { laborers_unemployed = laborers_workforce }
                subtract_from_variable = { laborers_unemployed = laborers_employed }

                # Earnings/Spending
                set_variable = { laborers_earnings = laborers_employed }
                multiply_variable = { laborers_earnings = laborers_wage }
                add_to_variable = { pops_earnings = laborers_earnings }

				set_variable = { laborers_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { laborers_need_cost@var:r_token = laborers_need@var:r_token } 
			        multiply_variable = { laborers_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { laborers_needs_spending = laborers_need_cost@var:r_token }
                }

                set_variable = { laborers_col = laborers_needs_spending }
                divide_variable = { laborers_col = laborers_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = laborers_sol }
                multiply_temp_variable = { sol_temp = laborers_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = laborers_needs_spending }
                set_variable = { laborers_spending = laborers_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = laborers_earnings }
                divide_temp_variable = { avg_earnings_temp = laborers }
                set_variable = { laborers_income_tax_spending = laborers_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { laborers_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { laborers_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { laborers_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { laborers_spending = laborers_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = laborers_income_tax_spending }

                #Spending Target
                set_variable = { laborers_spending_target = laborers_earnings }
                subtract_from_variable = { laborers_spending_target = laborers_income_tax_spending }
                multiply_variable = { laborers_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = laborers_spending_target }

                #Sales Tax
                set_variable = { laborers_sales_tax_spending = laborers_needs_spending }
                multiply_variable = { laborers_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { laborers_spending = laborers_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = laborers_sales_tax_spending }

                #Interest
                set_variable = { laborers_debt_interest_spending = laborers_debt }
                divide_variable = { laborers_debt_interest_spending = 12 }
                multiply_variable = { laborers_debt_interest_spending = controller:interest_rate }
                divide_variable = { laborers_debt_interest_spending = 100 }
                add_to_variable = { laborers_spending = laborers_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = laborers_debt_interest_spending }
            }
            else = {
                set_variable = { laborers_spending = 0 }
                subtract_from_variable = { laborers_spending_target = 0 }
                set_variable = { laborers_income_tax_spending = 0 }
                set_variable = { laborers_sales_tax_spending = 0 }
                set_variable = { laborers_debt_interest_spending = 0 }
            }
        #
        # Workers
            if = {
                limit = {
                    check_variable = { workers_workforce > 0 }
                }
                set_variable = { workers = workers_workforce }
                divide_variable = { workers = pops_workforce_percentage }
                set_variable = { workers_percentage = workers }
                divide_variable = { workers_percentage = pops }

                add_to_variable = { pops_employed = workers_employed }

                set_variable = { workers_unemployed = workers_workforce }
                subtract_from_variable = { workers_unemployed = workers_employed }

                # Earnings/Spending
                set_variable = { workers_earnings = workers_employed }
                multiply_variable = { workers_earnings = workers_wage }
                add_to_variable = { pops_earnings = workers_earnings }

				set_variable = { workers_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { workers_need_cost@var:r_token = workers_need@var:r_token } 
			        multiply_variable = { workers_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { workers_needs_spending = workers_need_cost@var:r_token }
                }

                set_variable = { workers_col = workers_needs_spending }
                divide_variable = { workers_col = workers_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = workers_sol }
                multiply_temp_variable = { sol_temp = workers_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = workers_needs_spending }
                set_variable = { workers_spending = workers_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = workers_earnings }
                divide_temp_variable = { avg_earnings_temp = workers }
                set_variable = { workers_income_tax_spending = workers_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { workers_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { workers_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { workers_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { workers_spending = workers_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = workers_income_tax_spending }

                #Spending Target
                set_variable = { workers_spending_target = workers_earnings }
                subtract_from_variable = { workers_spending_target = workers_income_tax_spending }
                multiply_variable = { workers_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = workers_spending_target }

                #Sales Tax
                set_variable = { workers_sales_tax_spending = workers_needs_spending }
                multiply_variable = { workers_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { workers_spending = workers_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = workers_sales_tax_spending }

                #Interest
                set_variable = { workers_debt_interest_spending = workers_debt }
                divide_variable = { workers_debt_interest_spending = 12 }
                multiply_variable = { workers_debt_interest_spending = controller:interest_rate }
                divide_variable = { workers_debt_interest_spending = 100 }
                add_to_variable = { workers_spending = workers_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = workers_debt_interest_spending }
            }
            else = {
                set_variable = { workers_spending = 0 }
                subtract_from_variable = { workers_spending_target = 0 }
                set_variable = { workers_income_tax_spending = 0 }
                set_variable = { workers_sales_tax_spending = 0 }
                set_variable = { workers_debt_interest_spending = 0 }
            }
        #
        # Professionals
            if = {
                limit = {
                    check_variable = { professionals_workforce > 0 }
                }
                set_variable = { professionals = professionals_workforce }
                divide_variable = { professionals = pops_workforce_percentage }
                set_variable = { professionals_percentage = professionals }
                divide_variable = { professionals_percentage = pops }

                add_to_variable = { pops_employed = professionals_employed }

                set_variable = { professionals_unemployed = professionals_workforce }
                subtract_from_variable = { professionals_unemployed = professionals_employed }

                # Earnings/Spending
                set_variable = { professionals_earnings = professionals_employed }
                multiply_variable = { professionals_earnings = professionals_wage }
                add_to_variable = { pops_earnings = professionals_earnings }

				set_variable = { professionals_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { professionals_need_cost@var:r_token = professionals_need@var:r_token } 
			        multiply_variable = { professionals_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { professionals_needs_spending = professionals_need_cost@var:r_token }
                }

                set_variable = { professionals_col = professionals_needs_spending }
                divide_variable = { professionals_col = professionals_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = professionals_sol }
                multiply_temp_variable = { sol_temp = professionals_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = professionals_needs_spending }
                set_variable = { professionals_spending = professionals_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = professionals_earnings }
                divide_temp_variable = { avg_earnings_temp = professionals }
                set_variable = { professionals_income_tax_spending = professionals_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { professionals_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { professionals_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { professionals_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { professionals_spending = professionals_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = professionals_income_tax_spending }

                #Spending Target
                set_variable = { professionals_spending_target = professionals_earnings }
                subtract_from_variable = { professionals_spending_target = professionals_income_tax_spending }
                multiply_variable = { professionals_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = professionals_spending_target }

                #Sales Tax
                set_variable = { professionals_sales_tax_spending = professionals_needs_spending }
                multiply_variable = { professionals_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { professionals_spending = professionals_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = professionals_sales_tax_spending }

                #Interest
                set_variable = { professionals_debt_interest_spending = professionals_debt }
                divide_variable = { professionals_debt_interest_spending = 12 }
                multiply_variable = { professionals_debt_interest_spending = controller:interest_rate }
                divide_variable = { professionals_debt_interest_spending = 100 }
                add_to_variable = { professionals_spending = professionals_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = professionals_debt_interest_spending }
            }
            else = {
                set_variable = { professionals_spending = 0 }
                subtract_from_variable = { professionals_spending_target = 0 }
                set_variable = { professionals_income_tax_spending = 0 }
                set_variable = { professionals_sales_tax_spending = 0 }
                set_variable = { professionals_debt_interest_spending = 0 }
            }
        #
        # Specialists
            if = {
                limit = {
                    check_variable = { specialists_workforce > 0 }
                }
                set_variable = { specialists = specialists_workforce }
                divide_variable = { specialists = pops_workforce_percentage }
                set_variable = { specialists_percentage = specialists }
                divide_variable = { specialists_percentage = pops }

                add_to_variable = { pops_employed = specialists_employed }

                set_variable = { specialists_unemployed = specialists_workforce }
                subtract_from_variable = { specialists_unemployed = specialists_employed }

                # Earnings/Spending
                set_variable = { specialists_earnings = specialists_employed }
                multiply_variable = { specialists_earnings = specialists_wage }
                add_to_variable = { pops_earnings = specialists_earnings }

				set_variable = { specialists_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { specialists_need_cost@var:r_token = specialists_need@var:r_token } 
			        multiply_variable = { specialists_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { specialists_needs_spending = specialists_need_cost@var:r_token }
                }

                set_variable = { specialists_col = specialists_needs_spending }
                divide_variable = { specialists_col = specialists_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = specialists_sol }
                multiply_temp_variable = { sol_temp = specialists_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = specialists_needs_spending }
                set_variable = { specialists_spending = specialists_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = specialists_earnings }
                divide_temp_variable = { avg_earnings_temp = specialists }
                set_variable = { specialists_income_tax_spending = specialists_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { specialists_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { specialists_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { specialists_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { specialists_spending = specialists_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = specialists_income_tax_spending }

                #Spending Target
                set_variable = { specialists_spending_target = specialists_earnings }
                subtract_from_variable = { specialists_spending_target = specialists_income_tax_spending }
                multiply_variable = { specialists_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = specialists_spending_target }

                #Sales Tax
                set_variable = { specialists_sales_tax_spending = specialists_needs_spending }
                multiply_variable = { specialists_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { specialists_spending = specialists_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = specialists_sales_tax_spending }

                #Interest
                set_variable = { specialists_debt_interest_spending = specialists_debt }
                divide_variable = { specialists_debt_interest_spending = 12 }
                multiply_variable = { specialists_debt_interest_spending = controller:interest_rate }
                divide_variable = { specialists_debt_interest_spending = 100 }
                add_to_variable = { specialists_spending = specialists_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = specialists_debt_interest_spending }
            }
            else = {
                set_variable = { specialists_spending = 0 }
                subtract_from_variable = { specialists_spending_target = 0 }
                set_variable = { specialists_income_tax_spending = 0 }
                set_variable = { specialists_sales_tax_spending = 0 }
                set_variable = { specialists_debt_interest_spending = 0 }
            }
        #
        # Aristocrats
            if = {
                limit = {
                    check_variable = { aristocrats_workforce > 0 }
                }
                set_variable = { aristocrats = aristocrats_workforce }
                divide_variable = { aristocrats = pops_workforce_percentage }
                set_variable = { aristocrats_percentage = aristocrats }
                divide_variable = { aristocrats_percentage = pops }

                add_to_variable = { pops_employed = aristocrats_employed }

                set_variable = { aristocrats_unemployed = aristocrats_workforce }
                subtract_from_variable = { aristocrats_unemployed = aristocrats_employed }

                # Earnings/Spending
                set_variable = { aristocrats_earnings = aristocrats_employed }
                multiply_variable = { aristocrats_earnings = aristocrats_wage }
                add_to_variable = { aristocrats_earnings = aristocrats_dividends }
                if = {
                    limit = {
                        check_variable = { aristocrats_earnings > 0 }
                    }
                    set_variable = { aristocrats_investment = controller:modifier@aristocrats_investment_contribution_factor }
                    if = {
                        limit = {
                            check_variable = { aristocrats_investment < 0 }
                        }
                        set_variable = { aristocrats_investment = 0 }
                    }
                    multiply_variable = { aristocrats_investment = aristocrats_earnings }
                    subtract_from_variable = { aristocrats_earnings = aristocrats_investment }
                }
                else = {
                    set_variable = { aristocrats_earnings = 0 }
                }
                if = {
                    limit = {
                        check_variable = { aristocrats_earnings < 0 }
                    }
                    set_variable = { aristocrats_earnings = 0 }
                }
                add_to_variable = { pops_earnings = aristocrats_earnings }

				set_variable = { aristocrats_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { aristocrats_need_cost@var:r_token = aristocrats_need@var:r_token } 
			        multiply_variable = { aristocrats_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { aristocrats_needs_spending = aristocrats_need_cost@var:r_token }
                }

                set_variable = { aristocrats_col = aristocrats_needs_spending }
                divide_variable = { aristocrats_col = aristocrats_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = aristocrats_sol }
                multiply_temp_variable = { sol_temp = aristocrats_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = aristocrats_needs_spending }
                set_variable = { aristocrats_spending = aristocrats_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = aristocrats_earnings }
                divide_temp_variable = { avg_earnings_temp = aristocrats }
                set_variable = { aristocrats_income_tax_spending = aristocrats_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { aristocrats_income_tax_spending = lower_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = lower_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { aristocrats_income_tax_spending = middle_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = middle_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                else = {
                    multiply_variable = { aristocrats_income_tax_spending = upper_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = upper_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                add_to_variable = { aristocrats_spending = aristocrats_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = aristocrats_income_tax_spending }
                
                #Corporate Tax
                set_variable = { aristocrats_corporate_tax_spending = aristocrats_dividends }
                multiply_variable = { aristocrats_corporate_tax_spending = corporate_tax_multiplier }
                
                set_temp_variable = { investment_reduction_temp = 0.25 } # What % of corp tax spending go into reducing investment
                add_to_temp_variable = { investment_reduction_temp = controller:modifier@aristocrats_investment_contribution_factor }
                if = {
                    limit = {
                        check_variable = { investment_reduction_temp < 0 }
                    }
                    set_temp_variable = { investment_reduction_temp = 0 }
                }
                if = { limit = { check_variable = { investment_reduction_temp > 1 } } set_variable = { investment_reduction_temp = 1 } }
                set_variable = { aristocrats_investment_tax = aristocrats_corporate_tax_spending }
                multiply_variable = { aristocrats_investment_tax = investment_reduction_temp }
                if = { limit = { check_variable = { aristocrats_investment_tax > aristocrats_investment } } set_variable = { aristocrats_investment_tax = aristocrats_investment }  }
                subtract_from_variable = { aristocrats_corporate_tax_spending = aristocrats_investment_tax }

                add_to_variable = { aristocrats_spending = aristocrats_corporate_tax_spending }
                add_to_variable = { pops_corporate_tax_spending = aristocrats_corporate_tax_spending }

                #Spending Target
                set_variable = { aristocrats_spending_target = aristocrats_earnings }
                subtract_from_variable = { aristocrats_spending_target = aristocrats_income_tax_spending }
                multiply_variable = { aristocrats_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = aristocrats_spending_target }

                #Sales Tax
                set_variable = { aristocrats_sales_tax_spending = aristocrats_needs_spending }
                multiply_variable = { aristocrats_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { aristocrats_spending = aristocrats_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = aristocrats_sales_tax_spending }

                #Interest
                set_variable = { aristocrats_debt_interest_spending = aristocrats_debt }
                divide_variable = { aristocrats_debt_interest_spending = 12 }
                multiply_variable = { aristocrats_debt_interest_spending = controller:interest_rate }
                divide_variable = { aristocrats_debt_interest_spending = 100 }
                add_to_variable = { aristocrats_spending = aristocrats_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = aristocrats_debt_interest_spending }
            }
            else = {
                set_variable = { aristocrats_spending = 0 }
                subtract_from_variable = { aristocrats_spending_target = 0 }
                set_variable = { aristocrats_income_tax_spending = 0 }
                set_variable = { aristocrats_sales_tax_spending = 0 }
                set_variable = { aristocrats_debt_interest_spending = 0 }
            }
        #
        # Capitalists
            if = {
                limit = {
                    check_variable = { capitalists_workforce > 0 }
                }
                set_variable = { capitalists = capitalists_workforce }
                divide_variable = { capitalists = pops_workforce_percentage }
                set_variable = { capitalists_percentage = capitalists }
                divide_variable = { capitalists_percentage = pops }

                add_to_variable = { pops_employed = capitalists_employed }

                set_variable = { capitalists_unemployed = capitalists_workforce }
                subtract_from_variable = { capitalists_unemployed = capitalists_employed }

                # Earnings/Spending
                set_variable = { capitalists_earnings = capitalists_employed }
                multiply_variable = { capitalists_earnings = capitalists_wage }
                add_to_variable = { capitalists_earnings = capitalists_dividends }
                if = {
                    limit = {
                        check_variable = { capitalists_dividends > 0 }
                    }
                    set_variable = { capitalists_investment = controller:modifier@capitalists_investment_contribution_factor }
                    if = {
                        limit = {
                            check_variable = { capitalists_investment < 0 }
                        }
                        set_variable = { capitalists_investment = 0 }
                    }
                    multiply_variable = { capitalists_investment = capitalists_dividends }
                    subtract_from_variable = { capitalists_earnings = capitalists_investment }
                }
                else = {
                    set_variable = { capitalists_dividends = 0 }
                }
                if = {
                    limit = {
                        check_variable = { capitalists_earnings < 0 }
                    }
                    set_variable = { capitalists_earnings = 0 }
                }
                add_to_variable = { pops_earnings = capitalists_earnings }

				set_variable = { capitalists_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { capitalists_need_cost@var:r_token = capitalists_need@var:r_token } 
			        multiply_variable = { capitalists_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { capitalists_needs_spending = capitalists_need_cost@var:r_token }
                }

                set_variable = { capitalists_col = capitalists_needs_spending }
                divide_variable = { capitalists_col = capitalists_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = capitalists_sol }
                multiply_temp_variable = { sol_temp = capitalists_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = capitalists_needs_spending }
                set_variable = { capitalists_spending = capitalists_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = capitalists_earnings }
                divide_temp_variable = { avg_earnings_temp = capitalists }
                set_variable = { capitalists_income_tax_spending = capitalists_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { capitalists_income_tax_spending = lower_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = lower_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { capitalists_income_tax_spending = middle_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = middle_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                else = {
                    multiply_variable = { capitalists_income_tax_spending = upper_income_multiplier }

                    set_temp_variable = { ic_temp = 1 }
                    subtract_from_temp_variable = { ic_temp = upper_income_multiplier }
                    multiply_variable = { capitalists_investment = ic_temp }
                }
                
                add_to_variable = { capitalists_spending = capitalists_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = capitalists_income_tax_spending }

                #Corporate Tax
                set_variable = { capitalists_corporate_tax_spending = capitalists_dividends }
                multiply_variable = { capitalists_corporate_tax_spending = corporate_tax_multiplier }
                
                set_temp_variable = { investment_reduction_temp = 0.25 } # What % of corp tax spending go into reducing investment
                add_to_temp_variable = { investment_reduction_temp = controller:modifier@capitalists_investment_contribution_factor }
                if = {
                    limit = {
                        check_variable = { investment_reduction_temp < 0 }
                    }
                    set_temp_variable = { investment_reduction_temp = 0 }
                }
                if = { limit = { check_variable = { investment_reduction_temp > 1 } } set_variable = { investment_reduction_temp = 1 } }
                set_variable = { capitalists_investment_tax = capitalists_corporate_tax_spending }
                multiply_variable = { capitalists_investment_tax = investment_reduction_temp }
                if = { limit = { check_variable = { capitalists_investment_tax > capitalists_investment } } set_variable = { capitalists_investment_tax = capitalists_investment }  }
                subtract_from_variable = { capitalists_corporate_tax_spending = capitalists_investment_tax }

                add_to_variable = { capitalists_spending = capitalists_corporate_tax_spending }
                add_to_variable = { pops_corporate_tax_spending = capitalists_corporate_tax_spending }

                #Spending Target
                set_variable = { capitalists_spending_target = capitalists_earnings }
                subtract_from_variable = { capitalists_spending_target = capitalists_income_tax_spending }
                multiply_variable = { capitalists_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = capitalists_spending_target }

                #Sales Tax
                set_variable = { capitalists_sales_tax_spending = capitalists_needs_spending }
                multiply_variable = { capitalists_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { capitalists_spending = capitalists_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = capitalists_sales_tax_spending }

                #Interest
                set_variable = { capitalists_debt_interest_spending = capitalists_debt }
                divide_variable = { capitalists_debt_interest_spending = 12 }
                multiply_variable = { capitalists_debt_interest_spending = controller:interest_rate }
                divide_variable = { capitalists_debt_interest_spending = 100 }
                add_to_variable = { capitalists_spending = capitalists_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = capitalists_debt_interest_spending }
            }
            else = {
                set_variable = { capitalists_spending = 0 }
                subtract_from_variable = { capitalists_spending_target = 0 }
                set_variable = { capitalists_income_tax_spending = 0 }
                set_variable = { capitalists_sales_tax_spending = 0 }
                set_variable = { capitalists_debt_interest_spending = 0 }
            }
        #
        # Bureaucrats
            if = {
                limit = {
                    check_variable = { bureaucrats_workforce > 0 }
                }
                set_variable = { bureaucrats = bureaucrats_workforce }
                divide_variable = { bureaucrats = pops_workforce_percentage }
                set_variable = { bureaucrats_percentage = bureaucrats }
                divide_variable = { bureaucrats_percentage = pops }

                add_to_variable = { pops_employed = bureaucrats_employed }

                set_variable = { bureaucrats_unemployed = bureaucrats_workforce }
                subtract_from_variable = { bureaucrats_unemployed = bureaucrats_employed }

                # Earnings/Spending
                set_variable = { bureaucrats_earnings = bureaucrats_employed }
                multiply_variable = { bureaucrats_earnings = professionals_wage }
                add_to_variable = { pops_earnings = bureaucrats_earnings }

				set_variable = { bureaucrats_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { bureaucrats_need_cost@var:r_token = bureaucrats_need@var:r_token } 
			        multiply_variable = { bureaucrats_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { bureaucrats_needs_spending = bureaucrats_need_cost@var:r_token }
                }

                set_variable = { bureaucrats_col = bureaucrats_needs_spending }
                divide_variable = { bureaucrats_col = bureaucrats_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = bureaucrats_sol }
                multiply_temp_variable = { sol_temp = bureaucrats_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = bureaucrats_needs_spending }
                set_variable = { bureaucrats_spending = bureaucrats_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = bureaucrats_earnings }
                divide_temp_variable = { avg_earnings_temp = bureaucrats }
                set_variable = { bureaucrats_income_tax_spending = bureaucrats_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { bureaucrats_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { bureaucrats_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { bureaucrats_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { bureaucrats_spending = bureaucrats_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = bureaucrats_income_tax_spending }

                #Spending Target
                set_variable = { bureaucrats_spending_target = bureaucrats_earnings }
                subtract_from_variable = { bureaucrats_spending_target = bureaucrats_income_tax_spending }
                multiply_variable = { bureaucrats_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = bureaucrats_spending_target }

                #Sales Tax
                set_variable = { bureaucrats_sales_tax_spending = bureaucrats_needs_spending }
                multiply_variable = { bureaucrats_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { bureaucrats_spending = bureaucrats_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = bureaucrats_sales_tax_spending }

                #Interest
                set_variable = { bureaucrats_debt_interest_spending = bureaucrats_debt }
                divide_variable = { bureaucrats_debt_interest_spending = 12 }
                multiply_variable = { bureaucrats_debt_interest_spending = controller:interest_rate }
                divide_variable = { bureaucrats_debt_interest_spending = 100 }
                add_to_variable = { bureaucrats_spending = bureaucrats_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = bureaucrats_debt_interest_spending }
            }
            else = {
                set_variable = { bureaucrats_spending = 0 }
                subtract_from_variable = { bureaucrats_spending_target = 0 }
                set_variable = { bureaucrats_income_tax_spending = 0 }
                set_variable = { bureaucrats_sales_tax_spending = 0 }
                set_variable = { bureaucrats_debt_interest_spending = 0 }
            }
        #
        # Soldiers
            if = {
                limit = {
                    check_variable = { soldiers_workforce > 0 }
                }
                set_variable = { soldiers = soldiers_workforce }
                divide_variable = { soldiers = pops_workforce_percentage }
                set_variable = { soldiers_percentage = soldiers }
                divide_variable = { soldiers_percentage = pops }

                add_to_variable = { pops_employed = soldiers_employed }

                set_variable = { soldiers_unemployed = soldiers_workforce }
                subtract_from_variable = { soldiers_unemployed = soldiers_employed }

                # Earnings/Spending
                set_variable = { soldiers_earnings = soldiers_employed }
                multiply_variable = { soldiers_earnings = workers_wage }
                add_to_variable = { pops_earnings = soldiers_earnings }

				set_variable = { soldiers_needs_spending = 0 }
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { soldiers_need_cost@var:r_token = soldiers_need@var:r_token } 
			        multiply_variable = { soldiers_need_cost@var:r_token = controller:price@var:r_token }
                    add_to_variable = { soldiers_needs_spending = soldiers_need_cost@var:r_token }
                }

                set_variable = { soldiers_col = soldiers_needs_spending }
                divide_variable = { soldiers_col = soldiers_workforce }
                
                #Standard of Living
                set_temp_variable = { sol_temp = soldiers_sol }
                multiply_temp_variable = { sol_temp = soldiers_workforce }
                add_to_variable = { pops_sol = sol_temp }

                add_to_variable = { pops_needs_spending = soldiers_needs_spending }
                set_variable = { soldiers_spending = soldiers_needs_spending }

                #Income Tax
                set_temp_variable = { avg_earnings_temp = soldiers_earnings }
                divide_temp_variable = { avg_earnings_temp = soldiers }
                set_variable = { soldiers_income_tax_spending = soldiers_earnings }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    multiply_variable = { soldiers_income_tax_spending = lower_income_multiplier }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    multiply_variable = { soldiers_income_tax_spending = middle_income_multiplier }
                }
                else = {
                    multiply_variable = { soldiers_income_tax_spending = upper_income_multiplier }
                }
                add_to_variable = { soldiers_spending = soldiers_income_tax_spending }
                add_to_variable = { pops_income_tax_spending = soldiers_income_tax_spending }

                #Spending Target
                set_variable = { soldiers_spending_target = soldiers_earnings }
                subtract_from_variable = { soldiers_spending_target = soldiers_income_tax_spending }
                multiply_variable = { soldiers_spending_target = cons_conf_temp }
                add_to_variable = { pops_spending_target = soldiers_spending_target }

                #Sales Tax
                set_variable = { soldiers_sales_tax_spending = soldiers_needs_spending }
                multiply_variable = { soldiers_sales_tax_spending = sales_tax_multiplier }
                add_to_variable = { soldiers_spending = soldiers_sales_tax_spending }
                add_to_variable = { pops_sales_tax_spending = soldiers_sales_tax_spending }

                #Interest
                set_variable = { soldiers_debt_interest_spending = soldiers_debt }
                divide_variable = { soldiers_debt_interest_spending = 12 }
                multiply_variable = { soldiers_debt_interest_spending = controller:interest_rate }
                divide_variable = { soldiers_debt_interest_spending = 100 }
                add_to_variable = { soldiers_spending = soldiers_debt_interest_spending }
                add_to_variable = { pops_debt_interest_spending = soldiers_debt_interest_spending }
            }
            else = {
                set_variable = { soldiers_spending = 0 }
                subtract_from_variable = { soldiers_spending_target = 0 }
                set_variable = { soldiers_income_tax_spending = 0 }
                set_variable = { soldiers_sales_tax_spending = 0 }
                set_variable = { soldiers_debt_interest_spending = 0 }
            }
        #

        clamp_variable = { var = pops_employed min = 0 max = pops_workforce }

        set_variable = { pops_employed_percentage = pops_employed }
        divide_variable = { pops_employed_percentage = pops_workforce }

        set_variable = { pops_unemployed = pops_workforce }
        subtract_from_variable = { pops_unemployed = pops_employed }

        set_variable = { pops_unemployed_percentage = pops_unemployed }
        divide_variable = { pops_unemployed_percentage = pops_workforce }

        set_variable = { available_workforce = pops_unemployed }
        add_to_variable = { available_workforce = employed@token:building_subsistence_farm }
        add_to_variable = { available_workforce = employed@token:building_rice_paddy }
        
        set_variable = { excess_workforce = pops_workforce }
        subtract_from_variable = { excess_workforce = non_subs_jobs_buildings }

        set_variable = { pops_spending = pops_needs_spending }
        add_to_variable = { pops_spending = pops_income_tax_spending }
        add_to_variable = { pops_spending = pops_sales_tax_spending }
        add_to_variable = { pops_spending = pops_corporate_tax_spending }
        add_to_variable = { pops_spending = pops_debt_interest_spending }

        divide_variable = { pops_sol = pops_workforce }
    }

    pops_workforce_update = {
        set_variable = { slaves_employed = 0 }
        set_variable = { peasants_employed = peasants_workforce }
        set_variable = { laborers_employed = 0 }
        set_variable = { workers_employed = 0 }
        set_variable = { professionals_employed = 0 }
        set_variable = { specialists_employed = 0 }
        set_variable = { aristocrats_employed = 0 }
        set_variable = { capitalists_employed = 0 }
        set_variable = { bureaucrats_employed = 0 }
        set_variable = { soldiers_employed = 0 }

        set_variable = { slaves_jobs = 0 }
        set_variable = { peasants_jobs = peasants_workforce }
        set_variable = { laborers_jobs = 0 }
        set_variable = { workers_jobs = 0 }
        set_variable = { professionals_jobs = 0 }
        set_variable = { specialists_jobs = 0 }
        set_variable = { bureaucrats_jobs = 0 }
        set_variable = { soldiers_jobs = 0 }

        set_variable = { slaves_jobs_available = 0 }
        set_variable = { peasants_jobs_available = 0 }
        set_variable = { laborers_jobs_available = 0 }
        set_variable = { workers_jobs_available = 0 }
        set_variable = { professionals_jobs_available = 0 }
        set_variable = { specialists_jobs_available = 0 }
        set_variable = { bureaucrats_jobs_available = 0 }
        set_variable = { soldiers_jobs_available = 0 }

        set_variable = { capitalists_jobs = 0 }
        set_variable = { aristocrats_jobs = 0 }
        set_variable = { capitalists_dividends = 0 }
        set_variable = { aristocrats_dividends = 0 }

        #Industries
        for_each_loop = {
            array = industries
            value = pops_bld_token

            add_to_variable = { laborers_employed = laborers_employed@var:pops_bld_token }
            add_to_variable = { workers_employed = workers_employed@var:pops_bld_token }
            add_to_variable = { professionals_employed = professionals_employed@var:pops_bld_token }
            add_to_variable = { specialists_employed = specialists_employed@var:pops_bld_token }

            add_to_variable = { laborers_jobs = laborers_jobs@var:pops_bld_token }
            add_to_variable = { workers_jobs = workers_jobs@var:pops_bld_token }
            add_to_variable = { professionals_jobs = professionals_jobs@var:pops_bld_token }
            add_to_variable = { specialists_jobs = specialists_jobs@var:pops_bld_token }

            if = {
                limit = {
                    check_variable = { jobs@var:pops_bld_token > 10000 }
                }
                set_temp_variable = { jobs_available_temp = peasants_jobs@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                add_to_variable = { peasants_jobs_available = jobs_available_temp }

                set_temp_variable = { jobs_available_temp = laborers_jobs@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                add_to_variable = { laborers_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = workers_jobs@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                add_to_variable = { workers_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = professionals_jobs@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                add_to_variable = { professionals_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = specialists_jobs@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                add_to_variable = { specialists_jobs_available = jobs_available_temp }
            }
            else = {
                set_temp_variable = { jobs_available_temp = peasants_jobs@var:pops_bld_token }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                add_to_variable = { peasants_jobs_available = jobs_available_temp }

                set_temp_variable = { jobs_available_temp = laborers_jobs@var:pops_bld_token }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                add_to_variable = { laborers_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = workers_jobs@var:pops_bld_token }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                add_to_variable = { workers_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = professionals_jobs@var:pops_bld_token }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                add_to_variable = { professionals_jobs_available = jobs_available_temp }
                
                set_temp_variable = { jobs_available_temp = specialists_jobs@var:pops_bld_token }
                multiply_temp_variable = { jobs_available_temp = employment_target@var:pops_bld_token }
                divide_temp_variable = { jobs_available_temp = 100 }
                add_to_variable = { specialists_jobs_available = jobs_available_temp }
            }
            
            set_temp_variable = { jobs_temp = owner_jobs@var:pops_bld_token }
            multiply_temp_variable = { jobs_temp = employment_target@var:pops_bld_token }
            divide_temp_variable = { jobs_temp = 100 }
            if = {
                limit = {
                    is_in_array = { buildings = pops_bld_token }
                }
                add_to_variable = { capitalists_jobs = jobs_temp }
                add_to_variable = { capitalists_dividends = dividends@var:pops_bld_token }
            }
            else_if = {
                limit = {
                    check_variable = { pops_bld_token = token:railway }
                }
                add_to_variable = { capitalists_jobs = jobs_temp }
                add_to_variable = { capitalists_dividends = dividends@var:pops_bld_token }
            }
            else = {
                add_to_variable = { aristocrats_jobs = jobs_temp }
                add_to_variable = { aristocrats_dividends = dividends@var:pops_bld_token }
            }
        }

        set_variable = { capitalists_employed = capitalists_jobs }
        set_variable = { aristocrats_employed = aristocrats_jobs }
        clamp_variable = { var = capitalists_employed max = capitalists_workforce }
        clamp_variable = { var = aristocrats_employed max = aristocrats_workforce }

        if = {
            limit = {
                check_variable = { peasants_workforce > peasants_jobs_available }
            }
            set_variable = { peasants_job_fulfillment = 100 }
        }
        else_if = {
            limit = {
                check_variable = { peasants_jobs_available > 10000 }
            }
            set_temp_variable = { peasant_j_temp = peasants_jobs_available }
            divide_temp_variable = { peasant_j_temp = 100 }

            set_variable = { peasants_job_fulfillment = peasants_workforce }
            divide_variable = { peasants_job_fulfillment = peasant_j_temp }
        }
        else_if = {
            limit = {
                check_variable = { peasants_jobs_available > 0 }
            }
            set_variable = { peasants_job_fulfillment = peasants_workforce }
            multiply_variable = { peasants_job_fulfillment = 100 }
            divide_variable = { peasants_job_fulfillment = peasants_jobs_available }
        }
        else = {
            set_variable = { peasants_job_fulfillment = 0 }
        }

        if = {
            limit = {
                check_variable = { laborers_workforce > laborers_jobs_available }
            }
            set_variable = { laborers_job_fulfillment = 100 }
        }
        else_if = {
            limit = {
                check_variable = { laborers_jobs_available > 10000 }
            }
            set_temp_variable = { peasant_j_temp = laborers_jobs_available }
            divide_temp_variable = { peasant_j_temp = 100 }

            set_variable = { laborers_job_fulfillment = laborers_workforce }
            divide_variable = { laborers_job_fulfillment = peasant_j_temp }
        }
        else_if = {
            limit = {
                check_variable = { laborers_jobs_available > 0 }
            }
            set_variable = { laborers_job_fulfillment = laborers_workforce }
            multiply_variable = { laborers_job_fulfillment = 100 }
            divide_variable = { laborers_job_fulfillment = laborers_jobs_available }
        }
        else = {
            set_variable = { laborers_job_fulfillment = 0 }
        }

        if = {
            limit = {
                check_variable = { workers_workforce > workers_jobs_available }
            }
            set_variable = { workers_job_fulfillment = 100 }
        }
        else_if = {
            limit = {
                check_variable = { workers_jobs_available > 10000 }
            }
            set_temp_variable = { peasant_j_temp = workers_jobs_available }
            divide_temp_variable = { peasant_j_temp = 100 }

            set_variable = { workers_job_fulfillment = workers_workforce }
            divide_variable = { workers_job_fulfillment = peasant_j_temp }
        }
        else_if = {
            limit = {
                check_variable = { workers_jobs_available > 0 }
            }
            set_variable = { workers_job_fulfillment = workers_workforce }
            multiply_variable = { workers_job_fulfillment = 100 }
            divide_variable = { workers_job_fulfillment = workers_jobs_available }
        }
        else = {
            set_variable = { workers_job_fulfillment = 0 }
        }

        if = {
            limit = {
                check_variable = { professionals_workforce > professionals_jobs_available }
            }
            set_variable = { professionals_job_fulfillment = 100 }
        }
        else_if = {
            limit = {
                check_variable = { professionals_jobs_available > 10000 }
            }
            set_temp_variable = { peasant_j_temp = professionals_jobs_available }
            divide_temp_variable = { peasant_j_temp = 100 }

            set_variable = { professionals_job_fulfillment = professionals_workforce }
            divide_variable = { professionals_job_fulfillment = peasant_j_temp }
        }
        else_if = {
            limit = {
                check_variable = { professionals_jobs_available > 0 }
            }
            set_variable = { professionals_job_fulfillment = professionals_workforce }
            multiply_variable = { professionals_job_fulfillment = 100 }
            divide_variable = { professionals_job_fulfillment = professionals_jobs_available }
        }
        else = {
            set_variable = { professionals_job_fulfillment = 0 }
        }

        if = {
            limit = {
                check_variable = { specialists_workforce > specialists_jobs_available }
            }
            set_variable = { specialists_job_fulfillment = 100 }
        }
        else_if = {
            limit = {
                check_variable = { specialists_jobs_available > 10000 }
            }
            set_temp_variable = { peasant_j_temp = specialists_jobs_available }
            divide_temp_variable = { peasant_j_temp = 100 }

            set_variable = { specialists_job_fulfillment = specialists_workforce }
            divide_variable = { specialists_job_fulfillment = peasant_j_temp }
        }
        else_if = {
            limit = {
                check_variable = { specialists_jobs_available > 0 }
            }
            set_variable = { specialists_job_fulfillment = specialists_workforce }
            multiply_variable = { specialists_job_fulfillment = 100 }
            divide_variable = { specialists_job_fulfillment = specialists_jobs_available }
        }
        else = {
            set_variable = { specialists_job_fulfillment = 0 }
        }

        set_variable = { peasants_workforce_balance = peasants_workforce }
        subtract_from_variable = { peasants_workforce_balance = peasants_jobs_available }
        set_variable = { laborers_workforce_balance = laborers_workforce }
        subtract_from_variable = { laborers_workforce_balance = laborers_jobs_available }
        set_variable = { workers_workforce_balance = workers_workforce }
        subtract_from_variable = { workers_workforce_balance = workers_jobs_available }
        set_variable = { professionals_workforce_balance = professionals_workforce }
        subtract_from_variable = { professionals_workforce_balance = professionals_jobs_available }
        set_variable = { specialists_workforce_balance = specialists_workforce }
        subtract_from_variable = { specialists_workforce_balance = specialists_jobs_available }
        
        set_variable = { jobs_available = peasants_jobs_available }
        add_to_variable = { jobs_available = laborers_jobs_available }
        add_to_variable = { jobs_available = workers_jobs_available }
        add_to_variable = { jobs_available = professionals_jobs_available }
        add_to_variable = { jobs_available = specialists_jobs_available }
        add_to_variable = { jobs_available = capitalists_jobs }
        add_to_variable = { jobs_available = aristocrats_jobs }
    }

    calculate_pop_needs = {
        # Calculates Pops Needs
        # NOTE: This does need magnitude_temp
        set_temp_variable = { magnitude_temp = 1 }

        for_each_loop = {
            array = global.pop_needs_resources
            value = r_token
            set_variable = { pops_need@var:r_token = 0 } 
        }

		#Slaves
			if = {
				limit = {
					check_variable = { slaves_workforce > 0 }
				}

				set_temp_variable = { sol_temp = slaves_sol }
				set_temp_variable = { pop_temp = slaves }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { slaves_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = slaves_need@var:r_token
                }
			}
		#
		#Peasants
			if = {
				limit = {
					check_variable = { peasants_workforce > 0 }
				}

				set_temp_variable = { sol_temp = peasants_sol }
				set_temp_variable = { pop_temp = peasants }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { peasants_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = peasants_need@var:r_token
                }
			}
		#
		#Laborers
			if = {
				limit = {
					check_variable = { laborers_workforce > 0 }
				}

				set_temp_variable = { sol_temp = laborers_sol }
				set_temp_variable = { pop_temp = laborers }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { laborers_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = laborers_need@var:r_token
                }
			}
		#
		#Workers
			if = {
				limit = {
					check_variable = { workers_workforce > 0 }
				}

				set_temp_variable = { sol_temp = workers_sol }
				set_temp_variable = { pop_temp = workers }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { workers_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = workers_need@var:r_token
                }
			}
		#
		#Professionals
			if = {
				limit = {
					check_variable = { professionals_workforce > 0 }
				}

				set_temp_variable = { sol_temp = professionals_sol }
				set_temp_variable = { pop_temp = professionals }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { professionals_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = professionals_need@var:r_token
                }
			}
		#
		#Specialists
			if = {
				limit = {
					check_variable = { specialists_workforce > 0 }
				}

				set_temp_variable = { sol_temp = specialists_sol }
				set_temp_variable = { pop_temp = specialists }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { specialists_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = specialists_need@var:r_token
                }
			}
		#
		#Capitalists
			if = {
				limit = {
					check_variable = { capitalists_workforce > 0 }
				}

				set_temp_variable = { sol_temp = capitalists_sol }
				set_temp_variable = { pop_temp = capitalists }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { capitalists_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = capitalists_need@var:r_token
                }
			}
		#
		#Aristocrats
			if = {
				limit = {
					check_variable = { aristocrats_workforce > 0 }
				}

				set_temp_variable = { sol_temp = aristocrats_sol }
				set_temp_variable = { pop_temp = aristocrats }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { aristocrats_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = aristocrats_need@var:r_token
                }
			}
		#
		#Bureaucrats
			if = {
				limit = {
					check_variable = { bureaucrats_workforce > 0 }
				}

				set_temp_variable = { sol_temp = bureaucrats_sol }
				set_temp_variable = { pop_temp = bureaucrats }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { bureaucrats_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = bureaucrats_need@var:r_token
                }
			}
		#
		#Soldiers
			if = {
				limit = {
					check_variable = { soldiers_workforce > 0 }
				}

				set_temp_variable = { sol_temp = soldiers_sol }
				set_temp_variable = { pop_temp = soldiers }
				get_pop_needs = yes

                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    set_variable = { soldiers_need@var:r_token = need_variable@var:r_token } 
				    add_to_variable = { pops_need@var:r_token = need_variable@var:r_token } 
                }
			}
			else = {
                for_each_loop = {
                    array = global.pop_needs_resources
                    value = r_token
				    clear_variable = soldiers_need@var:r_token
                }
			}
		#
    }
    get_pop_needs = {
		#Input:
		#	sol_temp
        #   pop_temp
		#	magnitude_temp
		#	state_electrification - is a variable statewide

		#Note: All these values should be taken as 1 resource every 1K WORKFORCE pops
        #Output:
        # need_variable@token:[good]

        for_each_loop = {
            array = global.pop_needs_resources
            value = pop_r_token
            set_variable = { need_variable@var:pop_r_token = 0 }
        }

        for_each_loop = {
            array = global.pop_needs_resources
            value = pop_r_token
            if = {
                limit = {
                    NOT = { check_variable = { global.pops_spending_tech@var:pop_r_token = 0 } }
                    set_temp_variable = { tech_temp = global.pops_spending_tech@var:pop_r_token }
                    owner = { NOT = { has_tech = var:tech_temp } }
                }
                set_temp_variable = { replace_token = global.pops_spending_replacement@var:pop_r_token }

                set_temp_variable = { replace_amount = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
                multiply_temp_variable = { replace_amount = global.base_price@var:pop_r_token }
                divide_temp_variable = { replace_amount = global.base_price@var:replace_token }
                #log = "Replacing [?global.pops_spending_need_at_sol@var:pop_r_token^sol_temp] [?pop_r_token.GetTokenLocalizedKey] with [?replace_amount] [?replace_token.GetTokenLocalizedKey]"
                add_to_variable = { need_variable@var:replace_token = replace_amount }
            }
            else_if = {
                limit = {
                    check_variable = { global.pops_spending_electrification@var:pop_r_token = 1 }
                    check_variable = { state_electrification < 100 }
                }
                set_temp_variable = { replace_token = global.pops_spending_replacement@var:pop_r_token }

                set_temp_variable = { removal_amount = 100 }
                subtract_from_temp_variable = { removal_amount = state_electrification }
                multiply_temp_variable = { removal_amount = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
                divide_temp_variable = { removal_amount = 100 }

                set_temp_variable = { replace_amount = removal_amount }
                multiply_temp_variable = { replace_amount = global.base_price@var:pop_r_token }
                divide_temp_variable = { replace_amount = global.base_price@var:replace_token }

                #log = "Replacing [?removal_amount] [?pop_r_token.GetTokenLocalizedKey] with [?replace_amount] [?replace_token.GetTokenLocalizedKey] (Electrification: [?state_electrification|1]%)"
                add_to_variable = { need_variable@var:pop_r_token = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
                subtract_from_variable = { need_variable@var:pop_r_token = removal_amount }
                add_to_variable = { need_variable@var:replace_token = replace_amount }
            }
            else_if = {
                limit = {
                    check_variable = { global.pops_spending_electrification_reverse@var:pop_r_token = 1 }
                    check_variable = { state_electrification > 0 }
                }
                set_temp_variable = { replace_token = global.pops_spending_replacement@var:pop_r_token }

                set_temp_variable = { removal_amount = state_electrification }
                multiply_temp_variable = { removal_amount = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
                divide_temp_variable = { removal_amount = 100 }

                set_temp_variable = { replace_amount = removal_amount }
                multiply_temp_variable = { replace_amount = global.base_price@var:pop_r_token }
                divide_temp_variable = { replace_amount = global.base_price@var:replace_token }

                #log = "Replacing [?removal_amount] [?pop_r_token.GetTokenLocalizedKey] with [?replace_amount] [?replace_token.GetTokenLocalizedKey] (Electrification: [?state_electrification|1]%)"
                add_to_variable = { need_variable@var:pop_r_token = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
                subtract_from_variable = { need_variable@var:pop_r_token = removal_amount }
                add_to_variable = { need_variable@var:replace_token = replace_amount }
            }
            else = {
                add_to_variable = { need_variable@var:pop_r_token = global.pops_spending_need_at_sol@var:pop_r_token^sol_temp }
            }
        }
        
        divide_temp_variable = { pop_temp = magnitude_temp }
        for_each_loop = {
            array = global.pop_needs_resources
            value = pop_r_token
            
            multiply_variable = { need_variable@var:pop_r_token = pop_temp }
            #log = "[?pop_r_token.GetTokenLocalizedKey]: [?need_variable@var:pop_r_token]"
        }
    }

	pops_balance = {
		# Balance pops according to jobs available
		# Uses pops_convert to do most of the heavy lifting
		# Sets workforce amount depending on ratio of unemployed to non-subsistence jobs		
		# Peasants & Subsistence Farms have to be handled seperately

		set_temp_variable = { laborers_change = laborers_workforce_balance }
		multiply_temp_variable = { laborers_change = -1 }
		
		set_temp_variable = { workers_change = workers_workforce_balance }
		multiply_temp_variable = { workers_change = -1 }

		set_temp_variable = { professionals_change = professionals_workforce_balance }
		multiply_temp_variable = { professionals_change = -1 }
        
		set_temp_variable = { specialists_change = specialists_workforce_balance }
		multiply_temp_variable = { specialists_change = -1 }

		set_temp_variable = { aristocrats_change = aristocrats_jobs }
		subtract_from_temp_variable = { aristocrats_change = aristocrats_workforce }
        
		set_temp_variable = { capitalists_change = capitalists_jobs }
		subtract_from_temp_variable = { capitalists_change = capitalists_workforce }

		pops_convert = yes
	}
	pops_convert = {
		# Changes pops from from one pop type to another. Defaults to workforce amounts. Accounts for qualifications.
		# Inputs:
		# slaves_change - Net Change. Positive is adding, Negative is removing
		# peasants_change
		# laborers_change
		# workers_change
		# professionals_change
		# specialists_change
		# aristocrats_change
		# capitalists_change
		# bureaucrats_change
		# soldiers_change
		#
		# Outputs:
		# percent_done - What % got converted

		## Making sure negatives don't go beyond actual amount ##
			if = {	
				limit = {
					check_variable = { slaves_change < 0 }
					set_temp_variable = { slaves_temp = slaves_change }
					multiply_temp_variable = { slaves_temp = -1 }
					check_variable = { slaves_temp > slaves_workforce }
				}
				set_temp_variable = { slaves_change = slaves_workforce }
				multiply_temp_variable = { slaves_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { peasants_change < 0 }
					set_temp_variable = { peasants_temp = peasants_change }
					multiply_temp_variable = { peasants_temp = -1 }
					check_variable = { peasants_temp > peasants_workforce }
				}
				set_temp_variable = { peasants_change = peasants_workforce }
				multiply_temp_variable = { peasants_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { laborers_change < 0 }
					set_temp_variable = { laborers_temp = laborers_change }
					multiply_temp_variable = { laborers_temp = -1 }
					check_variable = { laborers_temp > laborers_workforce }
				}
				set_temp_variable = { laborers_change = laborers_workforce }
				multiply_temp_variable = { laborers_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { workers_change < 0 }
					set_temp_variable = { workers_temp = workers_change }
					multiply_temp_variable = { workers_temp = -1 }
					check_variable = { workers_temp > workers_workforce }
				}
				set_temp_variable = { workers_change = workers_workforce }
				multiply_temp_variable = { workers_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { professionals_change < 0 }
					set_temp_variable = { professionals_temp = professionals_change }
					multiply_temp_variable = { professionals_temp = -1 }
					check_variable = { professionals_temp > professionals_workforce }
				}
				set_temp_variable = { professionals_change = professionals_workforce }
				multiply_temp_variable = { professionals_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { specialists_change < 0 }
					set_temp_variable = { specialists_temp = specialists_change }
					multiply_temp_variable = { specialists_temp = -1 }
					check_variable = { specialists_temp > specialists_workforce }
				}
				set_temp_variable = { specialists_change = specialists_workforce }
				multiply_temp_variable = { specialists_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { aristocrats_change < 0 }
					set_temp_variable = { aristocrats_temp = aristocrats_change }
					multiply_temp_variable = { aristocrats_temp = -1 }
					check_variable = { aristocrats_temp > aristocrats_workforce }
				}
				set_temp_variable = { aristocrats_change = aristocrats_workforce }
				multiply_temp_variable = { aristocrats_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { capitalists_change < 0 }
					set_temp_variable = { capitalists_temp = capitalists_change }
					multiply_temp_variable = { capitalists_temp = -1 }
					check_variable = { capitalists_temp > capitalists_workforce }
				}
				set_temp_variable = { capitalists_change = capitalists_workforce }
				multiply_temp_variable = { capitalists_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { bureaucrats_change < 0 }
					set_temp_variable = { bureaucrats_temp = bureaucrats_change }
					multiply_temp_variable = { bureaucrats_temp = -1 }
					check_variable = { bureaucrats_temp > bureaucrats_workforce }
				}
				set_temp_variable = { bureaucrats_change = bureaucrats_workforce }
				multiply_temp_variable = { bureaucrats_change = -1 }
			}
			if = {	
				limit = {
					check_variable = { soldiers_change < 0 }
					set_temp_variable = { soldiers_temp = soldiers_change }
					multiply_temp_variable = { soldiers_temp = -1 }
					check_variable = { soldiers_temp > soldiers_workforce }
				}
				set_temp_variable = { soldiers_change = soldiers_workforce }
				multiply_temp_variable = { soldiers_change = -1 }
			}
		#

		## Add up positive & negative change totals and see if they match ##
			set_temp_variable = { percent_done = 1 }
			set_temp_variable = { positive_change_total = 0 }
			set_temp_variable = { negative_change_total = 0 }

			if = { limit = { check_variable = { slaves_change > 0 } } add_to_temp_variable = { positive_change_total = slaves_change } }
			else = { subtract_from_temp_variable = { negative_change_total = slaves_change } }

			if = { limit = { check_variable = { peasants_change > 0 } } add_to_temp_variable = { positive_change_total = peasants_change } }
			else = { subtract_from_temp_variable = { negative_change_total = peasants_change } }

			if = { limit = { check_variable = { laborers_change > 0 } } add_to_temp_variable = { positive_change_total = laborers_change } }
			else = { subtract_from_temp_variable = { negative_change_total = laborers_change } }

			if = { limit = { check_variable = { workers_change > 0 } } add_to_temp_variable = { positive_change_total = workers_change } }
			else = { subtract_from_temp_variable = { negative_change_total = workers_change } }

			if = { limit = { check_variable = { professionals_change > 0 } } add_to_temp_variable = { positive_change_total = professionals_change } }
			else = { subtract_from_temp_variable = { negative_change_total = professionals_change } }

			if = { limit = { check_variable = { specialists_change > 0 } } add_to_temp_variable = { positive_change_total = specialists_change } }
			else = { subtract_from_temp_variable = { negative_change_total = specialists_change } }
            
			if = { limit = { check_variable = { aristocrats_change > 0 } } add_to_temp_variable = { positive_change_total = aristocrats_change } }
			else = { subtract_from_temp_variable = { negative_change_total = aristocrats_change } }
            
			if = { limit = { check_variable = { capitalists_change > 0 } } add_to_temp_variable = { positive_change_total = capitalists_change } }
			else = { subtract_from_temp_variable = { negative_change_total = capitalists_change } }

			if = { limit = { check_variable = { bureaucrats_change > 0 } } add_to_temp_variable = { positive_change_total = bureaucrats_change } }
			else = { subtract_from_temp_variable = { negative_change_total = bureaucrats_change } }

			if = { limit = { check_variable = { soldiers_change > 0 } } add_to_temp_variable = { positive_change_total = soldiers_change } }
			else = { subtract_from_temp_variable = { negative_change_total = soldiers_change } }

			if = {
				limit = {
					check_variable = { positive_change_total > negative_change_total }
				}
				set_temp_variable = { first_percent_done = negative_change_total }
				multiply_temp_variable = { first_percent_done = 10 }
				divide_temp_variable = { first_percent_done = positive_change_total }

				multiply_temp_variable = { percent_done = first_percent_done }
				divide_temp_variable = { percent_done = 10 }

				if = { limit = { check_variable = { slaves_change > 0 } } 
					multiply_temp_variable = { slaves_change = first_percent_done } 
					round_temp_variable = slaves_change
					divide_temp_variable = { slaves_change = 10 }
				}
				if = { limit = { check_variable = { peasants_change > 0 } } 
					multiply_temp_variable = { peasants_change = first_percent_done } 
					round_temp_variable = peasants_change
					divide_temp_variable = { peasants_change = 10 }
				}
				if = { limit = { check_variable = { laborers_change > 0 } } 
					multiply_temp_variable = { laborers_change = first_percent_done } 
					round_temp_variable = laborers_change
					divide_temp_variable = { laborers_change = 10 }
				}
				if = { limit = { check_variable = { workers_change > 0 } } 
					multiply_temp_variable = { workers_change = first_percent_done } 
					round_temp_variable = workers_change
					divide_temp_variable = { workers_change = 10 }
				}
				if = { limit = { check_variable = { professionals_change > 0 } } 
					multiply_temp_variable = { professionals_change = first_percent_done } 
					round_temp_variable = professionals_change
					divide_temp_variable = { professionals_change = 10 }
				}
				if = { limit = { check_variable = { specialists_change > 0 } } 
					multiply_temp_variable = { specialists_change = first_percent_done } 
					round_temp_variable = specialists_change
					divide_temp_variable = { specialists_change = 10 }
				}
				if = { limit = { check_variable = { aristocrats_change > 0 } } 
					multiply_temp_variable = { aristocrats_change = first_percent_done } 
					round_temp_variable = aristocrats_change
					divide_temp_variable = { aristocrats_change = 10 }
				}
				if = { limit = { check_variable = { capitalists_change > 0 } } 
					multiply_temp_variable = { capitalists_change = first_percent_done } 
					round_temp_variable = capitalists_change
					divide_temp_variable = { capitalists_change = 10 }
				}
				if = { limit = { check_variable = { bureaucrats_change > 0 } } 
					multiply_temp_variable = { bureaucrats_change = first_percent_done } 
					round_temp_variable = bureaucrats_change
					divide_temp_variable = { bureaucrats_change = 10 }
				}
				if = { limit = { check_variable = { soldiers_change > 0 } } 
					multiply_temp_variable = { soldiers_change = first_percent_done } 
					round_temp_variable = soldiers_change
					divide_temp_variable = { soldiers_change = 10 }

				# Redo totals
				set_temp_variable = { positive_change_total = 0 }
				set_temp_variable = { negative_change_total = 0 }
				if = { limit = { check_variable = { slaves_change > 0 } } add_to_temp_variable = { positive_change_total = slaves_change } }
				else = { subtract_from_temp_variable = { negative_change_total = slaves_change } }
				if = { limit = { check_variable = { peasants_change > 0 } } add_to_temp_variable = { positive_change_total = peasants_change } }
				else = { subtract_from_temp_variable = { negative_change_total = peasants_change } }
				if = { limit = { check_variable = { laborers_change > 0 } } add_to_temp_variable = { positive_change_total = laborers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = laborers_change } }
				if = { limit = { check_variable = { workers_change > 0 } } add_to_temp_variable = { positive_change_total = workers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = workers_change } }
				if = { limit = { check_variable = { professionals_change > 0 } } add_to_temp_variable = { positive_change_total = professionals_change } }
				else = { subtract_from_temp_variable = { negative_change_total = professionals_change } }
				if = { limit = { check_variable = { specialists_change > 0 } } add_to_temp_variable = { positive_change_total = specialists_change } }
				else = { subtract_from_temp_variable = { negative_change_total = specialists_change } }
				if = { limit = { check_variable = { aristocrats_change > 0 } } add_to_temp_variable = { positive_change_total = aristocrats_change } }
				else = { subtract_from_temp_variable = { negative_change_total = aristocrats_change } }
				if = { limit = { check_variable = { capitalists_change > 0 } } add_to_temp_variable = { positive_change_total = capitalists_change } }
				else = { subtract_from_temp_variable = { negative_change_total = capitalists_change } }
				if = { limit = { check_variable = { bureaucrats_change > 0 } } add_to_temp_variable = { positive_change_total = bureaucrats_change } }
				else = { subtract_from_temp_variable = { negative_change_total = bureaucrats_change } }
				if = { limit = { check_variable = { soldiers_change > 0 } } add_to_temp_variable = { positive_change_total = soldiers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = soldiers_change } }
				}
			}
			else_if = {
				limit = {
					check_variable = { positive_change_total < negative_change_total }
				}
				set_temp_variable = { first_percent_done = positive_change_total }
				multiply_temp_variable = { first_percent_done = 10 }
				divide_temp_variable = { first_percent_done = negative_change_total }

				multiply_temp_variable = { percent_done = first_percent_done }
				divide_temp_variable = { percent_done = 10 }

				if = { limit = { check_variable = { slaves_change < 0 } } 
					multiply_temp_variable = { slaves_change = first_percent_done } 
					round_temp_variable = slaves_change
					divide_temp_variable = { slaves_change = 10 }
				}
				if = { limit = { check_variable = { peasants_change < 0 } } 
					multiply_temp_variable = { peasants_change = first_percent_done } 
					round_temp_variable = peasants_change
					divide_temp_variable = { peasants_change = 10 }
				}
				if = { limit = { check_variable = { laborers_change < 0 } } 
					multiply_temp_variable = { laborers_change = first_percent_done } 
					round_temp_variable = laborers_change
					divide_temp_variable = { laborers_change = 10 }
				}
				if = { limit = { check_variable = { workers_change < 0 } } 
					multiply_temp_variable = { workers_change = first_percent_done } 
					round_temp_variable = workers_change
					divide_temp_variable = { workers_change = 10 }
				}
				if = { limit = { check_variable = { professionals_change < 0 } } 
					multiply_temp_variable = { professionals_change = first_percent_done } 
					round_temp_variable = professionals_change
					divide_temp_variable = { professionals_change = 10 }
				}
				if = { limit = { check_variable = { specialists_change < 0 } } 
					multiply_temp_variable = { specialists_change = first_percent_done } 
					round_temp_variable = specialists_change
					divide_temp_variable = { specialists_change = 10 }
				}
				if = { limit = { check_variable = { aristocrats_change < 0 } } 
					multiply_temp_variable = { aristocrats_change = first_percent_done } 
					round_temp_variable = aristocrats_change
					divide_temp_variable = { aristocrats_change = 10 }
				}
				if = { limit = { check_variable = { capitalists_change < 0 } } 
					multiply_temp_variable = { capitalists_change = first_percent_done } 
					round_temp_variable = capitalists_change
					divide_temp_variable = { capitalists_change = 10 }
				}
				if = { limit = { check_variable = { bureaucrats_change < 0 } } 
					multiply_temp_variable = { bureaucrats_change = first_percent_done } 
					round_temp_variable = bureaucrats_change
					divide_temp_variable = { bureaucrats_change = 10 }
				}
				if = { limit = { check_variable = { soldiers_change < 0 } } 
					multiply_temp_variable = { soldiers_change = first_percent_done } 
					round_temp_variable = soldiers_change
					divide_temp_variable = { soldiers_change = 10 }
				}

				# Redo totals
				set_temp_variable = { positive_change_total = 0 }
				set_temp_variable = { negative_change_total = 0 }
				if = { limit = { check_variable = { slaves_change > 0 } } add_to_temp_variable = { positive_change_total = slaves_change } }
				else = { subtract_from_temp_variable = { negative_change_total = slaves_change } }
				if = { limit = { check_variable = { peasants_change > 0 } } add_to_temp_variable = { positive_change_total = peasants_change } }
				else = { subtract_from_temp_variable = { negative_change_total = peasants_change } }
				if = { limit = { check_variable = { laborers_change > 0 } } add_to_temp_variable = { positive_change_total = laborers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = laborers_change } }
				if = { limit = { check_variable = { workers_change > 0 } } add_to_temp_variable = { positive_change_total = workers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = workers_change } }
				if = { limit = { check_variable = { professionals_change > 0 } } add_to_temp_variable = { positive_change_total = professionals_change } }
				else = { subtract_from_temp_variable = { negative_change_total = professionals_change } }
				if = { limit = { check_variable = { specialists_change > 0 } } add_to_temp_variable = { positive_change_total = specialists_change } }
				else = { subtract_from_temp_variable = { negative_change_total = specialists_change } }
				if = { limit = { check_variable = { aristocrats_change > 0 } } add_to_temp_variable = { positive_change_total = aristocrats_change } }
				else = { subtract_from_temp_variable = { negative_change_total = aristocrats_change } }
				if = { limit = { check_variable = { capitalists_change > 0 } } add_to_temp_variable = { positive_change_total = capitalists_change } }
				else = { subtract_from_temp_variable = { negative_change_total = capitalists_change } }
				if = { limit = { check_variable = { bureaucrats_change > 0 } } add_to_temp_variable = { positive_change_total = bureaucrats_change } }
				else = { subtract_from_temp_variable = { negative_change_total = bureaucrats_change } }
				if = { limit = { check_variable = { soldiers_change > 0 } } add_to_temp_variable = { positive_change_total = soldiers_change } }
				else = { subtract_from_temp_variable = { negative_change_total = soldiers_change } }
			}
			else = {
				set_temp_variable = { first_percent_done = 1 }
			}
		#

		# log = "STATE: [THIS.GetName]"

		if = {
			limit = { check_variable = { percent_done > 0 } }
			# Note: Aristocrats & Capitalists don't count for qualification changes b/c they're required at every stage of tech. But they do count as literate + schooled.

			## Educated Qualifications (Just specialists) ##
				if = {
					limit = {
						check_variable = { specialists_change > 0 }
					}
					set_temp_variable = { education_change_cap = pops_workforce }
					multiply_temp_variable = { education_change_cap = pops_education_percentage }
                    divide_temp_variable = { education_change_cap = 100 }
					subtract_from_temp_variable = { education_change_cap = specialists_workforce }
					# log = "Educated Change: [?specialists_change] / [?education_change_cap]"

					if = {
						limit = {
							check_variable = { education_change_cap < specialists_change }
						}
						set_temp_variable = { amount_temp = specialists_change }
						set_temp_variable = { max_amount_temp = education_change_cap }
						multiply_pops_change = yes
						set_temp_variable = { second_percent_done = temp_percent_done }
						multiply_temp_variable = { percent_done = second_percent_done }
					}
					else = {
						set_temp_variable = { second_percent_done = 1 }
					}
				}
			#
			## Schooled Qualifications ##
				set_temp_variable = { schooled_change = specialists_change }
				add_to_temp_variable = { schooled_change = professionals_change }
				if = {
					limit = {
						check_variable = { schooled_change > 0 }
					}
					set_temp_variable = { schooled_change_cap = pops_workforce }
					multiply_temp_variable = { schooled_change_cap = pops_schooling_percentage }
                    divide_temp_variable = { schooled_change_cap = 100 }
					subtract_from_temp_variable = { schooled_change_cap = professionals_workforce }
					subtract_from_temp_variable = { schooled_change_cap = specialists_workforce }
					subtract_from_temp_variable = { schooled_change_cap = capitalists_workforce }
					subtract_from_temp_variable = { schooled_change_cap = aristocrats_workforce }
					# log = "Schooled Change: [?schooled_change] / [?schooled_change_cap]"

					if = {
						limit = {
							check_variable = { schooled_change_cap < professionals_change }
						}
						set_temp_variable = { amount_temp = schooled_change }
						set_temp_variable = { max_amount_temp = schooled_change_cap }
						multiply_pops_change = yes
						set_temp_variable = { third_percent_done = temp_percent_done }
						multiply_temp_variable = { percent_done = third_percent_done }
					}
					else = {
						set_temp_variable = { third_percent_done = 1 }
					}
				}
			#
			## Literates Qualifications ##
				set_temp_variable = { literates_change = workers_change }
				add_to_temp_variable = { literates_change = professionals_change }
				add_to_temp_variable = { literates_change = specialists_change }
				add_to_temp_variable = { literates_change = bureaucrats_change }
				if = {
					limit = {
						check_variable = { literates_change > 0 }
					}
					set_temp_variable = { literates_change_cap = pops_workforce }
					multiply_temp_variable = { literates_change_cap = pops_literacy_percentage }
                    divide_temp_variable = { literates_change_cap = 100 }
					subtract_from_temp_variable = { literates_change_cap = workers_workforce }
					subtract_from_temp_variable = { literates_change_cap = professionals_workforce }
					subtract_from_temp_variable = { literates_change_cap = elites_workforce }
					subtract_from_temp_variable = { literates_change_cap = bureaucrats_workforce }
					# log = "Literates Change: [?literates_change] / [?literates_change_cap]"

					if = {
						limit = {
							check_variable = { literates_change_cap < literates_change }
						}
						set_temp_variable = { amount_temp = literates_change }
						set_temp_variable = { max_amount_temp = literates_change_cap }
						multiply_pops_change = yes
						set_temp_variable = { fourth_percent_done = temp_percent_done }
						multiply_temp_variable = { percent_done = fourth_percent_done }
					}
					else = {
						set_temp_variable = { fourth_percent_done = 1 }
					}
				}
			#

			# Debugging #
				if = { limit = { NOT = { check_variable = { slaves_change = 0 } } }  log = "Slaves Change: [?slaves_change]" }
				if = { limit = { NOT = { check_variable = { peasants_change = 0 } } }  log = "Peasants Change: [?peasants_change]" }
				if = { limit = { NOT = { check_variable = { laborers_change = 0 } } }  log = "Laborers Change: [?laborers_change]" }
				if = { limit = { NOT = { check_variable = { workers_change = 0 } } }  log = "Workers Change: [?workers_change]" }
				if = { limit = { NOT = { check_variable = { professionals_change = 0 } } }  log = "Professionals Change: [?professionals_change]" }
				if = { limit = { NOT = { check_variable = { specialists_change = 0 } } }  log = "Specialists Change: [?specialists_change]" }
				if = { limit = { NOT = { check_variable = { aristocrats_change = 0 } } }  log = "Aristocrats Change: [?aristocrats_change]" }
				if = { limit = { NOT = { check_variable = { capitalists_change = 0 } } }  log = "Capitalists Change: [?capitalists_change]" }
				if = { limit = { NOT = { check_variable = { bureaucrats_change = 0 } } }  log = "Bureaucrats Change: [?bureaucrats_change]" }
				if = { limit = { NOT = { check_variable = { soldiers_change = 0 } } }  log = "Soldiers Change: [?soldiers_change]" }
				log = "BEFORE:"
				if = { limit = { NOT = { check_variable = { slaves_workforce = 0 } } }  log = "Slaves Workforce: [?slaves_workforce]" }
				if = { limit = { NOT = { check_variable = { peasants_workforce = 0 } } }  log = "Peasants Workforce: [?peasants_workforce]" }
				if = { limit = { NOT = { check_variable = { laborers_workforce = 0 } } }  log = "Laborers Workforce: [?laborers_workforce]" }
				if = { limit = { NOT = { check_variable = { workers_workforce = 0 } } }  log = "Workers Workforce: [?workers_workforce]" }
				if = { limit = { NOT = { check_variable = { professionals_workforce = 0 } } }  log = "Professionals Workforce: [?professionals_workforce]" }
				if = { limit = { NOT = { check_variable = { specialists_workforce = 0 } } }  log = "Specialists Workforce: [?specialists_workforce]" }
				if = { limit = { NOT = { check_variable = { aristocrats_workforce = 0 } } }  log = "Aristocrats Workforce: [?aristocrats_workforce]" }
				if = { limit = { NOT = { check_variable = { capitalists_workforce = 0 } } }  log = "Capitalists Workforce: [?capitalists_workforce]" }
				if = { limit = { NOT = { check_variable = { bureaucrats_workforce = 0 } } }  log = "Bureaucrats Workforce: [?bureaucrats_workforce]" }
				if = { limit = { NOT = { check_variable = { soldiers_workforce = 0 } } }  log = "Soldiers Workforce: [?soldiers_workforce]" }
				log = "AFTER:"
			#

			## Changes to Workforce ##
				add_to_variable = { slaves_workforce = slaves_change }
				add_to_variable = { slaves_unemployed = slaves_change }
				
				add_to_variable = { peasants_workforce = peasants_change }
				add_to_variable = { peasants_unemployed = peasants_change }
				
				add_to_variable = { laborers_workforce = laborers_change }
				add_to_variable = { laborers_unemployed = laborers_change }
				
				add_to_variable = { workers_workforce = workers_change }
				add_to_variable = { workers_unemployed = workers_change }
				
				add_to_variable = { professionals_workforce = professionals_change }
				add_to_variable = { professionals_unemployed = professionals_change }
				
				add_to_variable = { specialists_workforce = specialists_change }
				add_to_variable = { specialists_unemployed = specialists_change }
                
				add_to_variable = { aristocrats_workforce = aristocrats_change }
				add_to_variable = { aristocrats_unemployed = aristocrats_change }
                
				add_to_variable = { capitalists_workforce = capitalists_change }
				add_to_variable = { capitalists_unemployed = capitalists_change }
				
				add_to_variable = { bureaucrats_workforce = bureaucrats_change }
				add_to_variable = { bureaucrats_unemployed = bureaucrats_change }
				
				add_to_variable = { soldiers_workforce = soldiers_change }
				add_to_variable = { soldiers_unemployed = soldiers_change }
			#
		}

		# More Debugging #
			if = { limit = { NOT = { check_variable = { slaves_workforce = 0 } } }  log = "Slaves Workforce: [?slaves_workforce]" }
			if = { limit = { NOT = { check_variable = { peasants_workforce = 0 } } }  log = "Peasants Workforce: [?peasants_workforce]" }
			if = { limit = { NOT = { check_variable = { laborers_workforce = 0 } } }  log = "Laborers Workforce: [?laborers_workforce]" }
			if = { limit = { NOT = { check_variable = { workers_workforce = 0 } } }  log = "Workers Workforce: [?workers_workforce]" }
			if = { limit = { NOT = { check_variable = { professionals_workforce = 0 } } }  log = "Professionals Workforce: [?professionals_workforce]" }
			if = { limit = { NOT = { check_variable = { specialists_workforce = 0 } } }  log = "Specialists Workforce: [?specialists_workforce]" }
			if = { limit = { NOT = { check_variable = { aristocrats_workforce = 0 } } }  log = "Aristocrats Workforce: [?aristocrats_workforce]" }
			if = { limit = { NOT = { check_variable = { capitalists_workforce = 0 } } }  log = "Capitalists Workforce: [?capitalists_workforce]" }
			if = { limit = { NOT = { check_variable = { bureaucrats_workforce = 0 } } }  log = "Bureaucrats Workforce: [?bureaucrats_workforce]" }
			if = { limit = { NOT = { check_variable = { soldiers_workforce = 0 } } }  log = "Soldiers Workforce: [?soldiers_workforce]" }
			log = "PERCENT DONE: [?percent_done]"
		#

		## Reset Temp Vars ##
		set_temp_variable = { slaves_change = 0 }
		set_temp_variable = { peasants_change = 0 }
		set_temp_variable = { laborers_change = 0 }
		set_temp_variable = { workers_change = 0 }
		set_temp_variable = { professionals_change = 0 }
		set_temp_variable = { specialists_change = 0 }
		set_temp_variable = { aristocrats_change = 0 }
		set_temp_variable = { capitalists_change = 0 }
		set_temp_variable = { bureaucrats_change = 0 }
		set_temp_variable = { soldiers_change = 0 }
	}
	multiply_pops_change = {
		# Effect for pops_convert
		# amount_temp
		# max_amount_temp
	
		set_temp_variable = { temp_percent_done = max_amount_temp }
		multiply_temp_variable = { temp_percent_done = 10 }
		divide_temp_variable = { temp_percent_done = amount_temp }

		multiply_temp_variable = { slaves_change = temp_percent_done } 
		round_temp_variable = slaves_change
		divide_temp_variable = { slaves_change = 10 }
		multiply_temp_variable = { peasants_change = temp_percent_done } 
		round_temp_variable = peasants_change
		divide_temp_variable = { peasants_change = 10 }
		multiply_temp_variable = { laborers_change = temp_percent_done } 
		round_temp_variable = laborers_change
		divide_temp_variable = { laborers_change = 10 }
		multiply_temp_variable = { workers_change = temp_percent_done } 
		round_temp_variable = workers_change
		divide_temp_variable = { workers_change = 10 }
		multiply_temp_variable = { professionals_change = temp_percent_done } 
		round_temp_variable = professionals_change
		divide_temp_variable = { professionals_change = 10 }
		multiply_temp_variable = { specialists_change = temp_percent_done } 
		round_temp_variable = specialists_change
		divide_temp_variable = { specialists_change = 10 }
		multiply_temp_variable = { aristocrats_change = temp_percent_done } 
		round_temp_variable = aristocrats_change
		divide_temp_variable = { aristocrats_change = 10 }
		multiply_temp_variable = { capitalists_change = temp_percent_done } 
		round_temp_variable = capitalists_change
		divide_temp_variable = { capitalists_change = 10 }
		multiply_temp_variable = { bureaucrats_change = temp_percent_done } 
		round_temp_variable = bureaucrats_change
		divide_temp_variable = { bureaucrats_change = 10 }
		multiply_temp_variable = { soldiers_change = temp_percent_done } 
		round_temp_variable = soldiers_change
		divide_temp_variable = { soldiers_change = 10 }

		# Redo totals
		set_temp_variable = { positive_change_total = 0 }
		set_temp_variable = { negative_change_total = 0 }
		if = { limit = { check_variable = { slaves_change > 0 } } add_to_temp_variable = { positive_change_total = slaves_change } }
		else = { subtract_from_temp_variable = { negative_change_total = slaves_change } }
		if = { limit = { check_variable = { peasants_change > 0 } } add_to_temp_variable = { positive_change_total = peasants_change } }
		else = { subtract_from_temp_variable = { negative_change_total = peasants_change } }
		if = { limit = { check_variable = { laborers_change > 0 } } add_to_temp_variable = { positive_change_total = laborers_change } }
		else = { subtract_from_temp_variable = { negative_change_total = laborers_change } }
		if = { limit = { check_variable = { workers_change > 0 } } add_to_temp_variable = { positive_change_total = workers_change } }
		else = { subtract_from_temp_variable = { negative_change_total = workers_change } }
		if = { limit = { check_variable = { professionals_change > 0 } } add_to_temp_variable = { positive_change_total = professionals_change } }
		else = { subtract_from_temp_variable = { negative_change_total = professionals_change } }
		if = { limit = { check_variable = { specialists_change > 0 } } add_to_temp_variable = { positive_change_total = specialists_change } }
		else = { subtract_from_temp_variable = { negative_change_total = specialists_change } }
		if = { limit = { check_variable = { aristocrats_change > 0 } } add_to_temp_variable = { positive_change_total = aristocrats_change } }
		else = { subtract_from_temp_variable = { negative_change_total = aristocrats_change } }
		if = { limit = { check_variable = { capitalists_change > 0 } } add_to_temp_variable = { positive_change_total = capitalists_change } }
		else = { subtract_from_temp_variable = { negative_change_total = capitalists_change } }
		if = { limit = { check_variable = { bureaucrats_change > 0 } } add_to_temp_variable = { positive_change_total = bureaucrats_change } }
		else = { subtract_from_temp_variable = { negative_change_total = bureaucrats_change } }
		if = { limit = { check_variable = { soldiers_change > 0 } } add_to_temp_variable = { positive_change_total = soldiers_change } }
		else = { subtract_from_temp_variable = { negative_change_total = soldiers_change } }
	}
    fix_negative_workforce = {
        # Fixes negative aristocrats/capitalists by sourcing from peasants/laborers
        if = {
            limit = {
                check_variable = { aristocrats_workforce < 0 }
            }
            add_to_variable = { peasants_workforce = aristocrats_workforce }
            set_variable = { aristocrats_workforce = 0 }
        }
        if = {
            limit = {
                check_variable = { capitalists_workforce < 0 }
            }
            add_to_variable = { laborers_workforce = capitalists_workforce }
            set_variable = { capitalists_workforce = 0 }
        }

        # Fixes negative workforce by sourcing from higher-tier pops
        if = {
            limit = {
                check_variable = { peasants_workforce < 0 }
            }
            add_to_variable = { laborers_workforce = peasants_workforce }
            set_variable = { peasants_workforce = 0 }
        }
        if = {
            limit = {
                check_variable = { laborers_workforce < 0 }
            }
            add_to_variable = { workers_workforce = laborers_workforce }
            set_variable = { laborers_workforce = 0 }
        }
        if = {
            limit = {
                check_variable = { workers_workforce < 0 }
            }
            add_to_variable = { professionals_workforce = workers_workforce }
            set_variable = { workers_workforce = 0 }
        }
        if = {
            limit = {
                check_variable = { professionals_workforce < 0 }
            }
            add_to_variable = { specialists_workforce = professionals_workforce }
            set_variable = { professionals_workforce = 0 }
        }
        if = {
            limit = {
                check_variable = { specialists_workforce < 0 }
            }
            set_variable = { specialists_workforce = 0 }
        }
    }

    update_country_pop_stats = {
        set_variable = { pops = 0 }
        set_variable = { pops_workforce = 0 }
        set_variable = { pops_col = 0 }
        set_variable = { pops_sol = 0 }
        set_variable = { pops_earnings = 0 }

        set_variable = { capitalists_workforce = 0 }
        set_variable = { capitalists_dividends = 0 }
        set_variable = { aristocrats_workforce = 0 }
        set_variable = { aristocrats_dividends = 0 }

        every_controlled_state = {
            #Pops
            add_to_variable = { PREV.pops = pops }
            add_to_variable = { PREV.pops_workforce = pops_workforce }

            set_temp_variable = { stat_temp = pops_col }
            multiply_temp_variable = { stat_temp = pops }
            add_to_variable = { PREV.pops_col = stat_temp }

            set_temp_variable = { stat_temp = pops_sol }
            multiply_temp_variable = { stat_temp = pops }
            add_to_variable = { PREV.pops_sol = stat_temp }

            add_to_variable = { PREV.pops_earnings = pops_earnings }
            
            add_to_variable = { PREV.capitalists_workforce = capitalists_workforce }
            add_to_variable = { PREV.capitalists_dividends = capitalists_dividends }
            add_to_variable = { PREV.aristocrats_workforce = aristocrats_workforce }
            add_to_variable = { PREV.aristocrats_dividends = aristocrats_dividends }
        }

        divide_variable = { pops_sol = pops }
        divide_variable = { pops_col = pops }

        set_variable = { pops_earnings_avg = pops_earnings }
        divide_variable = { pops_earnings_avg = pops }

        set_variable = { workforce_earnings_avg = pops_earnings }
        divide_variable = { workforce_earnings_avg = pops_workforce }
    }


	create_pie_chart_pop_type = {
		# this creates a pie chart of popularities - can be easily adapted to show anything that adds up to 100%
		# This code is much different from Yard's, but I'll credit him anyway
		# State Scope

		clear_array = pie_chart_pop_type
		resize_array = {
			array = pie_chart_pop_type
			value = 1 # 1 is value for RGO frame
			size = 100 # 100 pieces, each percent is one piece
		}

		clear_temp_array = pop_types_percentage
		add_to_temp_array = { pop_types_percentage = 0 }
		add_to_temp_array = { pop_types_percentage = slaves_percentage }
		add_to_temp_array = { pop_types_percentage = peasants_percentage }
		add_to_temp_array = { pop_types_percentage = laborers_percentage }
		add_to_temp_array = { pop_types_percentage = workers_percentage }
		add_to_temp_array = { pop_types_percentage = professionals_percentage }
		add_to_temp_array = { pop_types_percentage = specialists_percentage }
		add_to_temp_array = { pop_types_percentage = aristocrats_percentage }
		add_to_temp_array = { pop_types_percentage = capitalists_percentage }
		add_to_temp_array = { pop_types_percentage = bureaucrats_percentage }
		add_to_temp_array = { pop_types_percentage = soldiers_percentage }

        set_temp_variable = { total_temp = 0 }
        set_temp_variable = { largest = 0 }
        for_each_loop = {
            array = pop_types_percentage
            index = rr
            if = {
                limit = {
                    check_variable = { pop_types_percentage^rr > pop_types_percentage^largest }
                }
                set_temp_variable = { largest = rr }
            }

            multiply_temp_variable = { pop_types_percentage^rr = 100 }
            round_temp_variable = pop_types_percentage^rr
            add_to_temp_variable = { total_temp = pop_types_percentage^rr }
        }

        if = {
            limit = {
                NOT = { check_variable = { total_temp = 100 } }
            }
            add_to_temp_variable = { pop_types_percentage^largest = 100 }
            subtract_from_temp_variable = { pop_types_percentage^largest = total_temp }
        }

		set_temp_variable = { pie_pop = 0 }
		for_each_loop = {
			array = pop_types_percentage
			index = rr
			value = vv

			set_variable = { last_idx = pie_pop }
			set_temp_variable = { pie_pop = vv }

			add_to_temp_variable = { pie_pop = last_idx }
			#subtract_from_temp_variable = { pie_pop = 1 }
			if = {
				limit = {
					check_variable = { pie_pop > 100 }
				}
				set_temp_variable = { pie_pop = 100 }
			}
			for_loop_effect = {
				start = last_idx
				end = pie_pop
				set_variable = { pie_chart_pop_type^v = rr }
			}
			set_variable = { last_idx = pie_pop }
		}
		clear_variable = last_idx

		add_to_variable = { update_state_econ_window = 1 }
	}
#

#Buildings
    construct_x_buildings_no_update = {
		# x_temp, financer_temp, building_token, production_method_temp
		# State

        round_temp_variable = x_temp #Look, people may do dumb shit and put a float in this thing.
        round_temp_variable = production_method_temp

        set_temp_variable = { pm_temp = production_method_temp }
        if = {
            limit = {
                check_variable = { x_temp > 0 }
                check_variable = { under_construction@var:building_token = 0 }
                is_in_array = { global.building_token_array = building_token }
                has_valid_production_method = yes
                if = {
                    limit = {
                        check_variable = { financer_temp < 0 } #Corporation
                    }
                }
                else_if = {
                    limit = {
                        check_variable = { financer_temp > 0 } #Government
                    }
                    country_exists = var:financer_temp

                }
                else = { #Local

                }
            }

            set_variable = { under_construction@var:building_token = x_temp }

            #Add building to array if it doesn't exist yet
            if = {
                limit = {
                    NOT = { is_in_array = { buildings = building_token } }
                }
                add_to_array = { buildings = building_token }
                set_variable = { production_method@var:building_token = production_method_temp }
            }

            #Financer
            set_variable = { financer@var:building_token = financer_temp }

            #Amount
            if = {
                limit = {
                    check_variable = { production_method@var:building_token = 0 }
                }
                set_variable = { construction_amount@var:building_token = global.building_basic_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 1 }
                }
                set_variable = { construction_amount@var:building_token = global.building_advanced_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 2 }
                }
                set_variable = { construction_amount@var:building_token = global.building_industrialized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 3 }
                }
                set_variable = { construction_amount@var:building_token = global.building_mechanized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 4 }
                }
                set_variable = { construction_amount@var:building_token = global.building_electrified_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 5 }
                }
                set_variable = { construction_amount@var:building_token = global.building_motorized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 6 }
                }
                set_variable = { construction_amount@var:building_token = global.building_modernized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 7 }
                }
                set_variable = { construction_amount@var:building_token = global.building_roboticized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 8 }
                }
                set_variable = { construction_amount@var:building_token = global.building_computerized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 9 }
                }
                set_variable = { construction_amount@var:building_token = global.building_digitalized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 10 }
                }
                set_variable = { construction_amount@var:building_token = global.building_automatized_construction_amount@var:building_token }
            }
            else_if = {
                limit = {
                    check_variable = { production_method@var:building_token = 11 }
                }
                set_variable = { construction_amount@var:building_token = global.building_futurized_construction_amount@var:building_token }
            }
            multiply_variable = { construction_amount@var:building_token = under_construction@var:building_token }

            set_temp_variable = { initial_cost_temp = construction_amount@var:building_token }
            multiply_temp_variable = { initial_cost_temp = price@token:resource_industrial_goods }
            multiply_temp_variable = { initial_cost_temp = global.start_construction_cost_multiplier }
            if = {
                limit = {
                    check_variable = { financer_temp < 0 } #Corporation
                }
            }
            else_if = {
                limit = {
                    check_variable = { financer_temp > 0 } #Government
                }
        		divide_temp_variable = { initial_cost_temp = financer_temp:modifier@government_investment_efficiency_factor }
                subtract_from_variable = { financer_temp:treasury = initial_cost_temp }
            }
            else = { #Local
                subtract_from_variable = { controller:investment_fund = initial_cost_temp }
            }

            buildings_update_construction = yes
        }
    }

	change_building_avg_wage = {
		#wage_change_temp, building_token

		set_temp_variable = { total_wage_multiplier = 0 }

		set_temp_variable = { wage_multiplier = peasants_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 1 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = laborers_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 2 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = workers_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 5 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = professionals_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 10 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = specialists_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 20 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = aristocrats_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 30 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { wage_multiplier = capitalists_jobs@var:building_token }
		multiply_temp_variable = { wage_multiplier = 50 }
		add_to_temp_variable = { total_wage_multiplier = wage_multiplier }

		set_temp_variable = { ciw_wage = wage_change_temp }
		multiply_temp_variable = { ciw_wage = jobs@var:building_token }
		divide_temp_variable = { ciw_wage = total_wage_multiplier }

		add_to_variable = { base_wage@var:building_token = ciw_wage }
	}
	change_building_base_wage = {
		#wage_change_temp, building_token

		add_to_variable = { base_wage@var:building_token = wage_change_temp }
	}

	change_building_employment_by_x_percent = {
		#x_percent_temp (0-100), building_token
		add_to_temp_variable = { x_percent_temp = employment_percentage@var:building_token }

		set_building_employment_to_x_percent = yes
	}
	set_building_employment_to_x_percent = {
		#x_percent_temp, building_token
		if = {
			limit = {
				check_variable = { x_percent_temp > 100 }
			}
			set_temp_variable = { x_percent_temp = 100 }
		}
		if = {
			limit = {
				check_variable = { x_percent_temp < 0 }
			}
			set_temp_variable = { x_percent_temp = 0 }
		}

		if = { # Peasants
			limit = {
				check_variable = { peasants_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = peasants_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = peasants_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > peasants_unemployed }
                }
			    set_temp_variable = { employment_change_temp = peasants_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = peasants_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > peasants_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = peasants_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = peasants_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > peasants_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = peasants_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { peasants_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { peasants_employed = employment_change_temp }
			subtract_from_variable = { peasants_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Laborers
			limit = {
				check_variable = { laborers_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = laborers_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = laborers_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > laborers_unemployed }
                }
			    set_temp_variable = { employment_change_temp = laborers_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = laborers_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > laborers_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = laborers_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = laborers_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > laborers_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = laborers_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { laborers_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { laborers_employed = employment_change_temp }
			subtract_from_variable = { laborers_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Workers
			limit = {
				check_variable = { workers_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = workers_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = workers_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > workers_unemployed }
                }
			    set_temp_variable = { employment_change_temp = workers_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = workers_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > workers_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = workers_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = workers_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > workers_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = workers_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { workers_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { workers_employed = employment_change_temp }
			subtract_from_variable = { workers_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Professionals
			limit = {
				check_variable = { professionals_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = professionals_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = professionals_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > professionals_unemployed }
                }
			    set_temp_variable = { employment_change_temp = professionals_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = professionals_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > professionals_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = professionals_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = professionals_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > professionals_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = professionals_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { professionals_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { professionals_employed = employment_change_temp }
			subtract_from_variable = { professionals_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Specialists
			limit = {
				check_variable = { specialists_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = specialists_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = specialists_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > specialists_unemployed }
                }
			    set_temp_variable = { employment_change_temp = specialists_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = specialists_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > specialists_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = specialists_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = specialists_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > specialists_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = specialists_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { specialists_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { specialists_employed = employment_change_temp }
			subtract_from_variable = { specialists_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Aristocrats
			limit = {
				check_variable = { aristocrats_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = aristocrats_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = aristocrats_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > aristocrats_unemployed }
                }
			    set_temp_variable = { employment_change_temp = aristocrats_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = aristocrats_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > aristocrats_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = aristocrats_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = aristocrats_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > aristocrats_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = aristocrats_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { aristocrats_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { aristocrats_employed = employment_change_temp }
			subtract_from_variable = { aristocrats_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}
		if = { # Capitalists
			limit = {
				check_variable = { capitalists_jobs@var:building_token > 0 }
			}
            # Employment Change
            set_temp_variable = { employment_change_temp = capitalists_jobs@var:building_token }
            multiply_temp_variable = { employment_change_temp = x_percent_temp }
            divide_temp_variable = { employment_change_temp = 100 }
            subtract_from_temp_variable = { employment_change_temp = capitalists_employed@var:building_token }

            if = { # Caps to unemployment (if positive)
                limit = {
                    check_variable = { employment_change_temp > capitalists_unemployed }
                }
			    set_temp_variable = { employment_change_temp = capitalists_unemployed }
            }
            if = { # Caps to jobs (if positive)
                limit = {
                    set_temp_variable = { num_after = capitalists_employed@var:building_token }
                    add_to_temp_variable = { num_after = employment_change_temp }
                    check_variable = { num_after > capitalists_jobs@var:building_token }
                }
			    set_temp_variable = { employment_change_temp = capitalists_employed@var:building_token }
                subtract_from_temp_variable = { employment_change_temp = capitalists_jobs@var:building_token }
            }
            if = { # Caps to employment (if negative)
                limit = {
                    check_variable = { employment_change_temp < 0 }
                    set_temp_variable = { neg_temp = employment_change_temp }
                    multiply_temp_variable = { neg_temp = -1 }
                    check_variable = { neg_temp > capitalists_employed@var:building_token }
                }
                set_temp_variable = { employment_change_temp = capitalists_employed@var:building_token }
                multiply_temp_variable = { employment_change_temp = -1 }
            }
            
            # Adjusting Employment
            add_to_variable = { capitalists_employed@var:building_token = employment_change_temp }
            add_to_variable = { employed@var:building_token = employment_change_temp }
            
			add_to_variable = { capitalists_employed = employment_change_temp }
			subtract_from_variable = { capitalists_unemployed = employment_change_temp }
            add_to_variable = { pops_employed = employment_change_temp }
            subtract_from_variable = { pops_unemployed = employment_change_temp }
		}

        # Update Building Values
        set_variable = { employment_percentage@var:building_token = employed@var:building_token }
        if = {
            limit = {
                check_variable = { employed@var:building_token > 10000 }
            }
            divide_variable = { employment_percentage@var:building_token = jobs@var:building_token }
            multiply_variable = { employment_percentage@var:building_token = 100 }
        }
        else = {
            multiply_variable = { employment_percentage@var:building_token = 100 }
            divide_variable = { employment_percentage@var:building_token = jobs@var:building_token }
        }

        set_temp_variable = { total_prod_temp = 0 }
        set_temp_variable = { production_temp = peasants_employed@var:building_token }
        multiply_temp_variable = { production_temp = 1 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = laborers_employed@var:building_token }
        multiply_temp_variable = { production_temp = 2 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = workers_employed@var:building_token }
        multiply_temp_variable = { production_temp = 5 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = professionals_employed@var:building_token }
        multiply_temp_variable = { production_temp = 10 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = specialists_employed@var:building_token }
        multiply_temp_variable = { production_temp = 20 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = aristocrats_employed@var:building_token }
        multiply_temp_variable = { production_temp = 30 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        set_temp_variable = { production_temp = capitalists_employed@var:building_token }
        multiply_temp_variable = { production_temp = 50 }
        add_to_temp_variable = { total_prod_temp = production_temp }
        if = {
            limit = {
                check_variable = { total_prod_temp > 10000 }
            }
            divide_temp_variable = { total_prod_temp = payroll_multiplier@var:building_token }
            multiply_temp_variable = { total_prod_temp = 100 }
        }
        else = {
            multiply_temp_variable = { total_prod_temp = 100 }
            divide_temp_variable = { total_prod_temp = payroll_multiplier@var:building_token }
        }
        set_variable = { production_percentage@var:building_token = total_prod_temp }
	}

    set_production_method = {
        #building_token, pm_temp
        #State scope
        #Sets the production method to pm provided. Checks if PM is too advanced & also adjusts workforce.

        # Checks PM if too advanced/basic
        set_variable = { production_method@var:building_token = pm_temp }
        if = {
            limit = {
                check_variable = { controller:latest_production_method@var:building_token < production_method@var:building_token }
            }
            set_variable = { production_method@var:building_token = controller:latest_production_method@var:building_token }
        }

        if = {
            limit = {
                check_variable = { production_method@var:building_token < controller:earliest_production_method@var:building_token }
            }
            set_variable = { production_method@var:building_token = controller:earliest_production_method@var:building_token }
        }
        if = {
            limit = {
                check_variable = { production_method@var:building_token < 0 }
            }
            set_variable = { production_method@var:building_token = 0 } # Building shouldn't exist
        }

        # Adjusts Workforce
		set_temp_variable = { bu_token = building_token }
        set_temp_variable = { x_percent_temp = 0 }
        set_building_employment_to_x_percent = yes

        building_update = yes
        
        set_temp_variable = { x_percent_temp = employment_target@var:building_token }
        set_building_employment_to_x_percent = yes

        buildings_update = yes
        pops_update = yes
    }
    set_latest_production_method = {
        #building_token
        #State Scope
        #Sets the building to the latest production method available
        set_temp_variable = { pm_temp = controller:latest_production_method@var:building_token }
        set_production_method = yes
    }
    correct_production_method = {
        # building_token. pm_temp
        # State Scope
        # Takes in a production method and "corrects" it. If set to -1, then latest is chosen. If not valid, then sets it to -1

        if = {
            limit = {
                check_variable = { pm_temp = -1 }
            }
            set_temp_variable = { pm_temp = controller:latest_production_method@var:building_token }
        }
        else = {
            set_temp_variable = { pm_correcting_temp = pm_temp }
            set_temp_variable = { pm_temp = controller:latest_production_method@var:building_token }
            if = {
                limit = {
                    check_variable = { pm_correcting_temp > pm_temp }
                }
                set_temp_variable = { pm_correcting_temp = pm_temp }
            }

            set_temp_variable = { pm_temp = controller:earliest_production_method@var:building_token }
            if = {
                limit = {
                    check_variable = { pm_correcting_temp < pm_temp }
                }
                set_temp_variable = { pm_correcting_temp = pm_temp }
            }

            set_temp_variable = { pm_temp = pm_correcting_temp }
        }
    }

    reload_building_array = {
        clear_array = urban_buildings
        clear_array = rural_buildings
        clear_array = buildings
        for_each_loop = {
            array = global.urban_building_token_array
            value = bld_token
            if = {
                limit = {
                    OR = {
                        check_variable = { size@var:bld_token > 0 }
                        check_variable = { under_construction@var:bld_token > 0 }
                    }
                }
                add_to_array = { urban_buildings = bld_token }
                add_to_array = { buildings = bld_token }
            }
        }
        for_each_loop = {
            array = global.rural_building_token_array
            value = bld_token
            if = {
                limit = {
                    OR = {
                        check_variable = { size@var:bld_token > 0 }
                        check_variable = { under_construction@var:bld_token > 0 }
                    }
                }
                add_to_array = { rural_buildings = bld_token }
                add_to_array = { buildings = bld_token }
            }
        }
    }

    buildings_update = {

        reload_building_array = yes

        set_variable = { total_building_amount = 0 }

		set_variable = { jobs_buildings = 0 }
		set_variable = { employed_buildings = 0 }

		set_variable = { non_subs_jobs_buildings = 0 }
		set_variable = { non_subs_employed_buildings = 0 }

        # Update Mil/Civ/Naval Factories
            if = {
                limit = {
                    NOT = { check_variable = { size@token:building_military_industry = arms_factory_level } }
                }
                set_variable = { size@token:building_military_industry = arms_factory_level }
                if = {
                    limit = {
                        NOT = { has_variable = production_method@token:building_military_industry }
                    }
                    set_variable = { production_method@token:building_military_industry = controller:latest_production_method@token:building_military_industry }
                }
            }

            if = {
                limit = {
                    NOT = { check_variable = { size@token:building_civilian_industry = industrial_complex_level} }
                }
                set_variable = { size@token:building_civilian_industry = industrial_complex_level }
                if = {
                    limit = {
                        NOT = { has_variable = production_method@token:building_civilian_industry }
                    }
                    set_variable = { production_method@token:building_civilian_industry = controller:latest_production_method@token:building_civilian_industry }
                }
            }

            if = {
                limit = {
                    NOT = { check_variable = { size@token:building_naval_industry = building_level@dockyard } }
                }
                set_variable = { size@token:building_naval_industry = building_level@dockyard }
                if = {
                    limit = {
                        NOT = { has_variable = production_method@token:building_naval_industry }
                    }
                    set_variable = { production_method@token:building_naval_industry = controller:latest_production_method@token:building_naval_industry }
                }
            }
        #

		for_each_loop = {
			array = buildings
			value = bu_token
			index = ind
			break = ind_break

			building_update = yes

			add_to_variable = { jobs_buildings = jobs@var:bu_token }
			add_to_variable = { employed_buildings = employed@var:bu_token }

            if = {
                limit = {
                    NOT = { check_variable = { bu_token = token:building_subsistence_farm } }
                    NOT = { check_variable = { bu_token = token:building_rice_paddy } }
                }
			    add_to_variable = { total_building_amount = size@var:bu_token }
                add_to_variable = { non_subs_jobs_buildings = jobs@var:bu_token }
                add_to_variable = { non_subs_employed_buildings = employed@var:bu_token }
            }
		}
    }
    building_update = {
        #bu_token

		set_temp_variable = { bu_resource_1 = global.building_output_resource_1@var:bu_token }
		set_temp_variable = { bu_resource_2 = global.building_output_resource_2@var:bu_token }
		set_temp_variable = { bu_resource_3 = global.building_output_resource_3@var:bu_token }
		set_temp_variable = { bu_resource_4 = global.building_output_resource_4@var:bu_token }
		set_temp_variable = { bu_resource_5 = global.building_output_resource_5@var:bu_token }

        # Building Era
			if = { #Basic
				limit = {
					check_variable = { production_method@var:bu_token = 0 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_basic_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_basic_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_basic_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_basic_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_basic_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_basic_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_basic_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_basic_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_basic_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_basic_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_basic_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_basic_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_basic_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_basic_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_basic_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_basic_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_basic_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_basic_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_basic_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_basic_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_basic_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_basic_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_basic_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_basic_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_basic_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_basic_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Advanced
				limit = {
					check_variable = { production_method@var:bu_token = 1 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_advanced_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_advanced_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_advanced_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_advanced_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_advanced_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_advanced_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_advanced_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_advanced_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_advanced_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_advanced_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_advanced_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_advanced_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_advanced_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_advanced_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_advanced_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_advanced_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_advanced_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_advanced_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_advanced_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_advanced_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_advanced_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_advanced_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_advanced_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_advanced_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_advanced_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_advanced_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Industrialized
				limit = {
					check_variable = { production_method@var:bu_token = 2 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_industrialized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_industrialized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_industrialized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_industrialized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_industrialized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_industrialized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_industrialized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_industrialized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_industrialized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_industrialized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_industrialized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_industrialized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_industrialized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_industrialized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_industrialized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_industrialized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_industrialized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_industrialized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_industrialized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_industrialized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_industrialized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_industrialized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_industrialized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_industrialized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_industrialized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_industrialized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Mechanized
				limit = {
					check_variable = { production_method@var:bu_token = 3 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_mechanized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_mechanized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_mechanized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_mechanized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_mechanized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_mechanized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_mechanized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_mechanized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_mechanized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_mechanized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_mechanized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_mechanized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_mechanized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_mechanized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_mechanized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_mechanized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_mechanized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_mechanized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_mechanized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_mechanized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_mechanized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_mechanized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_mechanized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_mechanized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_mechanized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_mechanized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Electrified
				limit = {
					check_variable = { production_method@var:bu_token = 4 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_electrified_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_electrified_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_electrified_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_electrified_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_electrified_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_electrified_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_electrified_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_electrified_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_electrified_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_electrified_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_electrified_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_electrified_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_electrified_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_electrified_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_electrified_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_electrified_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_electrified_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_electrified_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_electrified_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_electrified_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_electrified_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_electrified_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_electrified_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_electrified_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_electrified_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_electrified_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Motorized
				limit = {
					check_variable = { production_method@var:bu_token = 5 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_motorized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_motorized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_motorized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_motorized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_motorized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_motorized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_motorized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_motorized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_motorized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_motorized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_motorized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_motorized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_motorized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_motorized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_motorized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_motorized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_motorized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_motorized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_motorized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_motorized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_motorized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_motorized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_motorized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_motorized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_motorized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_motorized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Modernized
				limit = {
					check_variable = { production_method@var:bu_token = 6 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_modernized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_modernized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_modernized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_modernized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_modernized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_modernized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_modernized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_modernized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_modernized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_modernized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_modernized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_modernized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_modernized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_modernized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_modernized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_modernized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_modernized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_modernized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_modernized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_modernized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_modernized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_modernized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_modernized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_modernized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_modernized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_modernized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Roboticized
				limit = {
					check_variable = { production_method@var:bu_token = 7 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_roboticized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_roboticized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_roboticized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_roboticized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_roboticized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_roboticized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_roboticized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_roboticized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_roboticized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_roboticized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_roboticized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_roboticized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_roboticized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_roboticized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_roboticized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_roboticized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_roboticized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_roboticized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_roboticized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_roboticized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_roboticized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_roboticized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_roboticized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_roboticized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_roboticized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_roboticized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Computerized
				limit = {
					check_variable = { production_method@var:bu_token = 8 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_computerized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_computerized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_computerized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_computerized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_computerized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_computerized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_computerized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_computerized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_computerized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_computerized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_computerized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_computerized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_computerized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_computerized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_computerized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_computerized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_computerized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_computerized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_computerized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_computerized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_computerized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_computerized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_computerized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_computerized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_computerized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_computerized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Digitalized
				limit = {
					check_variable = { production_method@var:bu_token = 9 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_digitalized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_digitalized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_digitalized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_digitalized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_digitalized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_digitalized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_digitalized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_digitalized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_digitalized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_digitalized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_digitalized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_digitalized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_digitalized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_digitalized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_digitalized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_digitalized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_digitalized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_digitalized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_digitalized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_digitalized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_digitalized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_digitalized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_digitalized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_digitalized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_digitalized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_digitalized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Automatized
				limit = {
					check_variable = { production_method@var:bu_token = 10 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_automatized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_automatized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_automatized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_automatized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_automatized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_automatized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_automatized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_automatized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_automatized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_automatized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_automatized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_automatized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_automatized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_automatized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_automatized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_automatized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_automatized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_automatized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_automatized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_automatized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_automatized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_automatized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_automatized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_automatized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_automatized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_automatized_output_industrial_capacity@var:bu_token }
			}
			else_if = { #Futurized
				limit = {
					check_variable = { production_method@var:bu_token = 11 }
				}
                # Jobs
				set_variable = { peasants_jobs@var:bu_token = global.building_futurized_peasants_employment@var:bu_token }
				set_variable = { laborers_jobs@var:bu_token = global.building_futurized_laborers_employment@var:bu_token }
				set_variable = { workers_jobs@var:bu_token = global.building_futurized_workers_employment@var:bu_token }
				set_variable = { professionals_jobs@var:bu_token = global.building_futurized_professionals_employment@var:bu_token }
				set_variable = { specialists_jobs@var:bu_token = global.building_futurized_specialists_employment@var:bu_token }
				set_variable = { aristocrats_jobs@var:bu_token = global.building_futurized_aristocrats_employment@var:bu_token }
				set_variable = { capitalists_jobs@var:bu_token = global.building_futurized_capitalists_employment@var:bu_token }
                set_variable = { payroll_multiplier@var:bu_token = global.building_futurized_payroll_multiplier@var:bu_token }

                # Max Production
                set_variable = { max_production_1@var:bu_token = global.building_futurized_output_1@var:bu_token }
                set_variable = { max_production_2@var:bu_token = global.building_futurized_output_2@var:bu_token }
                set_variable = { max_production_3@var:bu_token = global.building_futurized_output_3@var:bu_token }
                set_variable = { max_production_4@var:bu_token = global.building_futurized_output_4@var:bu_token }
                set_variable = { max_production_5@var:bu_token = global.building_futurized_output_5@var:bu_token }
                
                # Inputs
                set_variable = { input_1_type@var:bu_token = global.building_futurized_input_resource_1@var:bu_token }
                set_variable = { input_2_type@var:bu_token = global.building_futurized_input_resource_2@var:bu_token }
                set_variable = { input_3_type@var:bu_token = global.building_futurized_input_resource_3@var:bu_token }
                set_variable = { input_4_type@var:bu_token = global.building_futurized_input_resource_4@var:bu_token }
                set_variable = { input_5_type@var:bu_token = global.building_futurized_input_resource_5@var:bu_token }

                set_variable = { input_1_amount@var:bu_token = global.building_futurized_input_amount_1@var:bu_token }
                set_variable = { input_2_amount@var:bu_token = global.building_futurized_input_amount_2@var:bu_token }
                set_variable = { input_3_amount@var:bu_token = global.building_futurized_input_amount_3@var:bu_token }
                set_variable = { input_4_amount@var:bu_token = global.building_futurized_input_amount_4@var:bu_token }
                set_variable = { input_5_amount@var:bu_token = global.building_futurized_input_amount_5@var:bu_token }

                # Capacities
				set_variable = { industrial_capacity_use@var:bu_token = global.building_futurized_industrial_capacity_use@var:bu_token }
				set_variable = { shipping_capacity@var:bu_token = global.building_futurized_output_shipping_capacity@var:bu_token }
				set_variable = { industrial_capacity@var:bu_token = global.building_futurized_output_industrial_capacity@var:bu_token }
			}

        #

        set_temp_variable = { input_r_1 = input_1_type@var:bu_token }
        set_temp_variable = { input_r_2 = input_2_type@var:bu_token }
        set_temp_variable = { input_r_3 = input_3_type@var:bu_token }
        set_temp_variable = { input_r_4 = input_4_type@var:bu_token }
        set_temp_variable = { input_r_5 = input_5_type@var:bu_token }

        # Modifiers
            set_temp_variable = { size_modifier_temp = building_size_factor@var:bu_token }
            add_to_temp_variable = { size_modifier_temp = 1 }

			set_temp_variable = { output_modifier_temp = building_output_factor@var:bu_token }
			add_to_temp_variable = { output_modifier_temp = 1 }

			set_temp_variable = { throughput_modifier_temp = building_throughput_factor@var:bu_token }
			add_to_temp_variable = { throughput_modifier_temp = 1 }

			set_temp_variable = { input_modifier_temp = building_input_factor@var:bu_token }
			add_to_temp_variable = { input_modifier_temp = 1 }
        #

        # Reset to 0
			set_variable = { jobs@var:bu_token = 0 }
			set_variable = { jobs_available@var:bu_token = 0 }
			set_variable = { employed@var:bu_token = 0 }
			set_variable = { expenses_payroll@var:bu_token = 0 }

			set_variable = { money_limit@var:bu_token = 0 }
            
            set_temp_variable = { revenue_temp = 0 }
            set_temp_variable = { expenses_temp = 0 }
        #

        if = { # Peasants
            limit = {
                check_variable = { peasants_jobs@var:bu_token > 0 }
            }
            multiply_variable = { peasants_jobs@var:bu_token = size@var:bu_token }
			multiply_variable = { peasants_jobs@var:bu_token = size_modifier_temp }
            if = {
                limit = {
                    check_variable = { peasants_jobs@var:bu_token > 10000 }
                }
                set_variable = { peasants_employed@var:bu_token = peasants_jobs@var:bu_token }
                divide_variable = { peasants_employed@var:bu_token = 100 }
                multiply_variable = { peasants_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { peasants_employed@var:bu_token = 100 }
                multiply_variable = { peasants_employed@var:bu_token = peasants_job_fulfillment }
            }
            else = {
                set_variable = { peasants_employed@var:bu_token = peasants_jobs@var:bu_token }
                multiply_variable = { peasants_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { peasants_employed@var:bu_token = 100 }
                multiply_variable = { peasants_employed@var:bu_token = peasants_job_fulfillment }
                divide_variable = { peasants_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = peasants_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = peasants_employed@var:bu_token }
        }
        else = {
            set_variable = { peasants_employed@var:bu_token = 0 }
        }

        if = { # Laborers
            limit = {
                check_variable = { laborers_jobs@var:bu_token > 0 }
            }
            multiply_variable = { laborers_jobs@var:bu_token = size@var:bu_token }
			multiply_variable = { laborers_jobs@var:bu_token = size_modifier_temp }
            if = {
                limit = {
                    check_variable = { laborers_jobs@var:bu_token > 10000 }
                }
                set_variable = { laborers_employed@var:bu_token = laborers_jobs@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = laborers_job_fulfillment }
            }
            else = {
                set_variable = { laborers_employed@var:bu_token = laborers_jobs@var:bu_token }
                multiply_variable = { laborers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { laborers_employed@var:bu_token = 100 }
                multiply_variable = { laborers_employed@var:bu_token = laborers_job_fulfillment }
                divide_variable = { laborers_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = laborers_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = laborers_employed@var:bu_token }
        }
        else = {
            set_variable = { laborers_employed@var:bu_token = 0 }
        }

        if = { # Workers
            limit = {
                check_variable = { workers_jobs@var:bu_token > 0 }
            }
            multiply_variable = { workers_jobs@var:bu_token = size@var:bu_token }
			multiply_variable = { workers_jobs@var:bu_token = size_modifier_temp }
            if = {
                limit = {
                    check_variable = { workers_jobs@var:bu_token > 10000 }
                }
                set_variable = { workers_employed@var:bu_token = workers_jobs@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = workers_job_fulfillment }
            }
            else = {
                set_variable = { workers_employed@var:bu_token = workers_jobs@var:bu_token }
                multiply_variable = { workers_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { workers_employed@var:bu_token = 100 }
                multiply_variable = { workers_employed@var:bu_token = workers_job_fulfillment }
                divide_variable = { workers_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = workers_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = workers_employed@var:bu_token }
        }
        else = {
            set_variable = { workers_employed@var:bu_token = 0 }
        }

        if = { # Professionals
            limit = {
                check_variable = { professionals_jobs@var:bu_token > 0 }
            }
            multiply_variable = { professionals_jobs@var:bu_token = size@var:bu_token }
			multiply_variable = { professionals_jobs@var:bu_token = size_modifier_temp }
            if = {
                limit = {
                    check_variable = { professionals_jobs@var:bu_token > 10000 }
                }
                set_variable = { professionals_employed@var:bu_token = professionals_jobs@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = professionals_job_fulfillment }
            }
            else = {
                set_variable = { professionals_employed@var:bu_token = professionals_jobs@var:bu_token }
                multiply_variable = { professionals_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { professionals_employed@var:bu_token = 100 }
                multiply_variable = { professionals_employed@var:bu_token = professionals_job_fulfillment }
                divide_variable = { professionals_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = professionals_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = professionals_employed@var:bu_token }
        }
        else = {
            set_variable = { professionals_employed@var:bu_token = 0 }
        }

        if = { # Specialists
            limit = {
                check_variable = { specialists_jobs@var:bu_token > 0 }
            }
            multiply_variable = { specialists_jobs@var:bu_token = size@var:bu_token }
			multiply_variable = { specialists_jobs@var:bu_token = size_modifier_temp }
            if = {
                limit = {
                    check_variable = { specialists_jobs@var:bu_token > 10000 }
                }
                set_variable = { specialists_employed@var:bu_token = specialists_jobs@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = specialists_job_fulfillment }
            }
            else = {
                set_variable = { specialists_employed@var:bu_token = specialists_jobs@var:bu_token }
                multiply_variable = { specialists_employed@var:bu_token = employment_target@var:bu_token }
                divide_variable = { specialists_employed@var:bu_token = 100 }
                multiply_variable = { specialists_employed@var:bu_token = specialists_job_fulfillment }
                divide_variable = { specialists_employed@var:bu_token = 100 }
            }

			add_to_variable = { jobs@var:bu_token = specialists_jobs@var:bu_token }
			add_to_variable = { employed@var:bu_token = specialists_employed@var:bu_token }
        }
        else = {
            set_variable = { specialists_employed@var:bu_token = 0 }
        }

		#Employment/Production Percentage
			set_variable = { employment_percentage@var:bu_token = employed@var:bu_token }
            if = {
                limit = {
                    check_variable = { employment_percentage@var:bu_token < 1000 }
                }
                multiply_variable = { employment_percentage@var:bu_token = 100 }
                divide_variable = { employment_percentage@var:bu_token = jobs@var:bu_token }
            }
            else = {
                divide_variable = { employment_percentage@var:bu_token = jobs@var:bu_token }
                multiply_variable = { employment_percentage@var:bu_token = 100 }
            }

            set_temp_variable = { total_prod_temp = 0 }
            set_temp_variable = { production_temp = peasants_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 1 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = laborers_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 2 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = workers_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 5 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = professionals_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 10 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            set_temp_variable = { production_temp = specialists_employed@var:bu_token }
            multiply_temp_variable = { production_temp = 20 }
            add_to_temp_variable = { total_prod_temp = production_temp }
            if = {
                limit = {
                    check_variable = { total_prod_temp > 10000 }
                }
                divide_temp_variable = { total_prod_temp = payroll_multiplier@var:bu_token }
                divide_temp_variable = { total_prod_temp = size@var:bu_token }
                multiply_temp_variable = { total_prod_temp = 100 }
            }
            else = {
                multiply_temp_variable = { total_prod_temp = 100 }
                divide_temp_variable = { total_prod_temp = payroll_multiplier@var:bu_token }
                divide_temp_variable = { total_prod_temp = size@var:bu_token }
            }
            set_variable = { production_percentage@var:bu_token = total_prod_temp }
		#
            
        #Capacities
            set_variable = { industrial_capacity_use@var:bu_token = global.building_industrial_capacity_use@var:bu_token } # remove
            multiply_variable = { industrial_capacity_use@var:bu_token = size@var:bu_token }
            set_temp_variable = { cap_modifier_temp = building_industrial_capacity_use_factor@var:bu_token }
            add_to_temp_variable = { cap_modifier_temp = 1 }
            multiply_variable = { industrial_capacity_use@var:bu_token = cap_modifier_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = input_modifier_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = throughput_modifier_temp }
            multiply_variable = { industrial_capacity_use@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { industrial_capacity_use@var:bu_token = 100 }

            multiply_variable = { shipping_capacity@var:bu_token = size@var:bu_token }
            multiply_variable = { industrial_capacity@var:bu_token = size@var:bu_token }
            multiply_variable = { shipping_capacity@var:bu_token = output_modifier_temp }
            multiply_variable = { industrial_capacity@var:bu_token = output_modifier_temp }
            multiply_variable = { shipping_capacity@var:bu_token = throughput_modifier_temp }
            multiply_variable = { industrial_capacity@var:bu_token = throughput_modifier_temp }

            set_variable = { max_industrial_capacity@var:bu_token = industrial_capacity@var:bu_token }

            multiply_variable = { shipping_capacity@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { shipping_capacity@var:bu_token = 100 }
            multiply_variable = { industrial_capacity@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { industrial_capacity@var:bu_token = 100 }
        #

        if = { # Government-Controlled Enterprises (Mils/Civs/Dockyards)
            limit = {
                check_variable = { global.building_government_control@var:bu_token = 1 }
            }

            set_variable = { expenses_payroll@var:bu_token = size@var:bu_token }
            multiply_variable = { expenses_payroll@var:bu_token = production_percentage@var:bu_token }
            divide_variable = { expenses_payroll@var:bu_token = 100 }
            multiply_variable = { expenses_payroll@var:bu_token = base_wage }
            multiply_variable = { expenses_payroll@var:bu_token = payroll_multiplier@var:bu_token }
            
            set_variable = { expenses_industrial_capacity@var:bu_token = industrial_capacity_use@var:bu_token }
            multiply_variable = { expenses_industrial_capacity@var:bu_token = price_industrial_capacity }

            set_variable = { expenses@var:bu_token = expenses_payroll@var:bu_token }
            add_to_variable = { expenses@var:bu_token = expenses_industrial_capacity@var:bu_token }

            set_variable = { revenue@var:bu_token = expenses@var:bu_token }
            set_variable = { revenue_subsidies@var:bu_token = expenses@var:bu_token }
            

            set_variable = { productivity@var:bu_token = expenses@var:bu_token }
            divide_variable = { productivity@var:bu_token = jobs@var:bu_token }
            set_variable = { average_wage@var:bu_token = productivity@var:bu_token }
            
            set_variable = { base_productivity@var:bu_token = expenses@var:bu_token }
            divide_variable = { base_productivity@var:bu_token = payroll_multiplier@var:bu_token }
            divide_variable = { base_productivity@var:bu_token = size@var:bu_token }
        }
        else = {
            # Output 1 - Always does output 1
                multiply_variable = { max_production_1@var:bu_token = size@var:bu_token }
                multiply_variable = { max_production_1@var:bu_token = output_modifier_temp }
                multiply_variable = { max_production_1@var:bu_token = throughput_modifier_temp }
                
                set_variable = { production_1@var:bu_token = max_production_1@var:bu_token }
                multiply_variable = { production_1@var:bu_token = production_percentage@var:bu_token }
                divide_variable = { production_1@var:bu_token = 100 }

                set_temp_variable = { money_limit_temp = global.building_money_limit }
                multiply_temp_variable = { money_limit_temp = global.base_price@var:bu_resource_1 }
                multiply_temp_variable = { money_limit_temp = max_production_1@var:bu_token }
                
                set_temp_variable = { rev_g_temp = max_production_1@var:bu_token }
                multiply_temp_variable = { rev_g_temp = price@var:bu_resource_1 }
                
                set_variable = { revenue_goods_1@var:bu_token = production_1@var:bu_token }
                multiply_variable = { revenue_goods_1@var:bu_token = price@var:bu_resource_1 }

                add_to_variable = { money_limit@var:bu_token = money_limit_temp }
                add_to_temp_variable = { revenue_temp = rev_g_temp }
                set_variable = { revenue_goods@var:bu_token = revenue_goods_1@var:bu_token }
            #

            if = { # Output 2-5
                limit = {
                    check_variable = { max_production_2@var:bu_token > 0 }
                }
                multiply_variable = { max_production_2@var:bu_token = size@var:bu_token }
                multiply_variable = { max_production_2@var:bu_token = output_modifier_temp }
                multiply_variable = { max_production_2@var:bu_token = throughput_modifier_temp }
                
                set_variable = { production_2@var:bu_token = max_production_2@var:bu_token }
                multiply_variable = { production_2@var:bu_token = production_percentage@var:bu_token }
                divide_variable = { production_2@var:bu_token = 100 }

                set_temp_variable = { money_limit_temp = global.building_money_limit }
                multiply_temp_variable = { money_limit_temp = global.base_price@var:bu_resource_2 }
                multiply_temp_variable = { money_limit_temp = max_production_2@var:bu_token }
                
                set_temp_variable = { rev_g_temp = max_production_2@var:bu_token }
                multiply_temp_variable = { rev_g_temp = price@var:bu_resource_2 }
                
                set_variable = { revenue_goods_2@var:bu_token = production_2@var:bu_token }
                multiply_variable = { revenue_goods_2@var:bu_token = price@var:bu_resource_2 }
                
                add_to_variable = { money_limit@var:bu_token = money_limit_temp }
                add_to_temp_variable = { revenue_temp = rev_g_temp }
                add_to_variable = { revenue_goods@var:bu_token = revenue_goods_2@var:bu_token }
                
                if = { # Output 3
                    limit = {
                        check_variable = { max_production_3@var:bu_token > 0 }
                    }
                    multiply_variable = { max_production_3@var:bu_token = size@var:bu_token }
                    multiply_variable = { max_production_3@var:bu_token = output_modifier_temp }
                    multiply_variable = { max_production_3@var:bu_token = throughput_modifier_temp }
                    
                    set_variable = { production_3@var:bu_token = max_production_3@var:bu_token }
                    multiply_variable = { production_3@var:bu_token = production_percentage@var:bu_token }
                    divide_variable = { production_3@var:bu_token = 100 }

                    set_temp_variable = { money_limit_temp = global.building_money_limit }
                    multiply_temp_variable = { money_limit_temp = global.base_price@var:bu_resource_3 }
                    multiply_temp_variable = { money_limit_temp = max_production_3@var:bu_token }
                    
                    set_temp_variable = { rev_g_temp = max_production_3@var:bu_token }
                    multiply_temp_variable = { rev_g_temp = price@var:bu_resource_3 }
                    
                    set_variable = { revenue_goods_3@var:bu_token = production_3@var:bu_token }
                    multiply_variable = { revenue_goods_3@var:bu_token = price@var:bu_resource_3 }
                    
                    add_to_variable = { money_limit@var:bu_token = money_limit_temp }
                    add_to_temp_variable = { revenue_temp = rev_g_temp }
                    add_to_variable = { revenue_goods@var:bu_token = revenue_goods_3@var:bu_token }
                    
                    if = { # Output 4
                        limit = {
                            check_variable = { max_production_4@var:bu_token > 0 }
                        }
                        multiply_variable = { max_production_4@var:bu_token = size@var:bu_token }
                        multiply_variable = { max_production_4@var:bu_token = output_modifier_temp }
                        multiply_variable = { max_production_4@var:bu_token = throughput_modifier_temp }
                        
                        set_variable = { production_4@var:bu_token = max_production_4@var:bu_token }
                        multiply_variable = { production_4@var:bu_token = production_percentage@var:bu_token }
                        divide_variable = { production_4@var:bu_token = 100 }

                        set_temp_variable = { money_limit_temp = global.building_money_limit }
                        multiply_temp_variable = { money_limit_temp = global.base_price@var:bu_resource_4 }
                        multiply_temp_variable = { money_limit_temp = max_production_4@var:bu_token }
                        
                        set_temp_variable = { rev_g_temp = max_production_4@var:bu_token }
                        multiply_temp_variable = { rev_g_temp = price@var:bu_resource_4 }
                        
                        set_variable = { revenue_goods_4@var:bu_token = production_4@var:bu_token }
                        multiply_variable = { revenue_goods_4@var:bu_token = price@var:bu_resource_4 }
                        
                        add_to_variable = { money_limit@var:bu_token = money_limit_temp }
                        add_to_temp_variable = { revenue_temp = rev_g_temp }
                        add_to_variable = { revenue_goods@var:bu_token = revenue_goods_4@var:bu_token }

                        if = { # Output 5
                            limit = {
                                check_variable = { max_production_5@var:bu_token > 0 }
                            }
                            multiply_variable = { max_production_5@var:bu_token = size@var:bu_token }
                            multiply_variable = { max_production_5@var:bu_token = output_modifier_temp }
                            multiply_variable = { max_production_5@var:bu_token = throughput_modifier_temp }
                            
                            set_variable = { production_5@var:bu_token = max_production_5@var:bu_token }
                            multiply_variable = { production_5@var:bu_token = production_percentage@var:bu_token }
                            divide_variable = { production_5@var:bu_token = 100 }

                            set_temp_variable = { money_limit_temp = global.building_money_limit }
                            multiply_temp_variable = { money_limit_temp = global.base_price@var:bu_resource_5 }
                            multiply_temp_variable = { money_limit_temp = max_production_5@var:bu_token }
                            
                            set_temp_variable = { rev_g_temp = max_production_5@var:bu_token }
                            multiply_temp_variable = { rev_g_temp = price@var:bu_resource_5 }
                            
                            set_variable = { revenue_goods_5@var:bu_token = production_5@var:bu_token }
                            multiply_variable = { revenue_goods_5@var:bu_token = price@var:bu_resource_5 }
                            
                            add_to_variable = { money_limit@var:bu_token = money_limit_temp }
                            add_to_temp_variable = { revenue_temp = rev_g_temp }
                            add_to_variable = { revenue_goods@var:bu_token = revenue_goods_5@var:bu_token }
                        }
                        else = {
                            set_variable = { production_5@var:bu_token = 0 }
                            set_variable = { revenue_goods_5@var:bu_token = 0 }
                        }
                    }
                    else = {
                        set_variable = { production_4@var:bu_token = 0 }
                        set_variable = { revenue_goods_4@var:bu_token = 0 }

                        set_variable = { production_5@var:bu_token = 0 }
                        set_variable = { revenue_goods_5@var:bu_token = 0 }
                    }
                }
                else = {
                    set_variable = { production_3@var:bu_token = 0 }
                    set_variable = { revenue_goods_3@var:bu_token = 0 }

                    set_variable = { production_4@var:bu_token = 0 }
                    set_variable = { revenue_goods_4@var:bu_token = 0 }
                    
                    set_variable = { production_5@var:bu_token = 0 }
                    set_variable = { revenue_goods_5@var:bu_token = 0 }
                }
            }
            else = {
                set_variable = { production_2@var:bu_token = 0 }
                set_variable = { revenue_goods_2@var:bu_token = 0 }

                set_variable = { production_3@var:bu_token = 0 }
                set_variable = { revenue_goods_3@var:bu_token = 0 }
                
                set_variable = { production_4@var:bu_token = 0 }
                set_variable = { revenue_goods_4@var:bu_token = 0 }
                
                set_variable = { production_5@var:bu_token = 0 }
                set_variable = { revenue_goods_5@var:bu_token = 0 }
            }

            # Input 1 - Always does input 1
                multiply_variable = { input_1_amount@var:bu_token = size@var:bu_token }
                multiply_variable = { input_1_amount@var:bu_token = throughput_modifier_temp }
                multiply_variable = { input_1_amount@var:bu_token = input_modifier_temp }

                set_temp_variable = { exp_g_temp = input_1_amount@var:bu_token }
                multiply_temp_variable = { exp_g_temp = price@var:input_r_1 }
                
                multiply_variable = { input_1_amount@var:bu_token = production_percentage@var:bu_token }
                divide_variable = { input_1_amount@var:bu_token = 100 }

                set_variable = { input_1_expenses@var:bu_token = input_1_amount@var:bu_token }
                multiply_variable = { input_1_expenses@var:bu_token = price@var:input_r_1 }

                add_to_temp_variable = { expenses_temp = exp_g_temp }
                set_variable = { expenses_input@var:bu_token = input_1_expenses@var:bu_token }
            #

            if = { # Input 2-5
                limit = {
                    check_variable = { input_2_amount@var:bu_token > 0 }
                }
                multiply_variable = { input_2_amount@var:bu_token = size@var:bu_token }
                multiply_variable = { input_2_amount@var:bu_token = throughput_modifier_temp }
                multiply_variable = { input_2_amount@var:bu_token = input_modifier_temp }

                set_temp_variable = { exp_g_temp = input_2_amount@var:bu_token }
                multiply_temp_variable = { exp_g_temp = price@var:input_r_2 }
                
                multiply_variable = { input_2_amount@var:bu_token = production_percentage@var:bu_token }
                divide_variable = { input_2_amount@var:bu_token = 100 }

                set_variable = { input_2_expenses@var:bu_token = input_2_amount@var:bu_token }
                multiply_variable = { input_2_expenses@var:bu_token = price@var:input_r_2 }

                add_to_temp_variable = { expenses_temp = exp_g_temp }
                add_to_variable = { expenses_input@var:bu_token = input_2_expenses@var:bu_token }
                
                if = { # Input 3
                    limit = {
                        check_variable = { input_3_amount@var:bu_token > 0 }
                    }
                    multiply_variable = { input_3_amount@var:bu_token = size@var:bu_token }
                    multiply_variable = { input_3_amount@var:bu_token = throughput_modifier_temp }
                    multiply_variable = { input_3_amount@var:bu_token = input_modifier_temp }

                    set_temp_variable = { exp_g_temp = input_3_amount@var:bu_token }
                    multiply_temp_variable = { exp_g_temp = price@var:input_r_3 }
                    
                    multiply_variable = { input_3_amount@var:bu_token = production_percentage@var:bu_token }
                    divide_variable = { input_3_amount@var:bu_token = 100 }

                    set_variable = { input_3_expenses@var:bu_token = input_3_amount@var:bu_token }
                    multiply_variable = { input_3_expenses@var:bu_token = price@var:input_r_3 }

                    add_to_temp_variable = { expenses_temp = exp_g_temp }
                    add_to_variable = { expenses_input@var:bu_token = input_3_expenses@var:bu_token }
                    
                    if = { # Input 4
                        limit = {
                            check_variable = { input_4_amount@var:bu_token > 0 }
                        }
                        multiply_variable = { input_4_amount@var:bu_token = size@var:bu_token }
                        multiply_variable = { input_4_amount@var:bu_token = throughput_modifier_temp }
                        multiply_variable = { input_4_amount@var:bu_token = input_modifier_temp }

                        set_temp_variable = { exp_g_temp = input_4_amount@var:bu_token }
                        multiply_temp_variable = { exp_g_temp = price@var:input_r_4 }
                        
                        multiply_variable = { input_4_amount@var:bu_token = production_percentage@var:bu_token }
                        divide_variable = { input_4_amount@var:bu_token = 100 }

                        set_variable = { input_4_expenses@var:bu_token = input_4_amount@var:bu_token }
                        multiply_variable = { input_4_expenses@var:bu_token = price@var:input_r_4 }

                        add_to_temp_variable = { expenses_temp = exp_g_temp }
                        add_to_variable = { expenses_input@var:bu_token = input_4_expenses@var:bu_token }
                        
                        if = { # Input 5
                            limit = {
                                check_variable = { input_5_amount@var:bu_token > 0 }
                            }
                            multiply_variable = { input_5_amount@var:bu_token = size@var:bu_token }
                            multiply_variable = { input_5_amount@var:bu_token = throughput_modifier_temp }
                            multiply_variable = { input_5_amount@var:bu_token = input_modifier_temp }

                            set_temp_variable = { exp_g_temp = input_5_amount@var:bu_token }
                            multiply_temp_variable = { exp_g_temp = price@var:input_r_5 }
                            
                            multiply_variable = { input_5_amount@var:bu_token = production_percentage@var:bu_token }
                            divide_variable = { input_5_amount@var:bu_token = 100 }

                            set_variable = { input_5_expenses@var:bu_token = input_5_amount@var:bu_token }
                            multiply_variable = { input_5_expenses@var:bu_token = price@var:input_r_5 }

                            add_to_temp_variable = { expenses_temp = exp_g_temp }
                            add_to_variable = { expenses_input@var:bu_token = input_5_expenses@var:bu_token }
                            
                        }
                        else = {
                            set_variable = { input_5_expenses@var:bu_token = 0 }
                        }
                    }
                    else = {
                        set_variable = { input_4_expenses@var:bu_token = 0 }
                        set_variable = { input_5_expenses@var:bu_token = 0 }
                    }
                }
                else = {
                    set_variable = { input_3_expenses@var:bu_token = 0 }
                    set_variable = { input_4_expenses@var:bu_token = 0 }
                    set_variable = { input_5_expenses@var:bu_token = 0 }
                }
            }
            else = {
                set_variable = { input_2_expenses@var:bu_token = 0 }
                set_variable = { input_3_expenses@var:bu_token = 0 }
                set_variable = { input_4_expenses@var:bu_token = 0 }
                set_variable = { input_5_expenses@var:bu_token = 0 }
            }
            
            #Productivity
                set_temp_variable = { rev_temp = max_industrial_capacity@var:bu_token }
                multiply_temp_variable = { rev_temp = price_industrial_capacity }
                add_to_temp_variable = { revenue_temp = rev_temp }

                set_temp_variable = { exp_temp = industrial_capacity_use@var:bu_token }
                multiply_temp_variable = { exp_temp = price_industrial_capacity }
                add_to_temp_variable = { expenses_temp = exp_temp }

                set_variable = { productivity@var:bu_token = revenue_temp }
                subtract_from_variable = { productivity@var:bu_token = expenses_temp }
                divide_variable = { productivity@var:bu_token = jobs@var:bu_token }
                
                set_variable = { base_productivity@var:bu_token = revenue_temp }
                subtract_from_variable = { base_productivity@var:bu_token = expenses_temp }
                divide_variable = { base_productivity@var:bu_token = payroll_multiplier@var:bu_token }
                divide_variable = { base_productivity@var:bu_token = size@var:bu_token }
            #

            #Profit, Profitability, Revenue & Expenses
                if = {
                    limit = {
                        OR = {
                            check_variable = { bu_token = token:building_subsistence_farm }
                            check_variable = { bu_token = token:building_rice_paddy }
                        }
                    }
                    set_variable = { average_wage@var:bu_token = productivity@var:bu_token }
                    set_variable = { revenue@var:bu_token = revenue_goods@var:bu_token }
                    set_variable = { expenses_payroll@var:bu_token = revenue@var:bu_token }
                    set_variable = { expenses@var:bu_token = expenses_payroll@var:bu_token }
                    set_variable = { profit@var:bu_token = 0 }
                }
                else = {
                    set_variable = { revenue_industrial_capacity@var:bu_token = industrial_capacity@var:bu_token }
                    multiply_variable = { revenue_industrial_capacity@var:bu_token = price_industrial_capacity }

                    set_variable = { revenue@var:bu_token = revenue_goods@var:bu_token }
                    add_to_variable = { revenue@var:bu_token = revenue_industrial_capacity@var:bu_token }

                    #Expenses
                    set_variable = { expenses_industrial_capacity@var:bu_token = industrial_capacity_use@var:bu_token }
                    multiply_variable = { expenses_industrial_capacity@var:bu_token = price_industrial_capacity }

                    set_variable = { average_wage@var:bu_token = payroll_multiplier@var:bu_token }
                    multiply_variable = { average_wage@var:bu_token = size@var:bu_token }
                    multiply_variable = { average_wage@var:bu_token = base_wage }
                    divide_variable = { average_wage@var:bu_token = jobs@var:bu_token }
                    
                    set_variable = { expenses_payroll@var:bu_token = size@var:bu_token }
                    multiply_variable = { expenses_payroll@var:bu_token = production_percentage@var:bu_token }
                    divide_variable = { expenses_payroll@var:bu_token = 100 }
                    multiply_variable = { expenses_payroll@var:bu_token = base_wage }
                    multiply_variable = { expenses_payroll@var:bu_token = payroll_multiplier@var:bu_token }

                    set_variable = { expenses@var:bu_token = expenses_payroll@var:bu_token }
                    add_to_variable = { expenses@var:bu_token = expenses_input@var:bu_token }
                    add_to_variable = { expenses@var:bu_token = expenses_industrial_capacity@var:bu_token }

                    #Profit
                    set_variable = { profit@var:bu_token = revenue@var:bu_token }
                    subtract_from_variable = { profit@var:bu_token = expenses@var:bu_token }

                    #Subsidies - TODO
                    set_variable = { revenue_subsidies@var:bu_token = 0 }

                    add_to_variable = { revenue@var:bu_token = revenue_subsidies@var:bu_token }
                    add_to_variable = { profit@var:bu_token = revenue_subsidies@var:bu_token }


                    #Money Accumulation
                    set_variable = { money_accumulation@var:bu_token = profit@var:bu_token }
                    divide_variable = { money_accumulation@var:bu_token = 2 }
                    set_variable = { dividends@var:bu_token = profit@var:bu_token }
                    divide_variable = { dividends@var:bu_token = 2 }

                    set_temp_variable = { money_temp = money@var:bu_token }
                    add_to_temp_variable = { money_temp = money_accumulation@var:bu_token }
                    if = {
                        limit = {
                            check_variable = { money_temp > money_limit@var:bu_token }
                        }
                        subtract_from_temp_variable = { money_temp = money_limit@var:bu_token }
                        subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                        add_to_variable = { dividends@var:bu_token = money_temp }
                    }
                    if = {
                        limit = {
                            check_variable = { money_temp < 0 }
                        }
                        subtract_from_variable = { money_accumulation@var:bu_token = money_temp }
                        add_to_variable = { dividends@var:bu_token = money_temp }
                    }
                }

                #Profitability
                set_variable = { profitability@var:bu_token = profit@var:bu_token }
                divide_variable = { profitability@var:bu_token = revenue@var:bu_token }
            #
        }
    }

    buildings_update_construction = {
		clear_array = buildings_under_construction_array
		set_variable = { buildings_under_construction_amount = 0 }
		for_each_loop = {
			array = buildings
			value = om_building

			if = {
				limit = {
					check_variable = { under_construction@var:om_building > 0 }
				}
				add_to_array = { buildings_under_construction_array = om_building }
				add_to_variable = { buildings_under_construction_amount = under_construction@var:om_building }

                if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 0 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_basic_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 1 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_advanced_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 2 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_industrialized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 3 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_mechanized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 4 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_electrified_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 5 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_motorized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 6 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_modernized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 7 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_roboticized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 8 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_computerized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 9 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_digitalized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 10 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_automatized_construction_speed@var:om_building }
                }
                else_if = {
                    limit = {
                        check_variable = { production_method@var:om_building = 11 }
                    }
				    set_variable = { construction_speed@var:om_building = global.building_futurized_construction_speed@var:om_building }
                }
				multiply_variable = { construction_speed@var:om_building = under_construction@var:om_building }

				if = {
					limit = {
						check_variable = { construction_speed@var:om_building > construction_amount@var:om_building }
					}
					set_variable = { construction_speed@var:om_building = construction_amount@var:om_building }
				}

                set_temp_variable = { financer_temp = financer@var:om_building }
                if = {
                    limit = {
                        check_variable = { financer_temp < 0 } # Corporation
                    }
                }
                else_if = {
                    limit = {
                        check_variable = { financer_temp > 0 } # Government
                    }
                    multiply_variable = { construction_speed@var:om_building = financer_temp:construction_spending_percentage }
                    divide_variable = { construction_speed@var:om_building = 100 }
                }
                else = { # Local
                }

				set_variable = { construction_expenses@var:om_building = construction_speed@var:om_building }
				multiply_variable = { construction_expenses@var:om_building = price@token:resource_industrial_goods }
			}
            else = {
				set_variable = { construction_amount@var:om_building = 0 }
                set_variable = { construction_speed@var:om_building = 0 }
                set_variable = { construction_expenses@var:om_building = 0 }
            }
		}
    }
    refresh_construction_list = {
        clear_array = construction_show

        for_each_loop = {
            array = global.building_token_array
            value = building_token

            if = {
                limit = {
                    NOT = { is_in_array = { buildings = building_token } }
                }
                if = {
                    limit = {
                        check_variable = { controller:latest_production_method@var:building_token  > -1 }
                    }
                    set_variable = { production_method@var:building_token = controller:latest_production_method@var:building_token  }
                    if = {
                        limit = {
                            OR = {
                                check_variable = { global.building_uses_deposits@var:building_token = 0 }
                                AND = {
                                    check_variable = { global.building_uses_deposits@var:building_token = 1 }
                                    check_variable = { deposits@var:building_token > 0 }
                                }
                                has_global_flag = autobuild_flag
                            }
                            OR = {
                                check_variable = { global.building_uses_arable_land@var:building_token = 0 }
                                AND = {
                                    check_variable = { global.building_uses_arable_land@var:building_token = 1 }
                                    check_variable = { arable_land > arable_land_use }
                                }
                                has_global_flag = autobuild_flag
                            }
                            OR = {
                                check_variable = { global.building_coastal@var:building_token = 0 }
                                AND = {
                                    check_variable = { global.building_coastal@var:building_token = 1 }
                                    is_coastal = yes
                                }
                            }
                        }
                        add_to_array = { construction_show = building_token }
                    }
                }
            }
        }
    }

    buildings_update_base_latest_vals = {
        # First Step: Figure out revenues & expenses -> productivity of each industry

        for_each_loop = {
            array = global.building_token_array
            value = bu_token


            set_temp_variable = { bu_resource_1 = global.building_output_resource_1@var:bu_token }
            set_temp_variable = { bu_resource_2 = global.building_output_resource_2@var:bu_token }
            set_temp_variable = { bu_resource_3 = global.building_output_resource_3@var:bu_token }
            set_temp_variable = { bu_resource_4 = global.building_output_resource_4@var:bu_token }
            set_temp_variable = { bu_resource_5 = global.building_output_resource_5@var:bu_token }
                
            # Building Era
                if = { #Basic
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 0 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_basic_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_basic_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_basic_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_basic_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_basic_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_basic_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_basic_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_basic_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_basic_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_basic_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_basic_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_basic_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_basic_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_basic_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_basic_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_basic_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_basic_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_basic_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_basic_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_basic_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_basic_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_basic_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_basic_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_basic_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_basic_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_basic_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Advanced
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 1 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_advanced_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_advanced_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_advanced_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_advanced_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_advanced_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_advanced_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_advanced_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_advanced_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_advanced_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_advanced_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_advanced_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_advanced_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_advanced_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_advanced_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_advanced_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_advanced_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_advanced_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_advanced_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_advanced_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_advanced_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_advanced_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_advanced_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_advanced_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_advanced_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_advanced_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_advanced_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Industrialized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 2 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_industrialized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_industrialized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_industrialized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_industrialized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_industrialized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_industrialized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_industrialized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_industrialized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_industrialized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_industrialized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_industrialized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_industrialized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_industrialized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_industrialized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_industrialized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_industrialized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_industrialized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_industrialized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_industrialized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_industrialized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_industrialized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_industrialized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_industrialized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_industrialized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_industrialized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_industrialized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Mechanized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 3 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_mechanized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_mechanized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_mechanized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_mechanized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_mechanized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_mechanized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_mechanized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_mechanized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_mechanized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_mechanized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_mechanized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_mechanized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_mechanized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_mechanized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_mechanized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_mechanized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_mechanized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_mechanized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_mechanized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_mechanized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_mechanized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_mechanized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_mechanized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_mechanized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_mechanized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_mechanized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Electrified
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 4 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_electrified_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_electrified_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_electrified_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_electrified_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_electrified_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_electrified_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_electrified_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_electrified_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_electrified_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_electrified_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_electrified_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_electrified_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_electrified_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_electrified_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_electrified_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_electrified_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_electrified_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_electrified_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_electrified_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_electrified_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_electrified_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_electrified_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_electrified_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_electrified_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_electrified_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_electrified_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Motorized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 5 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_motorized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_motorized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_motorized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_motorized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_motorized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_motorized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_motorized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_motorized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_motorized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_motorized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_motorized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_motorized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_motorized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_motorized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_motorized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_motorized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_motorized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_motorized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_motorized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_motorized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_motorized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_motorized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_motorized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_motorized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_motorized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_motorized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Modernized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 6 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_modernized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_modernized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_modernized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_modernized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_modernized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_modernized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_modernized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_modernized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_modernized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_modernized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_modernized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_modernized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_modernized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_modernized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_modernized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_modernized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_modernized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_modernized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_modernized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_modernized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_modernized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_modernized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_modernized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_modernized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_modernized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_modernized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Roboticized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 7 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_roboticized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_roboticized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_roboticized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_roboticized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_roboticized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_roboticized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_roboticized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_roboticized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_roboticized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_roboticized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_roboticized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_roboticized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_roboticized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_roboticized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_roboticized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_roboticized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_roboticized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_roboticized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_roboticized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_roboticized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_roboticized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_roboticized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_roboticized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_roboticized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_roboticized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_roboticized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Computerized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 8 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_computerized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_computerized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_computerized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_computerized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_computerized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_computerized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_computerized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_computerized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_computerized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_computerized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_computerized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_computerized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_computerized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_computerized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_computerized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_computerized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_computerized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_computerized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_computerized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_computerized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_computerized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_computerized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_computerized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_computerized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_computerized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_computerized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Digitalized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 9 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_digitalized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_digitalized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_digitalized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_digitalized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_digitalized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_digitalized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_digitalized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_digitalized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_digitalized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_digitalized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_digitalized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_digitalized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_digitalized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_digitalized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_digitalized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_digitalized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_digitalized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_digitalized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_digitalized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_digitalized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_digitalized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_digitalized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_digitalized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_digitalized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_digitalized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_digitalized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Automatized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 10 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_automatized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_automatized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_automatized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_automatized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_automatized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_automatized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_automatized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_automatized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_automatized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_automatized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_automatized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_automatized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_automatized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_automatized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_automatized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_automatized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_automatized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_automatized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_automatized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_automatized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_automatized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_automatized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_automatized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_automatized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_automatized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_automatized_output_industrial_capacity@var:bu_token }
                }
                else_if = { #Futurized
                    limit = {
                        check_variable = { latest_production_method@var:bu_token = 11 }
                    }
                    # Jobs
                    set_variable = { peasants_jobs@var:bu_token = global.building_futurized_peasants_employment@var:bu_token }
                    set_variable = { laborers_jobs@var:bu_token = global.building_futurized_laborers_employment@var:bu_token }
                    set_variable = { workers_jobs@var:bu_token = global.building_futurized_workers_employment@var:bu_token }
                    set_variable = { professionals_jobs@var:bu_token = global.building_futurized_professionals_employment@var:bu_token }
                    set_variable = { specialists_jobs@var:bu_token = global.building_futurized_specialists_employment@var:bu_token }
                    set_variable = { aristocrats_jobs@var:bu_token = global.building_futurized_aristocrats_employment@var:bu_token }
                    set_variable = { capitalists_jobs@var:bu_token = global.building_futurized_capitalists_employment@var:bu_token }
                    set_variable = { payroll_multiplier@var:bu_token = global.building_futurized_payroll_multiplier@var:bu_token }

                    # Max Production
                    set_variable = { max_production_1@var:bu_token = global.building_futurized_output_1@var:bu_token }
                    set_variable = { max_production_2@var:bu_token = global.building_futurized_output_2@var:bu_token }
                    set_variable = { max_production_3@var:bu_token = global.building_futurized_output_3@var:bu_token }
                    set_variable = { max_production_4@var:bu_token = global.building_futurized_output_4@var:bu_token }
                    set_variable = { max_production_5@var:bu_token = global.building_futurized_output_5@var:bu_token }
                    
                    # Inputs
                    set_variable = { input_1_type@var:bu_token = global.building_futurized_input_resource_1@var:bu_token }
                    set_variable = { input_2_type@var:bu_token = global.building_futurized_input_resource_2@var:bu_token }
                    set_variable = { input_3_type@var:bu_token = global.building_futurized_input_resource_3@var:bu_token }
                    set_variable = { input_4_type@var:bu_token = global.building_futurized_input_resource_4@var:bu_token }
                    set_variable = { input_5_type@var:bu_token = global.building_futurized_input_resource_5@var:bu_token }

                    set_variable = { input_1_amount@var:bu_token = global.building_futurized_input_amount_1@var:bu_token }
                    set_variable = { input_2_amount@var:bu_token = global.building_futurized_input_amount_2@var:bu_token }
                    set_variable = { input_3_amount@var:bu_token = global.building_futurized_input_amount_3@var:bu_token }
                    set_variable = { input_4_amount@var:bu_token = global.building_futurized_input_amount_4@var:bu_token }
                    set_variable = { input_5_amount@var:bu_token = global.building_futurized_input_amount_5@var:bu_token }

                    # Capacities
                    set_variable = { industrial_capacity_use@var:bu_token = global.building_futurized_industrial_capacity_use@var:bu_token }
                    set_variable = { shipping_capacity@var:bu_token = global.building_futurized_output_shipping_capacity@var:bu_token }
                    set_variable = { industrial_capacity@var:bu_token = global.building_futurized_output_industrial_capacity@var:bu_token }
                }

            #

            set_temp_variable = { input_r_1 = input_1_type@var:bu_token }
            set_temp_variable = { input_r_2 = input_2_type@var:bu_token }
            set_temp_variable = { input_r_3 = input_3_type@var:bu_token }
            set_temp_variable = { input_r_4 = input_4_type@var:bu_token }
            set_temp_variable = { input_r_5 = input_5_type@var:bu_token }

            # Modifiers
                set_temp_variable = { output_modifier_temp = building_output_factor@var:bu_token }
                add_to_temp_variable = { output_modifier_temp = 1 }

                set_temp_variable = { throughput_modifier_temp = building_throughput_factor@var:bu_token }
                add_to_temp_variable = { throughput_modifier_temp = 1 }

                set_temp_variable = { input_modifier_temp = building_input_factor@var:bu_token }
                add_to_temp_variable = { input_modifier_temp = 1 }
            #

            set_variable = { jobs@var:bu_token = peasants_jobs@var:bu_token  }
            add_to_variable = { jobs@var:bu_token = laborers_jobs@var:bu_token }
            add_to_variable = { jobs@var:bu_token = workers_jobs@var:bu_token }
            add_to_variable = { jobs@var:bu_token = professionals_jobs@var:bu_token }
            add_to_variable = { jobs@var:bu_token = specialists_jobs@var:bu_token }
            add_to_variable = { jobs@var:bu_token = aristocrats_jobs@var:bu_token }
            add_to_variable = { jobs@var:bu_token = capitalists_jobs@var:bu_token }

            # Output 1 - Always does output 1
                multiply_variable = { max_production_1@var:bu_token = throughput_modifier_temp }
                multiply_variable = { max_production_1@var:bu_token = output_modifier_temp }

                set_variable = { revenue_goods_1@var:bu_token = max_production_1@var:bu_token }
                multiply_variable = { revenue_goods_1@var:bu_token = price@var:bu_resource_1 }
                
                set_variable = { revenue_goods@var:bu_token = revenue_goods_1@var:bu_token }
            #

            if = { # Output 2-5
                limit = {
                    check_variable = { max_production_2@var:bu_token > 0 }
                }
                multiply_variable = { max_production_2@var:bu_token = throughput_modifier_temp }
                multiply_variable = { max_production_2@var:bu_token = output_modifier_temp }

                set_variable = { revenue_goods_2@var:bu_token = max_production_2@var:bu_token }
                multiply_variable = { revenue_goods_2@var:bu_token = price@var:bu_resource_2 }

                add_to_variable = { revenue_goods@var:bu_token = revenue_goods_2@var:bu_token }
                
                if = { # Output 3
                    limit = {
                        check_variable = { max_production_3@var:bu_token > 0 }
                    }
                    multiply_variable = { max_production_3@var:bu_token = throughput_modifier_temp }
                    multiply_variable = { max_production_3@var:bu_token = output_modifier_temp }

                    set_variable = { revenue_goods_3@var:bu_token = max_production_3@var:bu_token }
                    multiply_variable = { revenue_goods_3@var:bu_token = price@var:bu_resource_3 }
                    
                    add_to_variable = { revenue_goods@var:bu_token = revenue_goods_3@var:bu_token }
                    
                    if = { # Output 4
                        limit = {
                            check_variable = { max_production_4@var:bu_token > 0 }
                        }
                        multiply_variable = { max_production_4@var:bu_token = throughput_modifier_temp }
                        multiply_variable = { max_production_4@var:bu_token = output_modifier_temp }

                        set_variable = { revenue_goods_4@var:bu_token = max_production_4@var:bu_token }
                        multiply_variable = { revenue_goods_4@var:bu_token = price@var:bu_resource_4 }
                        
                        add_to_variable = { revenue_goods@var:bu_token = revenue_goods_4@var:bu_token }

                        if = { # Output 5
                            limit = {
                                check_variable = { max_production_5@var:bu_token > 0 }
                            }
                            multiply_variable = { max_production_5@var:bu_token = throughput_modifier_temp }
                            multiply_variable = { max_production_5@var:bu_token = output_modifier_temp }

                            set_variable = { revenue_goods_5@var:bu_token = max_production_5@var:bu_token }
                            multiply_variable = { revenue_goods_5@var:bu_token = price@var:bu_resource_5 }
                            
                            add_to_variable = { revenue_goods@var:bu_token = revenue_goods_5@var:bu_token }
                        }
                        else = {
                            set_variable = { revenue_goods_5@var:bu_token = 0 }
                        }
                    }
                    else = {
                        set_variable = { revenue_goods_4@var:bu_token = 0 }
                        set_variable = { revenue_goods_5@var:bu_token = 0 }
                    }
                }
                else = {
                    set_variable = { revenue_goods_3@var:bu_token = 0 }
                    set_variable = { revenue_goods_4@var:bu_token = 0 }
                    set_variable = { revenue_goods_5@var:bu_token = 0 }
                }
            }
            else = {
                set_variable = { revenue_goods_2@var:bu_token = 0 }
                set_variable = { revenue_goods_3@var:bu_token = 0 }
                set_variable = { revenue_goods_4@var:bu_token = 0 }
                set_variable = { revenue_goods_5@var:bu_token = 0 }
            }

            # Input 1 - Always does input 1
                multiply_variable = { input_1_amount@var:bu_token = throughput_modifier_temp }
                multiply_variable = { input_1_amount@var:bu_token = input_modifier_temp }

                set_variable = { input_1_expenses@var:bu_token = input_1_amount@var:bu_token }
                multiply_variable = { input_1_expenses@var:bu_token = price@var:input_r_1 }
                set_variable = { expenses_input@var:bu_token = input_1_expenses@var:bu_token }
            #

            if = { # Input 2-5
                limit = {
                    check_variable = { input_2_amount@var:bu_token > 0 }
                }
                multiply_variable = { input_2_amount@var:bu_token = throughput_modifier_temp }
                multiply_variable = { input_2_amount@var:bu_token = input_modifier_temp }

                set_variable = { input_2_expenses@var:bu_token = input_2_amount@var:bu_token }
                multiply_variable = { input_2_expenses@var:bu_token = price@var:input_r_2 }
                add_to_variable = { expenses_input@var:bu_token = input_2_expenses@var:bu_token }
                
                if = { # Input 3
                    limit = {
                        check_variable = { input_3_amount@var:bu_token > 0 }
                    }
                    multiply_variable = { input_3_amount@var:bu_token = throughput_modifier_temp }
                    multiply_variable = { input_3_amount@var:bu_token = input_modifier_temp }

                    set_variable = { input_3_expenses@var:bu_token = input_3_amount@var:bu_token }
                    multiply_variable = { input_3_expenses@var:bu_token = price@var:input_r_3 }
                    add_to_variable = { expenses_input@var:bu_token = input_3_expenses@var:bu_token }
                    
                    if = { # Input 4
                        limit = {
                            check_variable = { input_4_amount@var:bu_token > 0 }
                        }
                        multiply_variable = { input_4_amount@var:bu_token = throughput_modifier_temp }
                        multiply_variable = { input_4_amount@var:bu_token = input_modifier_temp }

                        set_variable = { input_4_expenses@var:bu_token = input_4_amount@var:bu_token }
                        multiply_variable = { input_4_expenses@var:bu_token = price@var:input_r_4 }
                        add_to_variable = { expenses_input@var:bu_token = input_4_expenses@var:bu_token }
                        
                        if = { # Input 5
                            limit = {
                                check_variable = { input_5_amount@var:bu_token > 0 }
                            }
                            multiply_variable = { input_5_amount@var:bu_token = throughput_modifier_temp }
                            multiply_variable = { input_5_amount@var:bu_token = input_modifier_temp }

                            set_variable = { input_5_expenses@var:bu_token = input_5_amount@var:bu_token }
                            multiply_variable = { input_5_expenses@var:bu_token = price@var:input_r_5 }
                            add_to_variable = { expenses_input@var:bu_token = input_5_expenses@var:bu_token }
                            
                        }
                        else = {
                            set_variable = { input_5_expenses@var:bu_token = 0 }
                        }
                    }
                    else = {
                        set_variable = { input_4_expenses@var:bu_token = 0 }
                        set_variable = { input_5_expenses@var:bu_token = 0 }
                    }
                }
                else = {
                    set_variable = { input_3_expenses@var:bu_token = 0 }
                    set_variable = { input_4_expenses@var:bu_token = 0 }
                    set_variable = { input_5_expenses@var:bu_token = 0 }
                }
            }
            else = {
                set_variable = { input_2_expenses@var:bu_token = 0 }
                set_variable = { input_3_expenses@var:bu_token = 0 }
                set_variable = { input_4_expenses@var:bu_token = 0 }
                set_variable = { input_5_expenses@var:bu_token = 0 }
            }
            
            #Capacities
                set_variable = { industrial_capacity_use@var:bu_token = global.building_industrial_capacity_use@var:bu_token } # remove
                multiply_variable = { industrial_capacity_use@var:bu_token = throughput_modifier_temp }
                multiply_variable = { industrial_capacity_use@var:bu_token = input_modifier_temp }
                set_variable = { expenses_industrial_capacity@var:bu_token = industrial_capacity_use@var:bu_token }
                multiply_variable = { expenses_industrial_capacity@var:bu_token = global.base_price_industrial_capacity }

                multiply_variable = { industrial_capacity@var:bu_token = throughput_modifier_temp }
                multiply_variable = { industrial_capacity@var:bu_token = output_modifier_temp }
                set_variable = { revenue_industrial_capacity@var:bu_token = industrial_capacity@var:bu_token }
                multiply_variable = { revenue_industrial_capacity@var:bu_token = global.base_price_industrial_capacity }
            #
        
            #Productivity
                set_variable = { revenue@var:bu_token = revenue_goods@var:bu_token }
                add_to_variable = { revenue@var:bu_token = revenue_industrial_capacity@var:bu_token }

                set_variable = { expenses@var:bu_token = expenses_input@var:bu_token }
                add_to_variable = { expenses@var:bu_token = expenses_industrial_capacity@var:bu_token }

                set_variable = { productivity@var:bu_token = revenue@var:bu_token }
                subtract_from_variable = { productivity@var:bu_token = expenses@var:bu_token }
                divide_variable = { productivity@var:bu_token = jobs@var:bu_token }
                
                set_variable = { base_productivity@var:bu_token = revenue@var:bu_token }
                subtract_from_variable = { base_productivity@var:bu_token = expenses@var:bu_token }
                divide_variable = { base_productivity@var:bu_token = payroll_multiplier@var:bu_token }
            #
        }
    }
#

# Production Methods Update
    update_national_production_methods = {
        for_each_loop = { # Industries
            array = global.industry_token_array
            value = industry_token

            # UNLOCKED PRODUCTION METHODS
            set_variable = { latest_production_method@var:industry_token = 0 }
            clear_array = building_unlocked_pms@var:industry_token
            for_each_loop = {
                array = global.building_production_methods@var:industry_token
                value = pm_token
                if = {
                    limit = {
                        OR = {
                            check_variable = { global.pm_tech_unlock@var:pm_token = 0 }
                            AND = {
                                NOT = { check_variable = { global.pm_tech_unlock@var:pm_token = -1 } }
                                set_temp_variable = { tech_temp = global.pm_tech_unlock@var:pm_token }
                                has_tech = var:tech_temp
                            }
                        }
                    }
                    add_to_array = { building_unlocked_pms@var:industry_token = pm_token }
                    set_variable = { latest_production_method@var:industry_token = pm_token }
                }
            }
            # UNLOCKED AUTOMATION METHODS
            set_variable = { latest_automation_method@var:industry_token = 0 }
            clear_array = building_unlocked_ams@var:industry_token
            for_each_loop = {
                array = global.building_automation_methods@var:industry_token
                value = pm_token
                if = {
                    limit = {
                        OR = {
                            check_variable = { global.pm_tech_unlock@var:pm_token = 0 }
                            AND = {
                                NOT = { check_variable = { global.pm_tech_unlock@var:pm_token = -1 } }
                                set_temp_variable = { tech_temp = global.pm_tech_unlock@var:pm_token }
                                has_tech = var:tech_temp
                            }
                        }
                    }
                    add_to_array = { building_unlocked_ams@var:industry_token = pm_token }
                    set_variable = { latest_automation_method@var:industry_token = pm_token }
                }
            }
        }

        for_each_loop = { # Loop through PM token array to add them to country
            array = global.pm_token_array
            value = pm_token

            set_variable = { pm_output_multiplier@var:pm_token = global.pm_output_multiplier@var:pm_token }
            
            set_variable = { pm_shipping_capacity@var:pm_token = global.pm_shipping_capacity@var:pm_token }
            set_variable = { pm_industrial_capacity@var:pm_token = global.pm_industrial_capacity@var:pm_token }
            set_variable = { pm_industrial_capacity_use@var:pm_token = global.pm_industrial_capacity_use@var:pm_token }

            set_variable = { pm_construction_duration@var:pm_token = global.pm_construction_duration@var:pm_token }
            clear_array = pm_construction_input@var:pm_token
            clear_array = pm_construction_input_amount@var:pm_token
            for_each_loop = { # Add inputs
                array = global.pm_construction_input@var:pm_token
                value = input_token
                index = pm_input_i

                add_to_array = { pm_construction_input@var:pm_token = input_token }
                add_to_array = { pm_construction_input_amount@var:pm_token = global.pm_construction_input_amount@var:pm_token^pm_input_i }
            }

            set_variable = { pm_retooling_duration@var:pm_token = global.pm_retooling_duration@var:pm_token }
            
            clear_array = pm_input@var:pm_token
            clear_array = pm_input_amount@var:pm_token
            for_each_loop = { # Add inputs
                array = global.pm_input@var:pm_token
                value = input_token
                index = pm_input_i

                add_to_array = { pm_input@var:pm_token = input_token }
                add_to_array = { pm_input_amount@var:pm_token = global.pm_input_amount@var:pm_token^pm_input_i }
            }
            
            set_variable = { pm_workforce_peasants@var:pm_token = global.pm_workforce_peasants@var:pm_token }
            set_variable = { pm_workforce_laborers@var:pm_token = global.pm_workforce_laborers@var:pm_token }
            set_variable = { pm_workforce_workers@var:pm_token = global.pm_workforce_workers@var:pm_token }
            set_variable = { pm_workforce_professionals@var:pm_token = global.pm_workforce_professionals@var:pm_token }
            set_variable = { pm_workforce_specialists@var:pm_token = global.pm_workforce_specialists@var:pm_token }
        }

        # Apply Tech Modiifers
        # Govt
            add_to_variable = { pm_workforce_laborers@token:pm_arms_factory = modifier@pm_arms_factory_laborers_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_arms_factory = modifier@pm_arms_factory_workers_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_arms_factory = modifier@pm_arms_factory_professionals_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_arms_factory = modifier@pm_arms_factory_specialists_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_industrial_complex = modifier@pm_industrial_complex_laborers_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_industrial_complex = modifier@pm_industrial_complex_workers_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_industrial_complex = modifier@pm_industrial_complex_professionals_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_industrial_complex = modifier@pm_industrial_complex_specialists_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_dockyard = modifier@pm_dockyard_laborers_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_dockyard = modifier@pm_dockyard_workers_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_dockyard = modifier@pm_dockyard_professionals_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_dockyard = modifier@pm_dockyard_specialists_modifier }
        #
        # Infrastructure
            ## Infrastructure
            # Production
            add_to_variable = { pm_output_multiplier@token:pm_dirt_paths = modifier@pm_dirt_paths_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_dirt_paths = modifier@pm_dirt_paths_industrial_capacity_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_gravel_roads = modifier@pm_gravel_roads_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_gravel_roads = modifier@pm_gravel_roads_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_gravel_roads^0 = modifier@pm_gravel_roads_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_gravel_roads^1 = modifier@pm_gravel_roads_wood_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_paved_streets = modifier@pm_paved_streets_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_paved_streets = modifier@pm_paved_streets_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_paved_streets^0 = modifier@pm_paved_streets_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_paved_streets^1 = modifier@pm_paved_streets_consumer_goods_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_paved_streets^2 = modifier@pm_paved_streets_machinery_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_highways = modifier@pm_highways_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_highways = modifier@pm_highways_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_highways^0 = modifier@pm_highways_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_highways^1 = modifier@pm_highways_consumer_goods_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_highways^2 = modifier@pm_highways_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_highways^3 = modifier@pm_highways_steel_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_motorways = modifier@pm_motorways_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_motorways = modifier@pm_motorways_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_motorways^0 = modifier@pm_motorways_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_motorways^1 = modifier@pm_motorways_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_motorways^2 = modifier@pm_motorways_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_motorways^3 = modifier@pm_motorways_consumer_goods_input_modifier }

            ## Railways
            # Production
            add_to_variable = { pm_output_multiplier@token:pm_steam_locomotives = modifier@pm_steam_locomotives_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_steam_locomotives = modifier@pm_steam_locomotives_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^0 = modifier@pm_steam_locomotives_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^1 = modifier@pm_steam_locomotives_coal_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^2 = modifier@pm_steam_locomotives_iron_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^3 = modifier@pm_steam_locomotives_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^4 = modifier@pm_steam_locomotives_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_locomotives^5 = modifier@pm_steam_locomotives_tools_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_diesel_locomotives = modifier@pm_diesel_locomotives_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_diesel_locomotives = modifier@pm_diesel_locomotives_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_locomotives^0 = modifier@pm_diesel_locomotives_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_locomotives^1 = modifier@pm_diesel_locomotives_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_locomotives^2 = modifier@pm_diesel_locomotives_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_locomotives^3 = modifier@pm_diesel_locomotives_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_locomotives^4 = modifier@pm_diesel_locomotives_tools_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_electric_locomotives = modifier@pm_electric_locomotives_output_modifier }
            add_to_variable = { pm_industrial_capacity@token:pm_electric_locomotives = modifier@pm_electric_locomotives_industrial_capacity_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^0 = modifier@pm_electric_locomotives_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^1 = modifier@pm_electric_locomotives_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^2 = modifier@pm_electric_locomotives_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^3 = modifier@pm_electric_locomotives_electronics_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^4 = modifier@pm_electric_locomotives_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_locomotives^5 = modifier@pm_electric_locomotives_tools_input_modifier }

            # Automation

            ## Ports
            # Production

            # Automation
        #
        # Logging
            # Production
            add_to_variable = { pm_output_multiplier@token:pm_simple_forestry = modifier@pm_simple_forestry_output_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_saw_mills = modifier@pm_saw_mills_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_saw_mills = modifier@pm_saw_mills_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_saw_mills = modifier@pm_saw_mills_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_saw_mills = modifier@pm_saw_mills_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_saw_mills^0 = modifier@pm_saw_mills_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_saw_mills^1 = modifier@pm_saw_mills_tools_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_chainsaws = modifier@pm_chainsaws_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_chainsaws = modifier@pm_chainsaws_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_chainsaws = modifier@pm_chainsaws_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_chainsaws = modifier@pm_chainsaws_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_chainsaws^0 = modifier@pm_chainsaws_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_chainsaws^1 = modifier@pm_chainsaws_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_chainsaws^2 = modifier@pm_chainsaws_oil_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_precision_forestry = modifier@pm_precision_forestry_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_precision_forestry = modifier@pm_precision_forestry_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_precision_forestry = modifier@pm_precision_forestry_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_precision_forestry = modifier@pm_precision_forestry_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_forestry^0 = modifier@pm_precision_forestry_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_forestry^1 = modifier@pm_precision_forestry_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_forestry^2 = modifier@pm_precision_forestry_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_forestry^3 = modifier@pm_precision_forestry_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_forestry^4 = modifier@pm_precision_forestry_tools_input_modifier }

            # Automation
            add_to_variable = { pm_workforce_laborers@token:pm_river_power = modifier@pm_river_power_laborers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_river_power^0 = modifier@pm_river_power_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_river_power^1 = modifier@pm_river_power_wood_input_modifier }

            add_to_variable = { pm_workforce_laborers@token:pm_steam_power = modifier@pm_steam_power_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_steam_power = modifier@pm_steam_power_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_power^0 = modifier@pm_steam_power_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_power^1 = modifier@pm_steam_power_coal_input_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_diesel_power = modifier@pm_diesel_power_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_diesel_power = modifier@pm_diesel_power_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_power^0 = modifier@pm_diesel_power_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_diesel_power^1 = modifier@pm_diesel_power_oil_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_electrical_power = modifier@pm_electrical_power_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_electrical_power = modifier@pm_electrical_power_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_electrical_power^0 = modifier@pm_electrical_power_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electrical_power^1 = modifier@pm_electrical_power_electronics_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electrical_power^2 = modifier@pm_electrical_power_electricity_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_logging_machines = modifier@pm_logging_machines_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_logging_machines = modifier@pm_logging_machines_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_logging_machines^0 = modifier@pm_logging_machines_vehicles_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_logging_machines^1 = modifier@pm_logging_machines_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_logging_machines^2 = modifier@pm_logging_machines_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_logging_machines^3 = modifier@pm_logging_machines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_logging_machines^4 = modifier@pm_logging_machines_electronics_input_modifier }
        #
        # Mining
            # Production
            add_to_variable = { pm_output_multiplier@token:pm_basic_extraction = modifier@pm_basic_extraction_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_basic_extraction = modifier@pm_basic_extraction_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_basic_extraction = modifier@pm_basic_extraction_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_basic_extraction = modifier@pm_basic_extraction_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_basic_extraction^0 = modifier@pm_basic_extraction_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_basic_extraction^1 = modifier@pm_basic_extraction_tools_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_shaft_mining = modifier@pm_shaft_mining_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_shaft_mining = modifier@pm_shaft_mining_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_shaft_mining = modifier@pm_shaft_mining_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_shaft_mining = modifier@pm_shaft_mining_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_shaft_mining^0 = modifier@pm_shaft_mining_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_shaft_mining^1 = modifier@pm_shaft_mining_tools_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_blasting = modifier@pm_blasting_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_blasting = modifier@pm_blasting_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_blasting = modifier@pm_blasting_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_blasting = modifier@pm_blasting_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_blasting^0 = modifier@pm_blasting_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_blasting^1 = modifier@pm_blasting_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_blasting^2 = modifier@pm_blasting_chemicals_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_drilling = modifier@pm_drilling_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_drilling = modifier@pm_drilling_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_drilling = modifier@pm_drilling_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_drilling = modifier@pm_drilling_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_drilling = modifier@pm_drilling_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_drilling^0 = modifier@pm_drilling_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_drilling^1 = modifier@pm_drilling_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_drilling^2 = modifier@pm_drilling_coal_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_drilling^3 = modifier@pm_drilling_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_drilling^4 = modifier@pm_drilling_chemicals_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_excavation = modifier@pm_excavation_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_excavation = modifier@pm_excavation_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_excavation = modifier@pm_excavation_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_excavation = modifier@pm_excavation_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^0 = modifier@pm_excavation_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^1 = modifier@pm_excavation_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^2 = modifier@pm_excavation_vehicles_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^3 = modifier@pm_excavation_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^4 = modifier@pm_excavation_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^5 = modifier@pm_excavation_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_excavation^6 = modifier@pm_excavation_tungsten_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_precision_mining = modifier@pm_precision_mining_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_precision_mining = modifier@pm_precision_mining_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_precision_mining = modifier@pm_precision_mining_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_precision_mining = modifier@pm_precision_mining_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^0 = modifier@pm_precision_mining_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^1 = modifier@pm_precision_mining_vehicles_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^2 = modifier@pm_precision_mining_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^3 = modifier@pm_precision_mining_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^4 = modifier@pm_precision_mining_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^5 = modifier@pm_precision_mining_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^6 = modifier@pm_precision_mining_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_precision_mining^7 = modifier@pm_precision_mining_tungsten_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_mantle_extraction = modifier@pm_mantle_extraction_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_mantle_extraction = modifier@pm_mantle_extraction_industrial_capacity_use_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^0 = modifier@pm_mantle_extraction_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^1 = modifier@pm_mantle_extraction_vehicles_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^2 = modifier@pm_mantle_extraction_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^3 = modifier@pm_mantle_extraction_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^4 = modifier@pm_mantle_extraction_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^5 = modifier@pm_mantle_extraction_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mantle_extraction^6 = modifier@pm_mantle_extraction_tungsten_input_modifier }
            
            # Automation
            add_to_variable = { pm_workforce_laborers@token:pm_steam_pump = modifier@pm_steam_pump_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_steam_pump = modifier@pm_steam_pump_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_pump^0 = modifier@pm_steam_pump_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_pump^1 = modifier@pm_steam_pump_coal_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_conveyor_belts = modifier@pm_conveyor_belts_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_conveyor_belts^0 = modifier@pm_conveyor_belts_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_conveyor_belts^1 = modifier@pm_conveyor_belts_coal_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_conveyor_belts^2 = modifier@pm_conveyor_belts_iron_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_conveyor_belts^3 = modifier@pm_conveyor_belts_steel_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_mine_electrification = modifier@pm_mine_electrification_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_mine_electrification = modifier@pm_mine_electrification_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_electrification^0 = modifier@pm_mine_electrification_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_electrification^1 = modifier@pm_mine_electrification_coal_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_electrification^2 = modifier@pm_mine_electrification_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_electrification^3 = modifier@pm_mine_electrification_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_electrification^4 = modifier@pm_mine_electrification_electronics_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_mine_computerization = modifier@pm_mine_computerization_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_mine_computerization = modifier@pm_mine_computerization_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_computerization^0 = modifier@pm_mine_computerization_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_computerization^1 = modifier@pm_mine_computerization_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_computerization^2 = modifier@pm_mine_computerization_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mine_computerization^3 = modifier@pm_mine_computerization_electricity_input_modifier }
            
            add_to_variable = { pm_workforce_specialists@token:pm_autonomous_mining = modifier@pm_autonomous_mining_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_autonomous_mining^0 = modifier@pm_autonomous_mining_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_autonomous_mining^1 = modifier@pm_autonomous_mining_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_autonomous_mining^2 = modifier@pm_autonomous_mining_electricity_input_modifier }
        #
        # Farming
            # Production
            add_to_variable = { pm_output_multiplier@token:pm_subsistence_farming = modifier@pm_subsistence_farming_output_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_basic_planting = modifier@pm_basic_planting_output_modifier }
            add_to_variable = { pm_input_amount@token:pm_basic_planting^0 = modifier@pm_basic_planting_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_basic_planting^1 = modifier@pm_basic_planting_tools_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_intensive_agriculture = modifier@pm_intensive_agriculture_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_intensive_agriculture = modifier@pm_intensive_agriculture_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_intensive_agriculture = modifier@pm_intensive_agriculture_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_intensive_agriculture = modifier@pm_intensive_agriculture_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_intensive_agriculture^0 = modifier@pm_intensive_agriculture_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_intensive_agriculture^1 = modifier@pm_intensive_agriculture_chemicals_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_chemical_fertilizers^0 = modifier@pm_chemical_fertilizers_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_chemical_fertilizers^1 = modifier@pm_chemical_fertilizers_tools_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_chemical_fertilizers = modifier@pm_chemical_fertilizers_industrial_capacity_use_modifier }
            add_to_variable = { pm_input_amount@token:pm_chemical_fertilizers^0 = modifier@pm_chemical_fertilizers_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_chemical_fertilizers^1 = modifier@pm_chemical_fertilizers_tools_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_animal_husbandry = modifier@pm_animal_husbandry_output_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_slaughterhouses = modifier@pm_slaughterhouses_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_slaughterhouses = modifier@pm_slaughterhouses_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_slaughterhouses = modifier@pm_slaughterhouses_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_slaughterhouses = modifier@pm_slaughterhouses_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_slaughterhouses^0 = modifier@pm_slaughterhouses_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_slaughterhouses^1 = modifier@pm_slaughterhouses_chemicals_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_factory_farms = modifier@pm_factory_farms_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_factory_farms = modifier@pm_factory_farms_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_factory_farms = modifier@pm_factory_farms_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_factory_farms = modifier@pm_factory_farms_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^0 = modifier@pm_factory_farms_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^1 = modifier@pm_factory_farms_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^2 = modifier@pm_factory_farms_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^3 = modifier@pm_factory_farms_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^4 = modifier@pm_factory_farms_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_factory_farms^5 = modifier@pm_factory_farms_electronics_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_lab_grown_meat = modifier@pm_lab_grown_meat_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_lab_grown_meat = modifier@pm_lab_grown_meat_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_lab_grown_meat = modifier@pm_lab_grown_meat_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_lab_grown_meat = modifier@pm_lab_grown_meat_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^0 = modifier@pm_lab_grown_meat_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^1 = modifier@pm_lab_grown_meat_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^2 = modifier@pm_lab_grown_meat_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^3 = modifier@pm_lab_grown_meat_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^4 = modifier@pm_lab_grown_meat_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_lab_grown_meat^5 = modifier@pm_lab_grown_meat_electronics_input_modifier }

            # Automation
            add_to_variable = { pm_workforce_laborers@token:pm_farm_equipment = modifier@pm_farm_equipment_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_farm_equipment = modifier@pm_farm_equipment_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_farm_equipment^0 = modifier@pm_farm_equipment_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_farm_equipment^1 = modifier@pm_farm_equipment_machinery_input_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_automatic_irrigation = modifier@pm_automatic_irrigation_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_automatic_irrigation = modifier@pm_automatic_irrigation_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_automatic_irrigation^0 = modifier@pm_automatic_irrigation_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_automatic_irrigation^1 = modifier@pm_automatic_irrigation_machinery_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_plantation_machinery = modifier@pm_plantation_machinery_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_plantation_machinery = modifier@pm_plantation_machinery_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_plantation_machinery^0 = modifier@pm_plantation_machinery_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_plantation_machinery^1 = modifier@pm_plantation_machinery_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_plantation_machinery^2 = modifier@pm_plantation_machinery_tools_input_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_traction_engine = modifier@pm_traction_engine_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_traction_engine = modifier@pm_traction_engine_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_traction_engine^0 = modifier@pm_traction_engine_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_traction_engine^1 = modifier@pm_traction_engine_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_traction_engine^2 = modifier@pm_traction_engine_coal_input_modifier }

            add_to_variable = { pm_workforce_professionals@token:pm_tractors = modifier@pm_tractors_professionals_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_tractors = modifier@pm_tractors_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_tractors^0 = modifier@pm_tractors_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_tractors^1 = modifier@pm_tractors_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_tractors^2 = modifier@pm_tractors_oil_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_agricultural_machines = modifier@pm_agricultural_machines_professionals_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_agricultural_machines = modifier@pm_agricultural_machines_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_agricultural_machines^0 = modifier@pm_agricultural_machines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_agricultural_machines^1 = modifier@pm_agricultural_machines_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_agricultural_machines^2 = modifier@pm_agricultural_machines_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_agricultural_machines^3 = modifier@pm_agricultural_machines_electricity_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_automated_agriculture = modifier@pm_automated_agriculture_professionals_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_automated_agriculture = modifier@pm_automated_agriculture_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_automated_agriculture^0 = modifier@pm_automated_agriculture_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_automated_agriculture^1 = modifier@pm_automated_agriculture_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_automated_agriculture^2 = modifier@pm_automated_agriculture_oil_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_automated_agriculture^3 = modifier@pm_automated_agriculture_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_automated_agriculture^4 = modifier@pm_automated_agriculture_tools_input_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_ranching = modifier@pm_ranching_laborers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_ranching^0 = modifier@pm_ranching_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_ranching^1 = modifier@pm_ranching_tools_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_barbed_wire = modifier@pm_barbed_wire_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_barbed_wire = modifier@pm_barbed_wire_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_barbed_wire^0 = modifier@pm_barbed_wire_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_barbed_wire^1 = modifier@pm_barbed_wire_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_barbed_wire^2 = modifier@pm_barbed_wire_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_barbed_wire^3 = modifier@pm_barbed_wire_tools_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_milking_machines = modifier@pm_milking_machines_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_milking_machines = modifier@pm_milking_machines_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^0 = modifier@pm_milking_machines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^1 = modifier@pm_milking_machines_steel_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^2 = modifier@pm_milking_machines_wood_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^3 = modifier@pm_milking_machines_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^4 = modifier@pm_milking_machines_tools_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^5 = modifier@pm_milking_machines_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_milking_machines^6 = modifier@pm_milking_machines_computers_input_modifier }
        #
        # Factories
            # Textiles
            add_to_variable = { pm_output_multiplier@token:pm_manual_sewing = modifier@pm_manual_sewing_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_manual_sewing = modifier@pm_manual_sewing_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_manual_sewing = modifier@pm_manual_sewing_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_manual_sewing = modifier@pm_manual_sewing_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_manual_sewing^0 = modifier@pm_manual_sewing_fiber_input_modifier }
            
            add_to_variable = { pm_output_multiplier@token:pm_spinning_machines = modifier@pm_spinning_machines_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_spinning_machines = modifier@pm_spinning_machines_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_spinning_machines = modifier@pm_spinning_machines_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_spinning_machines = modifier@pm_spinning_machines_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_spinning_machines^0 = modifier@pm_spinning_machines_fiber_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_spinning_machines^1 = modifier@pm_spinning_machines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_spinning_machines^2 = modifier@pm_spinning_machines_chemicals_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_sewing_machines = modifier@pm_sewing_machines_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_sewing_machines = modifier@pm_sewing_machines_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_laborers@token:pm_sewing_machines = modifier@pm_sewing_machines_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_sewing_machines = modifier@pm_sewing_machines_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_sewing_machines^0 = modifier@pm_sewing_machines_fiber_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_sewing_machines^1 = modifier@pm_sewing_machines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_sewing_machines^2 = modifier@pm_sewing_machines_chemicals_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_electric_sewing_machines = modifier@pm_electric_sewing_machines_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_electric_sewing_machines = modifier@pm_electric_sewing_machines_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_electric_sewing_machines = modifier@pm_electric_sewing_machines_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_electric_sewing_machines = modifier@pm_electric_sewing_machines_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_sewing_machines^0 = modifier@pm_electric_sewing_machines_fiber_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_sewing_machines^1 = modifier@pm_electric_sewing_machines_chemicals_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_sewing_machines^2 = modifier@pm_electric_sewing_machines_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_electric_sewing_machines^3 = modifier@pm_electric_sewing_machines_electricity_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_laser_printers = modifier@pm_laser_printers_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_laser_printers = modifier@pm_laser_printers_industrial_capacity_use_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_laser_printers = modifier@pm_laser_printers_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_laser_printers = modifier@pm_laser_printers_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_laser_printers^0 = modifier@pm_laser_printers_fiber_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_laser_printers^1 = modifier@pm_laser_printers_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_laser_printers^2 = modifier@pm_laser_printers_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_laser_printers^3 = modifier@pm_laser_printers_chemicals_input_modifier }

            add_to_variable = { pm_output_multiplier@token:pm_3d_printed_textiles = modifier@pm_3d_printed_textiles_output_modifier }
            add_to_variable = { pm_industrial_capacity_use@token:pm_3d_printed_textiles = modifier@pm_3d_printed_textiles_industrial_capacity_use_modifier }
            add_to_variable = { pm_input_amount@token:pm_3d_printed_textiles^0 = modifier@pm_3d_printed_textiles_fiber_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_3d_printed_textiles^1 = modifier@pm_3d_printed_textiles_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_3d_printed_textiles^2 = modifier@pm_3d_printed_textiles_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_3d_printed_textiles^3 = modifier@pm_3d_printed_textiles_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_3d_printed_textiles^4 = modifier@pm_3d_printed_textiles_chemicals_input_modifier }

            # Steel

            # Machinery

            # Tools

            # Electronics

            # Portable Power

            # Consumer Goods

            # Appliances

            # Vehicles

            # Computers

            # Plastics

            # Fibers

            # Rubber

            # Chemicals

            # Composites

            # Electricity

            # Automation
            add_to_variable = { pm_workforce_laborers@token:pm_steam_engine = modifier@pm_steam_engine_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_steam_engine = modifier@pm_steam_engine_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_engine^0 = modifier@pm_steam_engine_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_steam_engine^1 = modifier@pm_steam_engine_coal_input_modifier }
            
            add_to_variable = { pm_workforce_laborers@token:pm_industrial_machinery = modifier@pm_industrial_machinery_laborers_required_modifier }
            add_to_variable = { pm_workforce_workers@token:pm_industrial_machinery = modifier@pm_industrial_machinery_workers_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_industrial_machinery^0 = modifier@pm_industrial_machinery_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_industrial_machinery^1 = modifier@pm_industrial_machinery_coal_input_modifier }
            
            add_to_variable = { pm_workforce_workers@token:pm_industrial_electrification = modifier@pm_industrial_electrification_workers_required_modifier }
            add_to_variable = { pm_workforce_professionals@token:pm_industrial_electrification = modifier@pm_industrial_electrification_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_industrial_electrification^0 = modifier@pm_industrial_electrification_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_industrial_electrification^1 = modifier@pm_industrial_electrification_electronics_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_industrial_electrification^2 = modifier@pm_industrial_electrification_electricity_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_assembly_lines = modifier@pm_assembly_lines_professionals_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_assembly_lines^0 = modifier@pm_assembly_lines_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_assembly_lines^1 = modifier@pm_assembly_lines_electronics_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_assembly_lines^2 = modifier@pm_assembly_lines_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_assembly_lines^3 = modifier@pm_assembly_lines_rubber_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_robots = modifier@pm_robots_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_robots = modifier@pm_robots_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_robots^0 = modifier@pm_robots_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_robots^1 = modifier@pm_robots_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_robots^2 = modifier@pm_robots_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_robots^3 = modifier@pm_robots_rubber_input_modifier }
            
            add_to_variable = { pm_workforce_professionals@token:pm_data_servers = modifier@pm_data_servers_professionals_required_modifier }
            add_to_variable = { pm_workforce_specialists@token:pm_data_servers = modifier@pm_data_servers_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_data_servers^0 = modifier@pm_data_servers_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_data_servers^1 = modifier@pm_data_servers_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_data_servers^2 = modifier@pm_data_servers_appliances_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_data_servers^3 = modifier@pm_data_servers_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_data_servers^4 = modifier@pm_data_servers_rubber_input_modifier }
            
            add_to_variable = { pm_workforce_specialists@token:pm_artificial_intelligence = modifier@pm_artificial_intelligence_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_artificial_intelligence^0 = modifier@pm_artificial_intelligence_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_artificial_intelligence^1 = modifier@pm_artificial_intelligence_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_artificial_intelligence^2 = modifier@pm_artificial_intelligence_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_artificial_intelligence^3 = modifier@pm_artificial_intelligence_rubber_input_modifier }
            
            add_to_variable = { pm_workforce_specialists@token:pm_mass_automation = modifier@pm_mass_automation_specialists_required_modifier }
            add_to_variable = { pm_input_amount@token:pm_mass_automation^0 = modifier@pm_mass_automation_machinery_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mass_automation^1 = modifier@pm_mass_automation_electricity_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mass_automation^2 = modifier@pm_mass_automation_computers_input_modifier }
            add_to_variable = { pm_input_amount@token:pm_mass_automation^3 = modifier@pm_mass_automation_rubber_input_modifier }
        #
    }
#

#Investment
    # Opportunities
    investment_opportunities_monthly = {
        io_state_list = yes

        for_loop_effect = {
            end = investment_opportunities_monthly
            add_to_variable = { investment_opportunities_cap = investment_opportunities_monthly }
            generate_investment_opportunity = yes
        }
        investment_opportunities_cap_calc = yes
        while_loop_effect = {
            limit = {
                check_variable = { investment_opportunities^num > investment_opportunities_cap }
            }
            remove_worst_investment_opportunity = yes
        }
    }

    investment_opportunities_update = {
        # Initializes IO cap (requires pop stats), IO generation (requires GDP), and updates IO cost & attractiveness & sorts them (requires latest vals)

        investment_opportunities_cap_calc = yes

        # Investment Opportunities Array: Building Type
        # In investment opportunities type array:
        #   0 is New Building
        #   1 is Expanding
        #   2 is Upgrading
        # State array is which state

        # Generation Cost
        set_variable = { investment_opportunity_generation_cost = gdp_amount }
        divide_variable = { investment_opportunity_generation_cost = 200 }
        add_to_variable = { investment_opportunity_generation_cost = 100 }
        divide_variable = { investment_opportunity_generation_cost = modifier@government_investment_efficiency_factor }
    
        set_variable = { investment_opportunity_fund_all_cost = 0 }
        every_controlled_state = {
            clr_state_flag = current_investment_opportunity_flag
        }
        for_each_loop = {
            array = investment_opportunities
            value = state_temp
            index = ii

            set_temp_variable = { building_temp = investment_opportunity_building@var:state_temp }

            var:state_temp = {
                set_state_flag = current_investment_opportunity_flag
            }
            
            # Cost
                if = {
                    limit = {
                        check_variable = { investment_opportunity_type@var:state_temp = 0 } # Build New
                    }
                    set_temp_variable = { pm_temp = latest_production_method@var:building_temp }
                }
                else = {
                    set_temp_variable = { pm_temp = state_temp:production_method@var:building_temp }
                }
                
                if = {
                    limit = {
                        check_variable = { pm_temp = 0 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_basic_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_basic_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 1 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_advanced_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_advanced_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 2 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_industrialized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_industrialized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 3 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_mechanized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_mechanized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 4 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_electrified_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_electrified_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 5 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_motorized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_motorized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 6 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_modernized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_modernized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 7 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_roboticized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_roboticized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 8 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_computerized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_computerized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 9 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_digitalized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_digitalized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 10 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_automatized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_automatized_construction_speed@var:building_temp }
                }
                else_if = {
                    limit = {
                        check_variable = { pm_temp = 11 }
                    }
                    set_temp_variable = { industrial_goods_cost_temp = global.building_futurized_construction_amount@var:building_temp }
                    set_temp_variable = { monthly_cost_temp = global.building_futurized_construction_speed@var:building_temp }
                }
                multiply_temp_variable = { industrial_goods_cost_temp = state_temp:price@token:resource_industrial_goods }
                multiply_temp_variable = { monthly_cost_temp = state_temp:price@token:resource_industrial_goods }
                
                set_variable = { investment_opportunity_industrial_goods_cost@var:state_temp = industrial_goods_cost_temp }
                set_variable = { investment_opportunity_monthly_cost@var:state_temp = monthly_cost_temp }
                set_variable = { investment_opportunity_total_cost@var:state_temp = industrial_goods_cost_temp }

                multiply_temp_variable = { industrial_goods_cost_temp = global.start_construction_cost_multiplier }
                set_variable = { investment_opportunity_cost@var:state_temp = industrial_goods_cost_temp }
                add_to_variable = { investment_opportunity_total_cost@var:state_temp = industrial_goods_cost_temp }

                if = {
                    limit = {
                        check_variable = { investment_opportunity_investment@var:state_temp < investment_opportunity_cost@var:state_temp }
                    }
                    add_to_variable = { investment_opportunity_fund_all_cost = investment_opportunity_cost@var:state_temp }
                    subtract_from_variable = { investment_opportunity_fund_all_cost = investment_opportunity_investment@var:state_temp }
                }
            #

            # Attractiveness
                set_temp_variable = { attract_modifier_temp = state_temp:building_attractiveness_modifier@var:building_temp }
                set_temp_variable = { attract_factor_temp = state_temp:building_attractiveness_factor@var:building_temp }
                add_to_temp_variable = { attract_factor_temp = 1 }

                set_variable = { investment_opportunity_attractiveness@var:state_temp = 100 }
                set_variable = { investment_opportunity_attractiveness_factor@var:state_temp = state_temp:building_attractiveness_factor@var:building_temp }

                # Production of inputs
                set_temp_variable = { attractiveness_temp = 0 }
                if = { # New Building
                    limit = {
                        check_variable = { investment_opportunity_type@var:state_temp = 0 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = input_1_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = input_2_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = input_3_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = input_4_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = input_5_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                }
                else = { # Current Building
                    set_temp_variable = { attractiveness_temp = 0 }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = state_temp:input_1_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = state_temp:input_2_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = state_temp:input_3_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = state_temp:input_4_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                    if = {
                        limit = {
                            set_temp_variable = { r_temp = state_temp:input_5_type@var:building_temp }
                            NOT = { check_variable = { r_temp = 0 } }
                            check_variable = { state_temp:production@var:r_temp > 0 }
                        }
                        add_to_temp_variable = { attractiveness_temp = 5 }
                    }
                }
                set_variable = { investment_opportunity_attractiveness_inputs@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Productivity
                if = { # New Building
                    limit = {
                        check_variable = { investment_opportunity_type@var:state_temp = 0 }
                    }
                    set_temp_variable = { attractiveness_temp = productivity@var:building_temp }
                }
                else = { # Current Building
                    set_temp_variable = { attractiveness_temp = state_temp:productivity@var:building_temp }
                }
                multiply_temp_variable = { attractiveness_temp = 2 }
                set_variable = { investment_opportunity_attractiveness_productivity@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Wages
                if = { # New Building
                    limit = {
                        check_variable = { investment_opportunity_type@var:state_temp = 0 }
                    }
                    set_temp_variable = { attractiveness_temp = state_temp:base_wage }
                    multiply_temp_variable = { attractiveness_temp = payroll_multiplier@var:building_temp }
                    divide_temp_variable = { attractiveness_temp = jobs@var:building_temp }
                }
                else = { # Current Building
                    set_temp_variable = { attractiveness_temp = state_temp:base_wage }
                    multiply_temp_variable = { attractiveness_temp = state_temp:payroll_multiplier@var:building_temp }
                    multiply_temp_variable = { attractiveness_temp = state_temp:size@var:building_temp }
                    divide_temp_variable = { attractiveness_temp = state_temp:jobs@var:building_temp }
                }
                multiply_temp_variable = { attractiveness_temp = -2 }
                set_variable = { investment_opportunity_attractiveness_wages@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Industrial Capacity
                set_temp_variable = { attractiveness_temp = 0 }
                if = {
                    limit = {
                        NOT = { check_variable = { investment_opportunity_type@var:state_temp = 2 } }
                    }
                    set_temp_variable = { difference_temp = state_temp:industrial_capacity }
                    subtract_from_temp_variable = { difference_temp = state_temp:industrial_capacity_use }
                    subtract_from_temp_variable = { difference_temp = industrial_capacity_use@var:building_temp }

                    if = {
                        limit = {
                            check_variable = { industrial_capacity@var:building_temp > 0 }
                            check_variable = { state_temp:industrial_capacity < state_temp:industrial_capacity_use }
                        }
                        set_temp_variable = { attractiveness_temp = difference_temp }
                        multiply_temp_variable = { attractiveness_temp = -10 }
                    }
                    else_if = {
                        limit = {
                            check_variable = { difference_temp < 0 }
                            check_variable = { industrial_capacity_use@var:building_temp > 0 }
                        }
                        set_temp_variable = { attractiveness_temp = difference_temp }
                        multiply_temp_variable = { attractiveness_temp = 10 }
                    }
                }
                set_variable = { investment_opportunity_attractiveness_industrial_capacity@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Economies of Scale
                set_temp_variable = { attractiveness_temp = 0 }
                if = {
                    limit = {
                        NOT = { check_variable = { investment_opportunity_type@var:state_temp = 0 } }
                    }
                    set_temp_variable = { attractiveness_temp = state_temp:size@var:building_temp }
                }
                set_variable = { investment_opportunity_attractiveness_scale@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Negative if already have this building (outside of states with few buildings)
                set_temp_variable = { attractiveness_temp = 0 }
                if = {
                    limit = {
                        check_variable = { investment_opportunity_type@var:state_temp = 0 }
                        check_variable = { state_temp:buildings^num > 3 }
                        any_controlled_state = {
                            is_in_array = { buildings = building_temp }
                        }
                    }
                    set_temp_variable = { attractiveness_temp = -20 }
                }
                set_variable = { investment_opportunity_attractiveness_other@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness_other@var:state_temp = attract_modifier_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attract_modifier_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Negative for non-core territory & non-owned territory
                set_temp_variable = { attractiveness_temp = 0 }
                if = {
                    limit = {
                        var:state_temp = {
                            NOT = { is_core_of = PREV }
                        }
                    }
                    add_to_temp_variable = { attractiveness_temp = -20 }
                }
                if = {
                    limit = {
                        var:state_temp = {
                            NOT = { is_owned_by = PREV }
                        }
                    }
                    add_to_temp_variable = { attractiveness_temp = -50 }
                }
                
                add_to_variable = { investment_opportunity_attractiveness_other@var:state_temp = attractiveness_temp }
                add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }

                # Unemployment
                set_temp_variable = { attractiveness_temp = 0 }
                if = { # If not enough employees, then reduce attractiveness
                    limit = {
                        NOT = { check_variable = { investment_opportunity_type@var:state_temp = 2 } }
                        check_variable = { state_temp:available_workforce < jobs@var:building_temp }
                    }
                    set_temp_variable = { attractiveness_temp = 1 }
                    set_temp_variable = { ratio_temp = state_temp:available_workforce }
                    divide_temp_variable = { ratio_temp = jobs@var:building_temp }
                    subtract_from_temp_variable = { attractiveness_temp = ratio_temp }
                    multiply_temp_variable = { attractiveness_temp = -100 }
                    add_to_variable = { investment_opportunity_attractiveness@var:state_temp = attractiveness_temp }
                }
                set_variable = { investment_opportunity_attractiveness_unemployment@var:state_temp = attractiveness_temp }

                
                multiply_variable = { investment_opportunity_attractiveness@var:state_temp = attract_factor_temp }
            #
        }
        divide_variable = { investment_opportunity_fund_all_cost = modifier@government_investment_efficiency_factor }

        investment_opportunities_sort = yes
    }
    investment_opportunities_sort = {
        
        clear_array = investment_opportunities_sort
        for_each_loop = {
            array = investment_opportunities
            value = state_temp
            
            set_temp_variable = { effective_wage_om = investment_opportunity_attractiveness@var:state_temp }

            for_each_loop = {
                array = investment_opportunities_sort
                index = ii
                value = vv
                break = bb

                set_temp_variable = { effective_wage_vv = investment_opportunity_attractiveness@var:vv }

                if = {
                    limit = {
                        check_variable = { effective_wage_vv < effective_wage_om }
                    }
                    add_to_array = { 
                        array = investment_opportunities_sort 
                        value = state_temp
                        index = ii
                    }
                    set_temp_variable = { bb = 1 }
                }
            }
            if = {
                limit = {
                    check_variable = { bb = 0 }
                }
                add_to_array = { investment_opportunities_sort = state_temp }
            }
        }
        
        clear_array = investment_opportunities
        for_each_loop = {
            array = investment_opportunities_sort
            value = state_temp
            add_to_array = { investment_opportunities = state_temp }
        }
        clear_array = investment_opportunities_sort
    }

    investment_opportunities_cap_calc = {
        set_variable = { investment_opportunities_cap = aristocrats_workforce }
        divide_variable = { investment_opportunities_cap = global.aristocrats_per_investment_opportunity }
        if = {
            limit = {
                check_variable = { investment_opportunities_cap > global.max_aristocrats_investment_opportunities }
            }
            set_variable = { investment_opportunities_cap = global.max_aristocrats_investment_opportunities }
        }

        set_temp_variable = { cap_temp = capitalists_workforce }
        divide_temp_variable = { cap_temp = global.capitalists_per_investment_opportunity }
        add_to_variable = { investment_opportunities_cap = cap_temp }
        add_to_variable = { investment_opportunities_cap = global.base_investment_opportunities_cap }
        round_variable = investment_opportunities_cap

        # Monthly
        set_variable = { investment_opportunities_monthly = investment_opportunities_cap }
        multiply_variable = { investment_opportunities_monthly = 0.33 }
        add_to_variable = { investment_opportunities_monthly = 0.5 }
        round_variable = investment_opportunities_monthly
    }

    create_investment_opportunity = {
        # Tries 10 times to generate an investment opportunity. For when you want to ensure the country gets one
        set_temp_variable = { investment_opportunities_amount_temp = investment_opportunities^num }
        set_temp_variable = { tries_temp = 0 }
        while_loop_effect = {
            limit = {
                check_variable = { tries_temp < 10 }
                check_variable = { investment_opportunities_amount_temp = investment_opportunities^num }
            }
            generate_investment_opportunity = yes
            add_to_temp_variable = { tries_temp = 1 }
        }
    }
    generate_investment_opportunity = {
        clr_country_flag = investment_opportunity_done
        if = {
            limit = {
                check_variable = { investment_opportunities^num < investment_opportunities_cap }
            }
            # BUILD/EXPAND industrial capacity
            generate_investment_opportunity_industrial_cap = yes

            if = { # BUILD a NEW Building
                limit = {
                    NOT = { has_country_flag = investment_opportunity_done } # Nothing else was done
                    OR = {
                        AND = {
                            check_variable = { investment_opportunities_cap > 3 }
                            NOT = {
                                any_of = {
                                    array = investment_opportunities
                                    value = state_temp
                                    check_variable = { investment_opportunity_type@var:state_temp = 0 }
                                }
                            }
                        }
                        AND = {
                            any_controlled_state = {
                                check_variable = { non_subs_jobs_buildings = 0 } # DOESN'T have a building that isn't a subsistence farm
                                check_variable = { excess_workforce > 20 } # Has more than enough to fill a building
                                NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                            }
                            check_variable = { random < 0.25 }
                        }
                        check_variable = { random < 0.1 }
                    }
                }

                generate_investment_opportunity_build = yes
            }

            # UPGRADE a CURRENT building

            if = { # EXPAND a CURRENT building 
                limit = { 
                    NOT = { has_country_flag = investment_opportunity_done } # Nothing else was done
                }
                generate_investment_opportunity_expand = yes
            }

            add_investment_opportunity = yes
        }
    }
    generate_investment_opportunity_industrial_cap = {
        io_state_industrial_cap = yes
        if = { limit = { NOT = { check_variable = { chosen_state = 0 } } } # State was chosen
            log = "INDUSTRIAL CAP: [?chosen_state.GetName]"

            # If railways are unlocked (State choice already avoids states with IC buildings being built in them), choose them. Otherwise, infra
            if = {
                limit = {
                    check_variable = { latest_production_method@token:building_railway > -1 }
                }
                set_temp_variable = { investment_building_temp = token:building_railway }
            }
            else = {
                set_temp_variable = { investment_building_temp = token:building_infrastructure }
            }

            if = { # If building isn't in state, then it's a build action. Otherwise expand.
                limit = {
                    NOT = {
                        var:chosen_state = {
                            is_in_array = { buildings = investment_building_temp }
                        }
                    }
                }
                set_temp_variable = { investment_type_temp = 0 } # build
            }
            else = {
                set_temp_variable = { investment_type_temp = 1 } # expand
            }
            
            set_country_flag = investment_opportunity_done
        }
    }
    generate_investment_opportunity_build = {
        io_state_build = yes # Pick a state

        if = { limit = { NOT = { check_variable = { chosen_state = 0 } } } # State was chosen
            log = "BUILD: [?chosen_state.GetName]"

            # Pick building type
            for_each_loop = {
                array = global.building_token_array
                value = potential_building_token
                break = potential_building_brk

                if = {
                    limit = {
                        NOT = { check_variable = { potential_building_token = token:building_military_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_civilian_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_naval_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_subsistence_farm } }
                        NOT = { check_variable = { potential_building_token = token:building_rice_paddy } }
                        NOT = { check_variable = { potential_building_token = token:building_infrastructure } }
                        NOT = { check_variable = { potential_building_token = token:building_railway } }
                        NOT = {
                            var:chosen_state = {
                                is_in_array = { buildings = potential_building_token }
                            }
                        }
                        check_variable = { latest_production_method@var:potential_building_token > -1 }
                        OR = {
                            check_variable = { global.building_uses_deposits@var:potential_building_token = 0 }
                            AND = {
                                check_variable = { global.building_uses_deposits@var:potential_building_token = 1 }
                                check_variable = { deposits@var:potential_building_token > 0 }
                            }
                        }
                        OR = {
                            check_variable = { global.building_uses_arable_land@var:potential_building_token = 0 }
                            AND = {
                                check_variable = { global.building_uses_arable_land@var:potential_building_token = 1 }
                                check_variable = { arable_land > arable_land_use }
                            }
                        }
                        OR = {
                            check_variable = { global.building_coastal@var:potential_building_token = 0 }
                            AND = {
                                check_variable = { global.building_coastal@var:potential_building_token = 1 }
                                is_coastal = yes
                            }
                        }
                        check_variable = { random < 0.1 }
                    }
                    set_country_flag = investment_opportunity_done
                    set_temp_variable = { investment_building_temp = potential_building_token }
                    set_temp_variable = { investment_type_temp = 0 }
                    set_temp_variable = { potential_building_brk = 1 }
                }
            }
        }
    }
    generate_investment_opportunity_expand = {
        io_state_expand = yes # Pick a state

        if = { limit = { NOT = { check_variable = { chosen_state = 0 } } } # State was chosen
            log = "EXPAND: [?chosen_state.GetName]"
            for_each_loop = { # Sort through most productive buildings to expand
                array = chosen_state:buildings_productivity_sort
                value = potential_building_token
                break = potential_building_brk

                if = {
                    limit = {
                        NOT = { check_variable = { potential_building_token = token:building_military_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_civilian_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_naval_industry } }
                        NOT = { check_variable = { potential_building_token = token:building_subsistence_farm } }
                        NOT = { check_variable = { potential_building_token = token:building_rice_paddy } }
                        NOT = { check_variable = { potential_building_token = token:building_infrastructure } }
                        NOT = { check_variable = { potential_building_token = token:building_railway } }
                        check_variable = { chosen_state:employment_target@var:potential_building_token > 95 }
                        check_variable = { chosen_state:productivity@var:potential_building_token > 1 }
                        check_variable = { chosen_state:profitability@var:potential_building_token > 0.05 }
                        check_variable = { chosen_state:under_construction@var:potential_building_token = 0 }
                    }
                    set_country_flag = investment_opportunity_done
                    set_temp_variable = { investment_building_temp = potential_building_token }
                    set_temp_variable = { investment_type_temp = 1 }
                    set_temp_variable = { potential_building_brk = 1 }
                }
            }
        }
    }
    generate_investment_opportunity_upgrade = {
        
    }
    io_state_list = {
        # Regenerates the list of states for potential investment (in order of workforce)

        for_each_loop = {
            array = investment_states_array
            value = vv
            clear_variable = investment_weight@var:vv
        }
        set_variable = { investment_weight_total = 0 }
        clear_array = investment_states_array
        every_controlled_state = {

            set_temp_variable = { investment_weight_temp = pops_workforce } # Population is base

            # Non-core states get reduced by 90%
            if = { limit = { NOT = { is_core_of = PREV } } multiply_temp_variable = { investment_weight_temp = 0.1 } }
            # Non-owned states get reduced by 90%
            if = { limit = { NOT = { is_owned_by = PREV } } multiply_temp_variable = { investment_weight_temp = 0.1 } }

            # Wealthy states get invested in more often
            set_temp_variable = { sol_temp = pops_sol }
            divide_temp_variable = { sol_temp = 100 }
            multiply_temp_variable = { investment_weight_temp = sol_temp }
            
            set_variable = { PREV.investment_weight@THIS = investment_weight_temp }
            add_to_variable = { PREV.investment_weight_total = investment_weight_temp }

            for_each_loop = {
                array = PREV.investment_states_array
                index = ii
                value = vv
                break = bb

                if = {
                    limit = {
                        check_variable = { PREV.investment_weight@var:vv < investment_weight_temp }
                    }
                    add_to_array = { 
                        array = PREV.investment_states_array 
                        value = THIS
                        index = ii
                    }
                    set_temp_variable = { bb = 1 }
                }
            }
            if = {
                limit = {
                    check_variable = { bb = 0 }
                }
                add_to_array = { PREV.investment_states_array = THIS }
            }
        }
    }
    io_state_build = {
        # Selects a semi-random state for building a new building
        # Outputs chosen_state

        set_temp_variable = { chosen_state = 0 }
        random_controlled_state = { # Choose a state without a building
            limit = {
                check_variable = { non_subs_jobs_buildings = 0 } # DOESN'T have a building that isn't a subsistence farm
                check_variable = { excess_workforce > 20 } # Has more than enough to fill a building
                NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
            }
            set_temp_variable = { chosen_state = THIS }
        }

        if = { # If no state is chosen, choose a state, less restrictive on workforce
            limit = {
                check_variable = { chosen_state = 0 }
            }
            random_controlled_state = {
                limit = {
                    check_variable = { non_subs_jobs_buildings = 0 } # DOESN'T have a building that isn't a subsistence farm
                    check_variable = { excess_workforce > 5 } # Doesn't have enough jobs to fill state's workforce
                    NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                }
                set_temp_variable = { chosen_state = THIS }
            }
        }

        if = { # If no state is chosen, choose a state with a building
            limit = {
                check_variable = { chosen_state = 0 }
            }
            random_controlled_state = {
                limit = {
                    check_variable = { buildings^num < 10 } # Less than 10 buildings
                    check_variable = { excess_workforce > 5 } # Doesn't have enough jobs to fill state's workforce
                    NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                }
                set_temp_variable = { chosen_state = THIS }
            }
        }
    }
    io_state_industrial_cap = {
        # Selects a semi-random state for infrastructure
        # Outputs chosen_state

        set_temp_variable = { chosen_state = 0 }
        random_controlled_state = {
            limit = {
                set_temp_variable = { industrial_cap_temp = industrial_capacity_use }
                multiply_temp_variable = { industrial_cap_temp = 1.05 }
                check_variable = { industrial_cap_temp > industrial_capacity } # Either Lacks industrial capacity or is getting close
                NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                NOT = { check_variable = { under_construction@token:building_infrastructure > 0 } } # Currently not building an IC building
                NOT = { check_variable = { under_construction@token:building_railway > 0 } }
            }
            set_temp_variable = { chosen_state = THIS }
        }
    }
    io_state_expand = {
        # Selects a semi-random state for expanding an existing building (NOT INFRA)
        # Outputs chosen_state
        
        set_temp_variable = { investment_weight_temp = investment_weight_total }
        multiply_temp_variable = { investment_weight_temp = random }
        multiply_temp_variable = { investment_weight_temp = 0.9 }
        log = "Chosen Weight: [?investment_weight_temp] / [?investment_weight_total]"

        set_temp_variable = { chosen_state = 0 }
        set_temp_variable = { weight_temp = 0 }
        for_each_loop = { # Go thru the list and pick a random state (weighted random)
            array = investment_states_array
            value = state_temp
            break = invest_break
            add_to_temp_variable = { weight_temp = investment_weight@var:state_temp } # Needs to be added first otherwise largest state will never be invested in

            if = { limit = { check_variable = { investment_weight_temp < weight_temp } } # Skip until after random condition fulfilled
                var:state_temp = {
                    if = { # Choose a state which has a building that is profitable and practically fully employed
                        limit = {
                            check_variable = { non_subs_jobs_buildings > 0 } # Has a building that isn't a subsistence farm
                            check_variable = { excess_workforce > 0 } # Doesn't have enough jobs for state's workforce
                            NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                            any_of = { # One of the buildings is profitable & filled
                                array = buildings_productivity_sort
                                value = b_token

                                NOT = { check_variable = { b_token = token:building_military_industry } }
                                NOT = { check_variable = { b_token = token:building_civilian_industry } }
                                NOT = { check_variable = { b_token = token:building_naval_industry } }
                                NOT = { check_variable = { b_token = token:building_subsistence_farm } }
                                NOT = { check_variable = { b_token = token:building_rice_paddy } }
                                NOT = { check_variable = { b_token = token:building_infrastructure } }
                                NOT = { check_variable = { b_token = token:building_railway } }
                                check_variable = { employment_target@var:b_token > 95 }
                                check_variable = { productivity@var:b_token > 2 } # Subsistence Farms usually hover around 1 to 2
                                check_variable = { profitability@var:b_token > 0.05 }
                                check_variable = { under_construction@var:b_token = 0 }
                            }
                        }
                        set_temp_variable = { chosen_state = THIS }
                        set_temp_variable = { invest_break = 1 }
                    }
                }
            }
        }
        log = "Chosen State: [?chosen_state.GetName]"
    }
    io_state_upgrade = {
        # Selects a semi-random state for upgrading an existing building
        # Outputs chosen_state
        
        set_temp_variable = { chosen_state = 0 }
        for_loop_effect = {
            end = 5 # Will only try 5 times
            break = invest_break

            random_controlled_state = { # Choose a state with a building with an outdated production method
                limit = {
                    check_variable = { non_subs_jobs_buildings > 0 } # Has a building that isn't a subsistence farm
                    NOT = { has_state_flag = current_investment_opportunity_flag } # State doesn't have an IO for it.
                    any_of = { # One of the buildings doesn't have the latest production method
                        array = buildings
                        value = b_token

                        NOT = { check_variable = { b_token = token:building_military_industry } }
                        NOT = { check_variable = { b_token = token:building_civilian_industry } }
                        NOT = { check_variable = { b_token = token:building_naval_industry } }
                        check_variable = { controller:latest_production_method@var:b_token > production_method@var:b_token }
                    }
                }
                set_temp_variable = { chosen_state = THIS }
                set_temp_variable = { invest_break = 1 }
            }
        }
    }
    add_investment_opportunity = {
        if = { # Need to have build/expand/upgrade fired before this
            limit = {
                has_country_flag = investment_opportunity_done
            }
            clr_country_flag = investment_opportunity_done

            add_to_array = { investment_opportunities = chosen_state }
            set_variable = { investment_opportunity_building@var:chosen_state = investment_building_temp }
            set_variable = { investment_opportunity_type@var:chosen_state = investment_type_temp }
            set_variable = { investment_opportunity_investment@var:chosen_state = 0 }

            investment_opportunities_update = yes
        }
    }

    remove_worst_investment_opportunity = {

        set_temp_variable = { i_temp = investment_opportunities^num }
        subtract_from_temp_variable = { i_temp = 1 }
        set_temp_variable = { state_temp = investment_opportunities^i_temp }
        
        remove_investment_opportunity = yes
    }
    remove_investment_opportunity = {
        # state_temp

        remove_from_array = { investment_opportunities = state_temp }

        clear_variable = investment_opportunity_type@var:state_temp
        clear_variable = investment_opportunity_building@var:state_temp

        clear_variable = investment_opportunity_investment@var:state_temp
        clear_variable = investment_opportunity_cost@var:state_temp
        clear_variable = investment_opportunity_monthly_cost@var:state_temp
        clear_variable = investment_opportunity_industrial_goods_cost@var:state_temp
        clear_variable = investment_opportunity_total_cost@var:state_temp

        clear_variable = investment_opportunity_attractiveness@var:state_temp
        clear_variable = investment_opportunity_attractiveness_factor@var:state_temp
        clear_variable = investment_opportunity_attractiveness_inputs@var:state_temp
        clear_variable = investment_opportunity_attractiveness_productivity@var:state_temp
        clear_variable = investment_opportunity_attractiveness_wages@var:state_temp
        clear_variable = investment_opportunity_attractiveness_scale@var:state_temp
        clear_variable = investment_opportunity_attractiveness_unemployment@var:state_temp
        clear_variable = investment_opportunity_attractiveness_industrial_capacity@var:state_temp
        clear_variable = investment_opportunity_attractiveness_other@var:state_temp
    }

    evaluate_investment_opportunity = {
        # state_temp

        if = {
            limit = {
                NOT = { check_variable = { investment_opportunity_cost@var:state_temp > investment_opportunity_investment@var:state_temp } }
            }
            var:state_temp = {
                set_temp_variable = { x_temp = 1 }
                set_temp_variable = { building_token = PREV.investment_opportunity_building@var:state_temp }
                set_temp_variable = { financer_temp = 0 }
                set_temp_variable = { production_method_temp = PREV.latest_production_method@var:building_token }
                
                construct_x_buildings_no_update = yes
            }
            add_to_variable = { investment_fund = investment_opportunity_investment@var:state_temp }
            add_to_variable = { investment_fund_spending_construction = state_temp:construction_expenses@var:building_token }
            add_to_variable = { investment_fund_spending = state_temp:construction_expenses@var:building_token }
            subtract_from_variable = { investment_fund_balance = state_temp:construction_expenses@var:building_token }

            remove_investment_opportunity = yes
        }
    }

    # Funds
    investment_fund_update = {
        set_variable = { investment_fund_capitalists_investment = 0 }
        set_variable = { investment_fund_aristocrats_investment = 0 }
        set_variable = { investment_fund_spending_corporate_tax = 0 }
        set_variable = { investment_fund_spending_construction = 0 }
		every_controlled_state = {
            add_to_variable = { PREV.investment_fund_capitalists_investment = capitalists_investment }
            add_to_variable = { PREV.investment_fund_aristocrats_investment = aristocrats_investment }
            add_to_variable = { PREV.investment_fund_spending_corporate_tax = capitalists_investment_tax }
            add_to_variable = { PREV.investment_fund_spending_corporate_tax = aristocrats_investment_tax }

            for_each_loop = {
                array = buildings
                index = sp_i
                value = sp_token

                #Construction
                if = {
                    limit = {
                        check_variable = { under_construction@var:sp_token > 0 }
                        check_variable = { financer@var:sp_token = 0 }
                    }
                    add_to_variable = { PREV.investment_fund_spending_construction = construction_expenses@var:sp_token }
                }
            }
		}
        
        # Income
        set_variable = { investment_fund_income = investment_fund_capitalists_investment }
        add_to_variable = { investment_fund_income = investment_fund_aristocrats_investment }

        # Debt
        set_variable = { investment_fund_spending_interest = 0 }

        # Spending
        set_variable = { investment_fund_target_spending = modifier@investment_confidence_modifier }
        divide_variable = { investment_fund_target_spending = 100 }
        multiply_variable = { investment_fund_target_spending = investment_fund_income }

        set_temp_variable = { ifts_temp = investment_fund }
        multiply_temp_variable = { ifts_temp = 0.05 }
        add_to_variable = { investment_fund_target_spending = ifts_temp }

        set_variable = { investment_fund_spending = investment_fund_spending_construction }
        add_to_variable = { investment_fund_spending = investment_fund_spending_interest }
        add_to_variable = { investment_fund_spending = investment_fund_spending_corporate_tax }

        # Balance
        set_variable = { investment_fund_balance = investment_fund_income }
        subtract_from_variable = { investment_fund_balance = investment_fund_spending }
    }
    investment_funds_monthly = {
        add_to_variable = { investment_fund = investment_fund_balance }

        set_temp_variable = { ifm_temp = 0 }
        set_temp_variable = { spending_cap_temp = investment_fund_target_spending }
        subtract_from_temp_variable = { spending_cap_temp = investment_fund_spending }
        while_loop_effect = {
            limit = {
                check_variable = { spending_cap_temp > 0 }
                check_variable = { investment_opportunities^num > 0 }
                check_variable = { ifm_temp < investment_opportunities_cap }
            }
            set_temp_variable = { state_temp = investment_opportunities^0 }

            set_temp_variable = { spending_amount_temp = investment_opportunity_cost@var:state_temp }
            subtract_from_temp_variable = { spending_amount_temp = investment_opportunity_investment@var:state_temp }

            if = {
                limit = {
                    check_variable = { spending_cap_temp > spending_amount_temp }
                }
                subtract_from_variable = { investment_fund = spending_amount_temp }
                subtract_from_temp_variable = { spending_cap_temp = spending_amount_temp }
                set_variable = { investment_opportunity_investment@var:state_temp = investment_opportunity_cost@var:state_temp }
                evaluate_investment_opportunity = yes
            }
            else = {
                subtract_from_variable = { investment_fund = spending_cap_temp }
                add_to_variable = { investment_opportunity_investment@var:state_temp = spending_cap_temp }
                set_temp_variable = { spending_cap_temp = 0 }
            }

            add_to_temp_variable = { ifm_temp = 1 }
        }
        
        if = {
            limit = {
                check_variable = { investment_fund < 0 }
            }
            # TODO - Add debt
            set_variable = { investment_fund = 0 }
        }
    }
#

#Market
    market_update = { # The master market update script. Adds up all values from every state up to the market leader 
        # Scope: Market Leader
        # Make sure current scope is a market leader by doing check_variable = { market_leader = THIS }

        set_temp_variable = { market_leader_temp = THIS }

        # Runs the market_setup command again to ensure that all countries are in your market that SHOULD be
        market_setup = yes

        for_each_loop = { # Reset to 0
            array = global.resource_token_array
            value = r_type
            
            set_variable = { need@var:r_type = 0 }
            set_variable = { production@var:r_type = 0 }
        }

        for_each_scope_loop = { # Add up each country
            array = market_countries

            national_market_update = yes
            
            for_each_loop = {
                array = global.resource_token_array
                value = r_type
                add_to_variable = { market_leader_temp:need@var:r_type = local_need@var:r_type }
                add_to_variable = { market_leader_temp:production@var:r_type = local_production@var:r_type }
            }
        }

        market_calculations = yes
    }
    market_calculations = { # Does supply/demand calculations for the market and adjusts prices. Included in market_update & trade_update_quantity. 
        # Scope: Market Leader
        # Does all the market calculations after having gotten all the stuff from states. Mostly for trade

        set_temp_variable = { market_leader_temp = THIS }

        for_each_loop = { # Market Calculations
            array = global.resource_token_array
            value = r_type
            
            set_variable = { supply@var:r_type = production@var:r_type }
            set_variable = { demand@var:r_type = need@var:r_type }

            if = { # Adding positive Trade to supply
                limit = {
                    check_variable = { trade@var:r_type > 0 }
                }
                add_to_variable = { supply@var:r_type = trade@var:r_type }
            }
            if = { # Adding negative Trade to demand
                limit = {
                    check_variable = { trade@var:r_type < 0 }
                }
                subtract_from_variable = { demand@var:r_type = trade@var:r_type }
            }

            # if = { limit = { check_variable = { r_type = token:wood } } add_to_variable = { supply@token:wood = 3000 } }
            # if = { limit = { check_variable = { r_type = token:fiber } } add_to_variable = { supply@token:fiber = 400 } }
            # if = { limit = { check_variable = { r_type = token:luxuries } } add_to_variable = { supply@token:luxuries = 600 } }
            # if = { limit = { check_variable = { r_type = token:textiles } } add_to_variable = { demand@token:textiles = 1200 } }
            # if = { limit = { check_variable = { r_type = token:consumer_goods } } add_to_variable = { demand@token:consumer_goods = 600 } }
            # if = { limit = { check_variable = { r_type = token:machinery } } add_to_variable = { demand@token:machinery = 100 } }
            # if = { limit = { check_variable = { r_type = token:steel } } add_to_variable = { demand@token:steel = 300 } }
            # if = { limit = { check_variable = { r_type = token:iron } } add_to_variable = { demand@token:iron = 500 } }
            # if = { limit = { check_variable = { r_type = token:coal } } add_to_variable = { demand@token:coal = 500 } }
            # if = { limit = { check_variable = { r_type = token:machinery } } add_to_variable = { demand@token:machinery = 100 } }

            # National Balance
            set_variable = { balance@var:r_type = supply@var:r_type }
            subtract_from_variable = { balance@var:r_type = demand@var:r_type }

            # Prices
            set_temp_variable = { s_temp = supply@var:r_type }
            set_temp_variable = { d_temp = demand@var:r_type }
            get_price = yes
            set_variable = { price@var:r_type = p_return_temp }
            
            set_variable = { price_compared_to_base@var:r_type = price@var:r_type }
            divide_variable = { price_compared_to_base@var:r_type = global.base_price@var:r_type }
            subtract_from_variable = { price_compared_to_base@var:r_type = 1 }
        }
        
        for_each_scope_loop = { # Apply to each country
            array = market_countries

            for_each_loop = {
                array = global.resource_token_array
                value = r_type
                set_variable = { supply@var:r_type = market_leader_temp:supply@var:r_type }
                set_variable = { demand@var:r_type = market_leader_temp:demand@var:r_type }
                set_variable = { balance@var:r_type = market_leader_temp:balance@var:r_type }
                set_variable = { price@var:r_type = market_leader_temp:price@var:r_type }
                set_variable = { price_compared_to_base@var:r_type = market_leader_temp:price_compared_to_base@var:r_type }
                every_controlled_state = {
                    set_variable = { price@var:r_type = PREV.price@var:r_type }
                    set_variable = { price_compared_to_base@var:r_type = PREV.price_compared_to_base@var:r_type }
                }
            }
        }

        for_each_loop = { # Market leader gets a duplicate of all resources in the market
            array = global.resource_token_array
            value = r_type
            # Trade
            set_variable = { resource_cost@var:r_type = production@var:r_type }
            add_to_variable = { resource_cost@var:r_type = trade@var:r_type }
            multiply_variable = { resource_cost@var:r_type = -1 }
            round_variable = resource_cost@var:r_type
        }
    }
    national_market_update = {
        
        calculate_military_demand = yes

        for_each_loop = { # Reset to 0
            array = global.resource_token_array
            value = r_type
            
            set_variable = { local_need@var:r_type = military_demand@var:r_type }
            set_variable = { local_production@var:r_type = 0 }
        }

        every_controlled_state = { # Calculate & Add up each state
            state_market_update = yes
            
            for_each_loop = { # Add to national scope
                array = global.resource_token_array
                value = r_type

                add_to_variable = { PREV.local_need@var:r_type = demand@var:r_type }
                add_to_variable = { PREV.local_production@var:r_type = production@var:r_type }
            }
        }
        
        for_each_loop = { # Military Resources
            array = global.resource_token_array
            value = r_type

            add_to_variable = { local_need@var:r_type = resource_consumed@var:r_type }
            #set_variable = { balance@var:r_type = resource@var:r_type }
        }
    }
    state_market_update = {

        for_each_loop = { # Resets values to 0
            array = global.resource_token_array
            value = r_type
            set_variable = { supply@var:r_type = 0 }
            set_variable = { production@var:r_type = 0 }

            set_variable = { demand@var:r_type = 0 }
            add_to_variable = { demand@var:r_type = pops_need@var:r_type }
            set_variable = { demand_input@var:r_type = 0 }
        }

        for_each_loop = { # Industries - Adding production to supply & inputs to demand
            array = industries
            value = b_type

            for_each_loop = { # Output
                array = global.building_base_production@var:b_type
                value = br_token
                index = ii

                add_to_variable = { production@var:br_token = production@var:b_type^ii }
            }
            for_each_loop = { # Input
                array = input@var:b_type
                value = br_token
                index = ii

                add_to_variable = { demand_input@var:br_token = input_amount@var:b_type^ii }
            }
            if = { # Retooling
                limit = { NOT = { check_variable = { retooling_pm@var:b_type = 0 } } }
                for_each_loop = {
                    array = retooling_resources@var:b_type
                    value = br_token
                    index = ii

                    add_to_variable = { demand@var:br_token = retooling_amount@var:b_type^ii }
                }
            }
            if = { # Construction
                limit = { NOT = { check_variable = { construction@var:b_type = 0 } } }
                for_each_loop = {
                    array = construction_resources@var:b_type
                    value = br_token
                    index = ii

                    add_to_variable = { demand@var:br_token = construction_amount@var:b_type^ii }
                }
            }
        }

        # Special Buildings
            for_each_loop = { # Subsistence Farms
                array = global.building_base_production@token:subsistence_farm
                value = br_token
                index = ii

                add_to_variable = { production@var:br_token = production@token:subsistence_farm^ii }
            }
        #
        
        set_temp_variable = { local_resources_temp = modifier@local_resources }
        add_to_temp_variable = { local_resources_temp = 1 }

        # for_each_loop = { # Mil Resources
        #     array = global.resource_token_array
        #     value = r_type

        #     set_temp_variable = { resource_temp = resource@var:r_type }
        #     multiply_temp_variable = { resource_temp = local_resources_temp }
        #     subtract_from_temp_variable = { resource_temp = 0.499 }
        #     round_temp_variable = resource_temp
        #     add_to_variable = { production@var:r_type = resource_temp }
        # }
        
        for_each_loop = { # Adds values together
            array = global.resource_token_array
            value = r_type
            add_to_variable = { demand@var:r_type = demand_input@var:r_type }

            set_variable = { balance@var:r_type = supply@var:r_type }
            subtract_from_variable = { balance@var:r_type = demand@var:r_type }
        }
    }

    market_leader_check = {
        if = {
            limit = {
                OR = {
                    NOT = { has_variable = market_leader }
                    NOT = { country_exists = var:market_leader }
                    var:market_leader = {
                        NOT = { check_variable = { market_leader = THIS } }
                    }
                }
            }
            set_variable = { market_leader = THIS }
            set_variable = { market_capital = THIS.capital }
            clear_array = market_countries
            add_to_array = { market_countries = THIS }
        }
    }

    get_price = {
        #Given the resource & supply/demand, returns price
        #Input: r_type (Resource Token), s_temp (supply), d_temp (demand)
        #Return: p_return_temp
        #Any Scope

        set_temp_variable = { p_return_temp = global.base_price@var:r_type }
        if = {
            limit = {
                NOT = { check_variable = { r_type = token:valuables } }
                is_in_array = { global.resource_token_array = r_type }
                #NOT = { check_variable = { r_type = token:resource_finance } }
            }
            if = {
                limit = {
                    check_variable = { s_temp > d_temp }
                }
                if = {
                    limit = {
                        check_variable = { d_temp > 0.0 }
                    }
                    set_temp_variable = { grp_sd = s_temp }
                    divide_temp_variable = { grp_sd = d_temp }

                    set_temp_variable = { grp_multiplier = 3 }
                    subtract_from_temp_variable = { grp_multiplier = grp_sd }
                    divide_temp_variable = { grp_multiplier = 2 }

                    if = {
                        limit = {
                            check_variable = { grp_multiplier < 0.25 }
                        }
                        set_temp_variable = { grp_multiplier = 0.25 }
                    }
                }
                else = {
                    set_temp_variable = { grp_multiplier = 0.25 }
                }

                multiply_temp_variable = { p_return_temp = grp_multiplier } #P = B * ((3 - S/D) / 2)
            }
            else_if = {
                limit = {
                    check_variable = { s_temp < d_temp }
                }
                if = {
                    limit = {
                        check_variable = { s_temp > 0.0 }
                    }
                    set_temp_variable = { grp_multiplier = d_temp }
                    divide_temp_variable = { grp_multiplier = s_temp }
                    add_to_temp_variable = { grp_multiplier = 1 }
                    divide_temp_variable = { grp_multiplier = 2 }

                    if = {
                        limit = {
                            check_variable = { grp_multiplier > 2.0 }
                        }
                        set_temp_variable = { grp_multiplier = 2.0 }
                    }
                }
                else = {
                    set_temp_variable = { grp_multiplier = 2.0 }
                }

                multiply_temp_variable = { p_return_temp = grp_multiplier } #P = B * ( (D/S + 1) / 2)
            }
        }
        else_if = {
            limit = {
                check_variable = { r_type = token:valuables }
            }
            multiply_temp_variable = { p_return_temp = 2 }
        }
    }

    calc_industrial_capacity = {
        set_variable = { industrial_capacity = global.base_industrial_capacity }
        set_variable = { industrial_capacity_use = 0 }

        for_each_loop = {
            array = industries
            value = b_type

            add_to_variable = { industrial_capacity_use = industrial_capacity_use@var:b_type }
            add_to_variable = { industrial_capacity = industrial_capacity@var:b_type }
        }


        set_variable = { price_industrial_capacity = global.base_price_industrial_capacity }
        if = {
            limit = {
                check_variable = { industrial_capacity_use > industrial_capacity }
            }
            set_variable = { industrial_capacity_service = industrial_capacity }
            divide_variable = { industrial_capacity_service = industrial_capacity_use }
            # multiply_variable = { industrial_capacity_service = industrial_capacity }
            # divide_variable = { industrial_capacity_service = industrial_capacity_use }
        }
        else = {
            set_variable = { industrial_capacity_service = 1 }
        }

        set_temp_variable = { industrial_capacity_use_temp = industrial_capacity_use }
        multiply_temp_variable = { industrial_capacity_use_temp = 1.25 }
        if = {
            limit = {
                check_variable = { industrial_capacity_use > industrial_capacity }
            }
            if = {
                limit = {
                    check_variable = { industrial_capacity > 0.0 }
                }
                set_temp_variable = { grp_multiplier = industrial_capacity_use_temp }
                divide_temp_variable = { grp_multiplier = industrial_capacity }
                add_to_temp_variable = { grp_multiplier = 1 }
                divide_temp_variable = { grp_multiplier = 2 }

                if = {
                    limit = {
                        check_variable = { grp_multiplier > 2.0 }
                    }
                    set_temp_variable = { grp_multiplier = 2.0 }
                }
            }
            else = {
                set_temp_variable = { grp_multiplier = 2.0 }
            }

            multiply_variable = { price_industrial_capacity = grp_multiplier }
        }
        else = {
            if = {
                limit = {
                    check_variable = { industrial_capacity_use_temp > 0.0 }
                }
                set_temp_variable = { grp_sd = industrial_capacity }
                divide_temp_variable = { grp_sd = industrial_capacity_use_temp }

                set_temp_variable = { grp_multiplier = 3 }
                subtract_from_temp_variable = { grp_multiplier = grp_sd }
                divide_temp_variable = { grp_multiplier = 2 }

                if = {
                    limit = {
                        check_variable = { grp_multiplier < 0.25 }
                    }
                    set_temp_variable = { grp_multiplier = 0.25 }
                }
            }
            else = {
                set_temp_variable = { grp_multiplier = 0.25 }
            }

            multiply_variable = { price_industrial_capacity = grp_multiplier } #P = B * ((3 - S/D) / 2)
        }
    }
    calc_shipping_capacity = {
        set_variable = { shipping_capacity_convoys = shipping_convoys }
        multiply_variable = { shipping_capacity_convoys = global.shipping_capacity_per_convoy }

        set_variable = { shipping_capacity = shipping_capacity_convoys }
        every_controlled_state = {
            for_each_loop = {
                array = buildings
                value = b_type

                add_to_variable = { PREV.shipping_capacity = shipping_capacity@var:b_type }
            }
        }
    }

	calculate_military_demand = {
		battalion_count_update = yes

        set_temp_variable = { equipment_cost_factor_temp = modifier@military_equipment_cost_factor }
        add_to_temp_variable = { equipment_cost_factor_temp = 1 }
        set_temp_variable = { naval_equipment_cost_factor_temp = modifier@military_equipment_cost_factor }
        add_to_temp_variable = { naval_equipment_cost_factor_temp = modifier@naval_equipment_cost_factor }
        add_to_temp_variable = { naval_equipment_cost_factor_temp = 1 }

		#Needs
			#Reset
				set_variable = { military_need@token:resource_food = 0 } #Food
				set_variable = { military_need@token:resource_consumer_goods = 0 } #Basic Supplies
				set_variable = { military_need@token:resource_luxury_goods = 0 } #Officer stuff
				set_variable = { military_need@token:resource_industrial_goods = 0 } #Machinery, Heavy Gun Parts, Building Materials, etc.
			#

			#Army Needs
				#Infantry
				set_temp_variable = { need_temp = global.infantry_need@token:resource_food }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.infantry_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.infantry_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.infantry_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = infantry_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Militia
				set_temp_variable = { need_temp = global.militia_need@token:resource_food }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.militia_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.militia_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.militia_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = militia_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Artillery
				set_temp_variable = { need_temp = global.artillery_need@token:resource_food }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.artillery_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.artillery_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.artillery_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = artillery_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Cavalry
				set_temp_variable = { need_temp = global.cavalry_need@token:resource_food }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.cavalry_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.cavalry_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.cavalry_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = cavalry_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Mobile
				set_temp_variable = { need_temp = global.mobile_need@token:resource_food }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.mobile_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.mobile_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.mobile_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = mobile_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Armor
				set_temp_variable = { need_temp = global.armor_need@token:resource_food }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.armor_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.armor_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.armor_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = armor_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Robotic
				set_temp_variable = { need_temp = global.robotic_need@token:resource_food }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.robotic_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.robotic_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.robotic_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = robotic_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Support
				set_temp_variable = { need_temp = global.support_need@token:resource_food }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.support_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.support_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.support_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = support_battalions_weighted }
				add_to_variable = { military_need@token:resource_industrial_goods = need_temp }

				#Total
                multiply_variable = { military_need@token:resource_food = naval_equipment_cost_factor_temp }
                multiply_variable = { military_need@token:resource_consumer_goods = naval_equipment_cost_factor_temp }
                multiply_variable = { military_need@token:resource_luxury_goods = naval_equipment_cost_factor_temp }
                multiply_variable = { military_need@token:resource_industrial_goods = naval_equipment_cost_factor_temp }

				set_variable = { military_army_need@token:resource_food = military_need@token:resource_food }
				set_variable = { military_army_need@token:resource_consumer_goods = military_need@token:resource_consumer_goods }
				set_variable = { military_army_need@token:resource_luxury_goods = military_need@token:resource_luxury_goods }
				set_variable = { military_army_need@token:resource_industrial_goods = military_need@token:resource_industrial_goods }
			#

			#Navy Needs
				set_variable = { military_navy_need@token:resource_food = 0 }
				set_variable = { military_navy_need@token:resource_consumer_goods = 0 }
				set_variable = { military_navy_need@token:resource_luxury_goods = 0 }
				set_variable = { military_navy_need@token:resource_industrial_goods = 0 }

				#Screen
				set_temp_variable = { need_temp = global.screen_need@token:resource_food }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.screen_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.screen_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.screen_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = screen_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_industrial_goods = need_temp }

				#Capital
				set_temp_variable = { need_temp = global.capital_need@token:resource_food }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.capital_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.capital_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.capital_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = capital_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_industrial_goods = need_temp }

				#Submarine
				set_temp_variable = { need_temp = global.submarine_need@token:resource_food }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_food = need_temp }

				set_temp_variable = { need_temp = global.submarine_need@token:resource_consumer_goods }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_consumer_goods = need_temp }

				set_temp_variable = { need_temp = global.submarine_need@token:resource_luxury_goods }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_luxury_goods = need_temp }

				set_temp_variable = { need_temp = global.submarine_need@token:resource_industrial_goods }
				multiply_temp_variable = { need_temp = submarine_ships_weighted }
				add_to_variable = { military_navy_need@token:resource_industrial_goods = need_temp }

				#Total
                multiply_variable = { military_navy_need@token:resource_food = equipment_cost_factor_temp }
                multiply_variable = { military_navy_need@token:resource_consumer_goods = equipment_cost_factor_temp }
                multiply_variable = { military_navy_need@token:resource_luxury_goods = equipment_cost_factor_temp }
                multiply_variable = { military_navy_need@token:resource_industrial_goods = equipment_cost_factor_temp }

				add_to_variable = { military_need@token:resource_food = military_navy_need@token:resource_food }
				add_to_variable = { military_need@token:resource_consumer_goods = military_navy_need@token:resource_consumer_goods }
				add_to_variable = { military_need@token:resource_luxury_goods = military_navy_need@token:resource_luxury_goods }
				add_to_variable = { military_need@token:resource_industrial_goods = military_navy_need@token:resource_industrial_goods }
			#

			#Airforce Needs
				set_variable = { military_airforce_need@token:resource_food = num_deployed_planes }
				multiply_variable = { military_airforce_need@token:resource_food = global.deployed_planes_need@token:resource_food }

				set_variable = { military_airforce_need@token:resource_consumer_goods = num_deployed_planes }
				multiply_variable = { military_airforce_need@token:resource_consumer_goods = global.deployed_planes_need@token:resource_consumer_goods }

				set_variable = { military_airforce_need@token:resource_luxury_goods = num_deployed_planes }
				multiply_variable = { military_airforce_need@token:resource_luxury_goods = global.deployed_planes_need@token:resource_luxury_goods } #so much steak

				set_variable = { military_airforce_need@token:resource_industrial_goods = num_deployed_planes }
				multiply_variable = { military_airforce_need@token:resource_industrial_goods = global.deployed_planes_need@token:resource_industrial_goods }
                
                multiply_variable = { military_airforce_need@token:resource_food = equipment_cost_factor_temp }
                multiply_variable = { military_airforce_need@token:resource_consumer_goods = equipment_cost_factor_temp }
                multiply_variable = { military_airforce_need@token:resource_luxury_goods = equipment_cost_factor_temp }
                multiply_variable = { military_airforce_need@token:resource_industrial_goods = equipment_cost_factor_temp }

				add_to_variable = { military_need@token:resource_food = military_airforce_need@token:resource_food }
				add_to_variable = { military_need@token:resource_consumer_goods = military_airforce_need@token:resource_consumer_goods }
				add_to_variable = { military_need@token:resource_luxury_goods = military_airforce_need@token:resource_luxury_goods }
				add_to_variable = { military_need@token:resource_industrial_goods = military_airforce_need@token:resource_industrial_goods }
			#
		#
		#Demand
			#Army
			set_variable = { military_army_demand@token:resource_food = military_army_need@token:resource_food }
			multiply_variable = { military_army_demand@token:resource_food = military_spending_percentage }
			divide_variable = { military_army_demand@token:resource_food = 100 }

			set_variable = { military_army_demand@token:resource_consumer_goods = military_army_need@token:resource_consumer_goods }
			multiply_variable = { military_army_demand@token:resource_consumer_goods = military_spending_percentage }
			divide_variable = { military_army_demand@token:resource_consumer_goods = 100 }

			set_variable = { military_army_demand@token:resource_luxury_goods = military_army_need@token:resource_luxury_goods }
			multiply_variable = { military_army_demand@token:resource_luxury_goods = military_spending_percentage }
			divide_variable = { military_army_demand@token:resource_luxury_goods = 100 }

			set_variable = { military_army_demand@token:resource_industrial_goods = military_army_need@token:resource_industrial_goods }
			multiply_variable = { military_army_demand@token:resource_industrial_goods = military_spending_percentage }
			divide_variable = { military_army_demand@token:resource_industrial_goods = 100 }

			#Navy
			set_variable = { military_navy_demand@token:resource_food = military_navy_need@token:resource_food }
			multiply_variable = { military_navy_demand@token:resource_food = military_spending_percentage }
			divide_variable = { military_navy_demand@token:resource_food = 100 }

			set_variable = { military_navy_demand@token:resource_consumer_goods = military_navy_need@token:resource_consumer_goods }
			multiply_variable = { military_navy_demand@token:resource_consumer_goods = military_spending_percentage }
			divide_variable = { military_navy_demand@token:resource_consumer_goods = 100 }

			set_variable = { military_navy_demand@token:resource_luxury_goods = military_navy_need@token:resource_luxury_goods }
			multiply_variable = { military_navy_demand@token:resource_luxury_goods = military_spending_percentage }
			divide_variable = { military_navy_demand@token:resource_luxury_goods = 100 }

			set_variable = { military_navy_demand@token:resource_industrial_goods = military_navy_need@token:resource_industrial_goods }
			multiply_variable = { military_navy_demand@token:resource_industrial_goods = military_spending_percentage }
			divide_variable = { military_navy_demand@token:resource_industrial_goods = 100 }

			#Airforce
			set_variable = { military_airforce_demand@token:resource_food = military_airforce_need@token:resource_food }
			multiply_variable = { military_airforce_demand@token:resource_food = military_spending_percentage }
			divide_variable = { military_airforce_demand@token:resource_food = 100 }

			set_variable = { military_airforce_demand@token:resource_consumer_goods = military_airforce_need@token:resource_consumer_goods }
			multiply_variable = { military_airforce_demand@token:resource_consumer_goods = military_spending_percentage }
			divide_variable = { military_airforce_demand@token:resource_consumer_goods = 100 }

			set_variable = { military_airforce_demand@token:resource_luxury_goods = military_airforce_need@token:resource_luxury_goods }
			multiply_variable = { military_airforce_demand@token:resource_luxury_goods = military_spending_percentage }
			divide_variable = { military_airforce_demand@token:resource_luxury_goods = 100 }

			set_variable = { military_airforce_demand@token:resource_industrial_goods = military_airforce_need@token:resource_industrial_goods }
			multiply_variable = { military_airforce_demand@token:resource_industrial_goods = military_spending_percentage }
			divide_variable = { military_airforce_demand@token:resource_industrial_goods = 100 }

			#Total
			set_variable = { military_demand@token:resource_food = military_need@token:resource_food }
			multiply_variable = { military_demand@token:resource_food = military_spending_percentage }
			divide_variable = { military_demand@token:resource_food = 100 }

			set_variable = { military_demand@token:resource_consumer_goods = military_need@token:resource_consumer_goods }
			multiply_variable = { military_demand@token:resource_consumer_goods = military_spending_percentage }
			divide_variable = { military_demand@token:resource_consumer_goods = 100 }

			set_variable = { military_demand@token:resource_luxury_goods = military_need@token:resource_luxury_goods }
			multiply_variable = { military_demand@token:resource_luxury_goods = military_spending_percentage }
			divide_variable = { military_demand@token:resource_luxury_goods = 100 }

			set_variable = { military_demand@token:resource_industrial_goods = military_need@token:resource_industrial_goods }
			multiply_variable = { military_demand@token:resource_industrial_goods = military_spending_percentage }
			divide_variable = { military_demand@token:resource_industrial_goods = 100 }
		#
	}

    add_trade = {
        # resource_temp
        # amount_temp
        # no_update_temp

		hidden_effect = {
			if = { limit = { NOT = { is_in_array = { trade_routes = resource_temp } } } 
				add_to_array = { trade_routes = resource_temp }
                if = {
                    limit = {
                        check_variable = { no_update_temp = 0 }
                    }
                    trade_update = yes
                }
			}
		}
    }
	remove_trade = {
        # resource_temp - resource token
		hidden_effect = {
			if = { limit = { is_in_array = { trade_routes = resource_temp } }
				remove_from_array = { trade_routes = resource_temp }
				set_variable = { offers@var:resource_temp = 0 }
                set_variable = { shipping_use@var:resource_temp = 0 }
                set_variable = { trade@var:resource_temp = 0 }
                set_variable = { trade_productivity@var:resource_temp = 0 }
                set_variable = { trade_value@var:resource_temp = 0 }
                set_variable = { trade_tariffs@var:resource_temp = 0 }
                set_variable = { trade_profit@var:resource_temp = 0 }
                set_variable = { trade_jobs@var:resource_temp = 0 }

                if = {
                    limit = {
                        check_variable = { no_update_temp = 0 }
                    }
                    trade_update = yes
                }
			}
		}
	}

    adjust_trade = { # Adjusts trade offers by given amount
        # resource_temp - resource token
        # amount_temp - Positive values for increasing imports/decreasing exports and Negative values for decreasing imports/increasing exports
        # stop_at_zero_temp - Set to non-zero value to allow reductions in exports/imports to go past 0 and flip to become imports/exports respectively.
        #                     AKA makes it so if you reduce exports by 200 when you're exporting 100, instead of it just being set to 0, it gets set to 100 immports
        # no_update_temp - Set to non-zero to not update trade

        round_temp_variable = amount_temp

        if = {
            limit = {
                NOT = { check_variable = { amount_temp = 0 } }
            }
            if = { # IMPORTING
                limit = {
                    check_variable = { offers@var:resource_temp > 0 }
                }
                add_to_variable = { offers@var:resource_temp = amount_temp }
                if = {
                    limit = {
                        check_variable = { stop_at_zero_temp = 0 }
                        check_variable = { offers@var:resource_temp < 0 }
                    }
                    set_variable = { offers@var:resource_temp = 0 }
                }
            }
            else_if = { # EXPORTING
                limit = {
                    check_variable = { offers@var:resource_temp < 0 }
                }
                add_to_variable = { offers@var:resource_temp = amount_temp }
                if = {
                    limit = {
                        check_variable = { stop_at_zero_temp = 0 }
                        check_variable = { offers@var:resource_temp > 0 }
                    }
                    set_variable = { offers@var:resource_temp = 0 }
                }
            }
            else = { # NEW TRADE
                add_to_variable = { offers@var:resource_temp = amount_temp }
            }
        }

        set_temp_variable = { amount_temp = offers@var:resource_temp }
        set_trade = yes # for adding trade routes & trade update & making sure stuff is in boundaries
    }
    set_trade = { # Sets trade offers to given amount
        # resource_temp - resource token
        # amount_temp - Positive values for increasing imports/decreasing exports and Negative values for decreasing imports/increasing exports
        # no_update_temp - Set to non-zero to not update trade
        
        round_temp_variable = amount_temp
        
        # Max & Min Trade
        set_temp_variable = { trade_max_temp = trade_supply@var:resource_temp } # Imports - Max is from global supply
        multiply_temp_variable = { trade_max_temp = 3 }
        subtract_from_temp_variable = { trade_max_temp = trade_demand@var:resource_temp }
        if = {
            limit = {
                check_variable = { trade@var:resource_temp > 0 }
            }
            add_to_temp_variable = { trade_max_temp = trade@var:resource_temp }
        }
        clamp_temp_variable = { var = trade_max_temp min = 0 }

        set_temp_variable = { trade_min_temp = supply@var:resource_temp } # Exports - Min is from local supply
        multiply_temp_variable = { trade_min_temp = -3 }
        add_to_temp_variable = { trade_min_temp = need@var:resource_temp }
        clamp_temp_variable = { var = trade_min_temp max = 0 }

        if = {
            limit = {
                check_variable = { global_market_price_compared_to_base@var:resource_temp > -0.75 }
            }
            clamp_temp_variable = { var = amount_temp max = trade_max_temp min = trade_min_temp }
        }
        else = {
            set_temp_variable = { trade_max_temp = need@var:resource_temp }
            multiply_temp_variable = { trade_max_temp = 2.5 }
            subtract_from_temp_variable = { trade_max_temp = production@var:resource_temp }
            clamp_temp_variable = { var = trade_max_temp min = 0 }
            clamp_temp_variable = { var = amount_temp max = trade_max_temp min = trade_min_temp }
        }

        # Set Offers
        set_variable = { offers@var:resource_temp = amount_temp }
        #log = "Min: [?trade_min_temp], Max: [?trade_max_temp]"

		if = {
			limit = {
				NOT = { check_variable = { offers@var:resource_temp = 0 } }
				NOT = { is_in_array = { trade_routes = resource_temp } }
			}
			add_trade = yes
		}
        else_if = {
            limit = {
                check_variable = { no_update_temp = 0 }
            }
            trade_update = yes
        }
    }
    adjust_trade_step = { # Adjusts trade offers by given amount multiplied by trade step size
        # resource_temp - resource token
        # steps_temp - Amount of steps to add/remove.
        # no_update_temp - Set to non-zero to not update trade

        set_temp_variable = { amount_temp = trade_step_size@var:resource_temp }
        round_temp_variable = steps_temp
        multiply_temp_variable = { amount_temp = steps_temp }

        adjust_trade = yes
    }
    set_trade_step ={ # Sets trade offers to given amount multiplied by trade step size
        # resource_temp - resource token
        # steps_temp - Amount of steps to set to
        # stop_at_zero_temp - Set to non-zero value to allow reductions in exports/imports to go past 0 and flip to become imports/exports respectively.
        #                     AKA makes it so if you reduce exports by 200 when you're exporting 100, instead of it just being set to 0, it gets set to 100 immports
        # no_update_temp - Set to non-zero to not update trade

        set_temp_variable = { amount_temp = trade_step_size@var:resource_temp }
        round_temp_variable = steps_temp
        multiply_temp_variable = { amount_temp = steps_temp }

        set_trade = yes
    }

    trade_update = {
        # Normal Trade Update Script

        for_each_loop = {
            array = global.resource_token_array
            value = r_type

            set_variable = { shipping_use@var:r_type = 0 }
            set_variable = { trade@var:r_type = 0 }
            set_variable = { trade_productivity@var:r_type = 0 }
            set_variable = { trade_value@var:r_type = 0 }
            set_variable = { trade_tariffs@var:r_type = 0 }
            set_variable = { trade_profit@var:r_type = 0 }
            set_variable = { trade_jobs@var:r_type = 0 }
        }

        calc_shipping_capacity_use = yes # Would normally be executed on every country before the next two

        global_market_update = yes
        trade_update_quantity = yes
        trade_update_value = yes
        global_market_calculations = yes
        trade_step_calc = yes

        if = {
            limit = {
                is_ai = no
            }
            country_update_trade_display = yes
        }
    }
    calc_shipping_capacity_use = {
        # Only updates shipping capacity usage

        set_variable = { shipping_capacity_use = 0 }
        # Shipping Capacity
            for_each_loop = {
                array = trade_routes
                value = r_type

                set_variable = { shipping_use@var:r_type = offers@var:r_type }
                if = {
                    limit = {
                        check_variable = { shipping_use@var:r_type < 0 }
                    }
                    multiply_variable = { shipping_use@var:r_type = -1 }
                }
                multiply_variable = { shipping_use@var:r_type = global.shipping_cost@var:r_type }
                set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
                add_to_temp_variable = { modifier_temp = 1 }
                multiply_variable = { shipping_use@var:r_type = modifier_temp }

                add_to_variable = { shipping_capacity_use = shipping_use@var:r_type }
            }

            #Shipping Efficiency
            if = {
                limit = {
                    check_variable = { shipping_capacity_use > shipping_capacity }
                }
                set_variable = { shipping_efficiency = shipping_capacity }
                divide_variable = { shipping_efficiency = shipping_capacity_use }
            }
            else = {
                set_variable = { shipping_efficiency = 1 }
            }
            
            if = {
                limit = {
                    check_variable = { shipping_capacity = 0 }
                }
                set_variable = { shipping_usage = 1 }
            }
            else = {
                set_variable = { shipping_usage = shipping_capacity_use }
                divide_variable = { shipping_usage = shipping_capacity }
            }
        #
    }
    trade_update_quantity = {
        # Only updates trade routes & supply/demand/prices.

        for_each_loop = {  # Actual Trade
            array = trade_routes
            value = r_type

            set_variable = { trade@var:r_type = offers@var:r_type }

            if = {
                limit = {
                    check_variable = { offers@var:r_type > 0 } # Importing
                    check_variable = { trade_supply@var:r_type < trade_demand@var:r_type } # Not enough countries to buy from
                }
                set_temp_variable = { trade_portion_temp = trade_supply@var:r_type }
                multiply_temp_variable = { trade_portion_temp = 3 }
                divide_temp_variable = { trade_portion_temp = trade_demand@var:r_type }
                if = {
                    limit = {
                        check_variable = { trade_portion_temp > 1 }
                    }
                    set_temp_variable = { trade_portion_temp = 1 }
                }
                multiply_variable = { trade@var:r_type = trade_portion_temp }
            }
            else_if = {
                limit = {
                    check_variable = { offers@var:r_type < 0 } # Exporting
                    check_variable = { trade_demand@var:r_type < trade_supply@var:r_type } # Not enough countries to sell to
                }
                set_temp_variable = { trade_portion_temp = trade_demand@var:r_type }
                multiply_temp_variable = { trade_portion_temp = 2.5 }
                divide_temp_variable = { trade_portion_temp = trade_supply@var:r_type }
                if = {
                    limit = {
                        check_variable = { trade_portion_temp > 1 }
                    }
                    set_temp_variable = { trade_portion_temp = 1 }
                }
                multiply_variable = { trade@var:r_type = trade_portion_temp }
            }

            multiply_variable = { trade@var:r_type = shipping_efficiency }
        }

        market_leader_check = yes
        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_calculations = yes
        }
    }
    trade_update_value = {
        set_variable = { trade_productivity = 0 } # Average trade productivity
        set_variable = { trade_jobs = 0 } # Total trade jobs
        set_variable = { trade_value = 0 } # Total trade value
        set_variable = { trade_profit = 0 } # Total trade profit

        # Trade Value & Tariffs
        for_each_loop = {
            array = global.resource_token_array
            value = r_type

            if = { # Normal Trade
                limit = {
                    NOT = { check_variable = { offers@var:r_type = 0 } }
                }
                set_temp_variable = { trade_temp = trade@var:r_type }
            }
            else_if = { # Importing with 1.1k employees
                limit = {
                    check_variable = { global_market_price@var:r_type < price@var:r_type }
                }
                set_temp_variable = { trade_temp = global.shipping_amount@var:r_type }
            }
            else = { # Exporting with 1.1k employees
                set_temp_variable = { trade_temp = global.shipping_amount@var:r_type }
                multiply_temp_variable = { trade_temp = -1 }
            }


            if = { #Import
                limit = {
                    check_variable = { trade_temp > 0 }
                }
                # Value
                set_variable = { trade_value@var:r_type = trade_temp }
                multiply_variable = { trade_value@var:r_type = price@var:r_type }

                set_temp_variable = { temp_value = trade_temp }
                multiply_temp_variable = { temp_value = global_market_price@var:r_type }

                # Tariffs
                set_variable = { trade_tariffs@var:r_type = import_tariff_percentage_actual }
                divide_variable = { trade_tariffs@var:r_type = 100 }
                multiply_variable = { trade_tariffs@var:r_type = trade_value@var:r_type }

                # Adding temp value
                subtract_from_variable = { trade_value@var:r_type = temp_value }

                # Profit
                set_variable = { trade_profit@var:r_type = trade_value@var:r_type }
                subtract_from_variable = { trade_profit@var:r_type = trade_tariffs@var:r_type }
            }
            else_if = { #Export
                limit = {
                    check_variable = { trade_temp < 0 }
                }
                # Value
                set_variable = { trade_value@var:r_type = trade_temp }
                multiply_variable = { trade_value@var:r_type = global_market_price@var:r_type }
                multiply_variable = { trade_value@var:r_type = -1 }

                set_temp_variable = { temp_value = trade_temp }
                multiply_temp_variable = { temp_value = price@var:r_type }

                # Tariffs
                set_variable = { trade_tariffs@var:r_type = export_tariff_percentage_actual }
                divide_variable = { trade_tariffs@var:r_type = -100 }
                multiply_variable = { trade_tariffs@var:r_type = trade_value@var:r_type }
                
                # Adding temp value
                add_to_variable = { trade_value@var:r_type = temp_value }

                # Profit
                set_variable = { trade_profit@var:r_type = trade_value@var:r_type }
                add_to_variable = { trade_profit@var:r_type = trade_tariffs@var:r_type }
            }
            else = {
                set_variable = { trade_value@var:r_type = 0 }
                set_variable = { trade_tariffs@var:r_type = 0 }
                set_variable = { trade_profit@var:r_type = 0 }
            }

            if = { # If offers are set to 0, then act as though you have 1.1k employees, and reset all the variables above
                limit = {
                    check_variable = { offers@var:r_type = 0 }
                }
                set_variable = { trade_productivity@var:r_type = trade_profit@var:r_type }
                divide_variable = { trade_productivity@var:r_type = 1.01 }
                
                set_variable = { trade_value@var:r_type = 0 }
                set_variable = { trade_tariffs@var:r_type = 0 }
                set_variable = { trade_profit@var:r_type = 0 }
                set_variable = { trade_jobs@var:r_type = 0 }
            }
            else = { # Otherwise, set employee count & productivity
                set_variable = { trade_jobs@var:r_type = offers@var:r_type }
                divide_variable = { trade_jobs@var:r_type = global.shipping_amount@var:r_type }
                if = {
                    limit = {
                        check_variable = { trade_jobs@var:r_type < 0 }
                    }
                    multiply_variable = { trade_jobs@var:r_type = -1 }
                }
                add_to_variable = { trade_jobs@var:r_type = 0.01 }

                set_variable = { trade_productivity@var:r_type = trade_profit@var:r_type }
                divide_variable = { trade_productivity@var:r_type = trade_jobs@var:r_type }

                add_to_variable = { trade_jobs = trade_jobs@var:r_type }
                add_to_variable = { trade_value = trade_value@var:r_type }
                add_to_variable = { trade_profit = trade_profit@var:r_type }
            }
        }
        set_variable = { trade_productivity = trade_profit }
        if = {
            limit = {
                check_variable = { trade_jobs > 0 }
            }
            divide_variable = { trade_productivity = trade_jobs }
        }
    }
	global_market_update = { # Updates global market-related variables for a country
		# Country Scope
        for_each_loop = {
            array = global.resource_token_array
            value = r_type
            set_variable = { global_market_supply@var:r_type = 0 }
            set_variable = { global_market_demand@var:r_type = 0 }
            set_variable = { trade_supply@var:r_type = 0 }
            set_variable = { trade_demand@var:r_type = 0 }

            set_temp_variable = { offers_temp = offers@var:r_type }
            multiply_temp_variable = { offers_temp = shipping_efficiency }

            add_to_variable = { global_market_supply@var:r_type = production@var:r_type }
            add_to_variable = { global_market_demand@var:r_type = need@var:r_type }
            if = { # This country is importing
                limit = {
                    check_variable = { offers@var:r_type > 0 }
                }
                add_to_variable = { trade_demand@var:r_type = offers_temp }
            }
            else = { # This country is exporting
                subtract_from_variable = { trade_supply@var:r_type = offers_temp }
            }
        }

        set_temp_variable = { country_temp = THIS }
        for_each_scope_loop = {
            array = global.markets
            if = {
                limit = {
                    can_trade_with = yes
                }
                for_each_loop = {
                    array = global.resource_token_array
                    value = r_type
                    set_temp_variable = { offers_temp = offers@var:r_type }
                    multiply_temp_variable = { offers_temp = shipping_efficiency }

                    add_to_variable = { PREV.global_market_supply@var:r_type = production@var:r_type }
                    add_to_variable = { PREV.global_market_demand@var:r_type = need@var:r_type }
                    if = { # This country is importing
                        limit = {
                            check_variable = { offers@var:r_type > 0 }
                        }
                        add_to_variable = { PREV.trade_demand@var:r_type = offers_temp }
                    }
                    else = { # This country is exporting
                        subtract_from_variable = { PREV.trade_supply@var:r_type = offers_temp }
                    }
                }
            }
        }

        global_market_calculations = yes
    }
    global_market_calculations = {
        for_each_loop = {
            array = global.resource_token_array
            value = r_type
            set_variable = { global_market_balance@var:r_type = global_market_supply@var:r_type }
			subtract_from_variable = { global_market_balance@var:r_type = global_market_demand@var:r_type }

            set_temp_variable = { s_temp = global_market_supply@var:r_type }
            set_temp_variable = { d_temp = global_market_demand@var:r_type }
            get_price = yes
            set_variable = { global_market_price@var:r_type = p_return_temp }
			
			set_variable = { global_market_price_compared_to_base@var:r_type = global_market_price@var:r_type }
			divide_variable = { global_market_price_compared_to_base@var:r_type = global.base_price@var:r_type }
			subtract_from_variable = { global_market_price_compared_to_base@var:r_type = 1 }
            
            set_variable = { global_market_price_difference@var:r_type = price@var:r_type }
            subtract_from_variable = { global_market_price_difference@var:r_type = global_market_price@var:r_type }
			divide_variable = { global_market_price_difference@var:r_type = price@var:r_type }
        }
    }
    trade_step_calc = {
        for_each_loop = {
            array = global.resource_token_array
            value = r_type

            # Gets the trade step size for this product
            set_temp_variable = { trade_step_temp = global.shipping_amount@var:r_type }
            divide_temp_variable = { trade_step_temp = 50 }
            round_temp_variable = trade_step_temp
            clamp_temp_variable = { var = trade_step_temp min = 1 }

            # Min amount to adjust, get smallest amount of market demand/supply, global demand/supply
            set_temp_variable = { min_adjust_amount = supply@var:r_type }
            if = { limit = { check_variable = { min_adjust_amount > demand@var:r_type } } set_temp_variable = { min_adjust_amount = demand@var:r_type } }
            if = { limit = { check_variable = { min_adjust_amount > trade_supply@var:r_type } } set_temp_variable = { min_adjust_amount = trade_supply@var:r_type } }
            if = { limit = { check_variable = { min_adjust_amount > trade_demand@var:r_type } } set_temp_variable = { min_adjust_amount = trade_demand@var:r_type } }

            multiply_temp_variable = { min_adjust_amount = 0.005 } # 0.5% of that amount

            set_temp_variable = { amount_temp = min_adjust_amount }
            divide_temp_variable = { amount_temp = trade_step_temp }
            round_temp_variable = amount_temp
            clamp_temp_variable = { var = amount_temp min = 1 }
            multiply_temp_variable = { amount_temp = trade_step_temp }

            set_variable = { trade_step_size@var:r_type = amount_temp }
        }
    }

	country_update_trade_display = {
		#Trade Routes
		clear_array = show_trade_routes
		
		for_each_loop = {
			array = trade_routes
			index = tr_i
			value = tr_token
			break = tr_b

			for_each_loop = {
				array = show_trade_routes
				index = ii
				value = vv
				break = bb

				if = {
					limit = {
						check_variable = { vv > tr_token }
					}
					add_to_array = { 
						array = show_trade_routes 
						value = tr_token
						index = ii
					}
					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 0 }
				}
				add_to_array = { show_trade_routes = tr_token }
			}
		}

		#Balance Array
		clear_array = high_balance_array
		clear_array = high_balance_amount_array
		clear_array = high_balance_price_array
		clear_array = low_balance_array
		clear_array = low_balance_amount_array
		clear_array = low_balance_price_array

		for_each_loop = {
			array = global.resource_token_array
			index = tr_i
			value = tr_token
			break = tr_b

            if = {
                limit = {
                    NOT = { 
                        check_variable = { supply@var:tr_token = 0 } 
                        check_variable = { demand@var:tr_token = 0 } 
                    }
                }
                set_temp_variable = { net_amount_temp = supply@var:tr_token }
                subtract_from_temp_variable = { net_amount_temp = demand@var:tr_token }
                
                for_each_loop = {
                    array = high_balance_amount_array
                    index = ii
                    value = vv
                    break = bb

                    if = {
                        limit = {
                            check_variable = { net_amount_temp > vv }
                        }
                        add_to_array = { 
                            array = high_balance_array 
                            value = tr_token
                            index = ii
                        }
                        add_to_array = { 
                            array = high_balance_amount_array 
                            value = net_amount_temp
                            index = ii
                        }
                        set_temp_variable = { bb = 1 }
                    }
                }
                if = {
                    limit = {
                        check_variable = { bb = 0 }
                    }
                    add_to_array = { high_balance_array = tr_token }
                    add_to_array = { high_balance_amount_array = net_amount_temp }
                }
                add_to_array = { high_balance_price_array = 0 }
            }

		}

		for_loop_effect = {
			start = 0
			end = high_balance_array^num
			value = vv
			break = bb

			set_temp_variable = { ii = high_balance_array^num }
			subtract_from_temp_variable = { ii = vv }
			subtract_from_temp_variable = { ii = 1 }

			add_to_array = { 
				array = low_balance_array 
				value = high_balance_array^ii
			}
			add_to_array = { 
				array = low_balance_amount_array 
				value = high_balance_amount_array^ii
			}
			add_to_array = { low_balance_price_array = 0 }
		}


		for_each_loop = {
			array = high_balance_array
			value = tr_token
			index = tr_i

			set_variable = { high_balance_price_array^tr_i = price@var:tr_token }
			divide_variable = { high_balance_price_array^tr_i = global.base_price@var:tr_token }
			subtract_from_variable = { high_balance_price_array^tr_i = 1 }
		}
		for_each_loop = {
			array = low_balance_array
			value = tr_token
			index = tr_i

			set_variable = { low_balance_price_array^tr_i = price@var:tr_token }
			divide_variable = { low_balance_price_array^tr_i = global.base_price@var:tr_token }
			subtract_from_variable = { low_balance_price_array^tr_i = 1 }
		}

		#Resource List
		clear_array = resource_list_token_array
		clear_array = resource_list_left_price_bar_array
		clear_array = resource_list_right_price_bar_array
		clear_array = resource_list_left_balance_bar_array
		clear_array = resource_list_right_balance_bar_array

		set_temp_variable = { highest_balance_token = 0 }
		set_temp_variable = { highest_balance_temp = 0 }
		set_temp_variable = { lowest_balance_token = 0 }
		set_temp_variable = { lowest_balance_temp = 0 }

		#Default sorted by price (%), can also be sorted by balance, supply, demand
		# resource_list_natural_resources_filter
		# resource_list_produced_resources_filter
		# resource_list_service_resources_filter
		# resource_list_military_resources_filter
		# resource_list_invert_sort
		# resource_list_balance_sort
		# resource_list_supply_sort
		# resource_list_demand_sort
		# resource_list_resource_sort
		for_each_loop = {
			array = global.resource_token_array
			index = tr_i
			value = tr_token
			break = tr_b
			
			# GLOBAL MARKET
			if = {
				limit = {
					check_variable = { selected_market = 0 }
				}
				if = {
					limit = {
						OR = {
							check_variable = { global_market_supply@var:tr_token > 0 }
							check_variable = { global_market_demand@var:tr_token > 0 }
						}
						OR = {
							AND = {
								NOT = { has_country_flag = resource_list_natural_resources_filter }
								NOT = { has_country_flag = resource_list_produced_resources_filter }
								NOT = { has_country_flag = resource_list_service_resources_filter }
								NOT = { has_country_flag = resource_list_military_resources_filter }
							}
							AND = {
								has_country_flag = resource_list_natural_resources_filter
								is_in_array = { global.natural_resources_array = tr_token }
							}
							AND = {
								has_country_flag = resource_list_produced_resources_filter
								is_in_array = { global.produced_resources_array = tr_token }
							}
							AND = {
								has_country_flag = resource_list_service_resources_filter
								is_in_array = { global.service_resources_array = tr_token }
							}
							AND = {
								has_country_flag = resource_list_military_resources_filter
								is_in_array = { global.military_resources_array = tr_token }
							}
						}
					}
					if = {
						limit = {
							check_variable = { global_market_balance@var:tr_token > highest_balance_temp }
						}
						set_temp_variable = { highest_balance_token = tr_token }
						set_temp_variable = { highest_balance_temp = global_market_balance@var:tr_token }
					}
					if = {
						limit = {
							check_variable = { global_market_balance@var:tr_token < lowest_balance_temp }
						}
						set_temp_variable = { lowest_balance_token = tr_token }
						set_temp_variable = { lowest_balance_temp = global_market_balance@var:tr_token }
					}

					if = {
						limit = {
							has_country_flag = resource_list_balance_sort
						}
						set_temp_variable = { new_element_value = global_market_balance@var:tr_token }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_supply_sort
						}
						set_temp_variable = { new_element_value = global_market_supply@var:tr_token }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_demand_sort
						}
						set_temp_variable = { new_element_value = global_market_demand@var:tr_token }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_resource_sort
						}
						set_temp_variable = { new_element_value = global.resources_token_value@var:tr_token }
					}
					else = { #Price sort
						set_temp_variable = { new_element_value = global_market_price_compared_to_base@var:tr_token }
					}
					
					for_each_loop = {
						array = resource_list_token_array
						index = ii
						value = vv
						break = bb

						if = {
							limit = {
								has_country_flag = resource_list_balance_sort
							}
							set_temp_variable = { current_element_value = global_market_balance@var:vv }
						}
						else_if = {
							limit = {
								has_country_flag = resource_list_supply_sort
							}
							set_temp_variable = { current_element_value = global_market_supply@var:vv }
						}
						else_if = {
							limit = {
								has_country_flag = resource_list_demand_sort
							}
							set_temp_variable = { current_element_value = global_market_demand@var:vv }
						}
						else_if = {
							limit = {
								has_country_flag = resource_list_resource_sort
							}
							set_temp_variable = { current_element_value = global.resources_token_value@var:vv }
						}
						else = { #Price sort
							set_temp_variable = { current_element_value = global_market_price_compared_to_base@var:vv }
						}

						if = {
							limit = {
								OR = {
									AND = {
										has_country_flag = resource_list_invert_sort
										check_variable = { new_element_value < current_element_value }
									}
									AND = {
										NOT = { has_country_flag = resource_list_invert_sort }
										check_variable = { new_element_value > current_element_value }
									}
								}
							}
							add_to_array = { 
								array = resource_list_token_array 
								value = tr_token
								index = ii
							}
							set_temp_variable = { bb = 1 }
						}
					}
					if = {
						limit = {
							check_variable = { bb = 0 }
						}
						add_to_array = { resource_list_token_array = tr_token }
					}
				}
			}
			# NATIONAL MARKET
			else_if = {
				limit = {
					OR = {
						check_variable = { selected_market:supply@var:tr_token > 0 }
						check_variable = { selected_market:demand@var:tr_token > 0 }
                        OR = {
                            NOT = { check_variable = { resource@var:tr_token = 0 } }
                            check_variable = { resource_produced@var:tr_token > 0 }
                            check_variable = { resource_consumed@var:tr_token > 0 }
                        }
					}
					OR = {
						AND = {
							NOT = { has_country_flag = resource_list_natural_resources_filter }
							NOT = { has_country_flag = resource_list_produced_resources_filter }
							NOT = { has_country_flag = resource_list_service_resources_filter }
							NOT = { has_country_flag = resource_list_military_resources_filter }
						}
						AND = {
							has_country_flag = resource_list_natural_resources_filter
							is_in_array = { global.natural_resources_array = tr_token }
						}
						AND = {
							has_country_flag = resource_list_produced_resources_filter
							is_in_array = { global.produced_resources_array = tr_token }
						}
						AND = {
							has_country_flag = resource_list_service_resources_filter
							is_in_array = { global.service_resources_array = tr_token }
						}
						AND = {
							has_country_flag = resource_list_military_resources_filter
							is_in_array = { global.military_resources_array = tr_token }
						}
					}
				}
				if = {
					limit = {
						check_variable = { selected_market:balance@var:tr_token > highest_balance_temp }
					}
					set_temp_variable = { highest_balance_token = tr_token }
					set_temp_variable = { highest_balance_temp = selected_market:balance@var:tr_token }
				}
				if = {
					limit = {
						check_variable = { selected_market:balance@var:tr_token < lowest_balance_temp }
					}
					set_temp_variable = { lowest_balance_token = tr_token }
					set_temp_variable = { lowest_balance_temp = selected_market:balance@var:tr_token }
				}

				if = {
					limit = {
						has_country_flag = resource_list_balance_sort
					}
					set_temp_variable = { new_element_value = selected_market:balance@var:tr_token }
				}
				else_if = {
					limit = {
						has_country_flag = resource_list_supply_sort
					}
					set_temp_variable = { new_element_value = selected_market:supply@var:tr_token }
				}
				else_if = {
					limit = {
						has_country_flag = resource_list_demand_sort
					}
					set_temp_variable = { new_element_value = selected_market:demand@var:tr_token }
				}
				else_if = {
					limit = {
						has_country_flag = resource_list_resource_sort
					}
					set_temp_variable = { new_element_value = global.resources_token_value@var:tr_token }
				}
				else = { #Price sort
					set_temp_variable = { new_element_value = selected_market:price_compared_to_base@var:tr_token }
				}
				
				for_each_loop = {
					array = resource_list_token_array
					index = ii
					value = vv
					break = bb

					if = {
						limit = {
							has_country_flag = resource_list_balance_sort
						}
						set_temp_variable = { current_element_value = selected_market:balance@var:vv }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_supply_sort
						}
						set_temp_variable = { current_element_value = selected_market:supply@var:vv }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_demand_sort
						}
						set_temp_variable = { current_element_value = selected_market:demand@var:vv }
					}
					else_if = {
						limit = {
							has_country_flag = resource_list_resource_sort
						}
						set_temp_variable = { current_element_value = global.resources_token_value@var:vv }
					}
					else = { #Price sort
						set_temp_variable = { current_element_value = selected_market:price_compared_to_base@var:vv }
					}

					if = {
						limit = {
							OR = {
								AND = {
									has_country_flag = resource_list_invert_sort
									check_variable = { new_element_value < current_element_value }
								}
								AND = {
									NOT = { has_country_flag = resource_list_invert_sort }
									check_variable = { new_element_value > current_element_value }
								}
							}
						}
						add_to_array = { 
							array = resource_list_token_array 
							value = tr_token
							index = ii
						}
						set_temp_variable = { bb = 1 }
					}
				}
				if = {
					limit = {
						check_variable = { bb = 0 }
					}
					add_to_array = { resource_list_token_array = tr_token }
				}
			}

		}

		if = { # GLOBAL MARKET
			limit = {
				check_variable = { selected_market = 0 }
			}
			for_each_loop = {
				array = resource_list_token_array
				index = ii
				value = vv
				break = bb

				if = {
					limit = {
						check_variable = { global_market_price_compared_to_base@var:vv > 0 }
					}
					set_temp_variable = { right_bar_temp = global_market_price_compared_to_base@var:vv }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
				}
				else = {
					set_temp_variable = { right_bar_temp = global_market_price_compared_to_base@var:vv }
					multiply_temp_variable = { right_bar_temp = -100 }
					divide_temp_variable = { right_bar_temp = 0.75 }
					
					set_temp_variable = { left_bar_temp = 100 }
					subtract_from_temp_variable = { left_bar_temp = right_bar_temp }
					set_temp_variable = { right_bar_temp = 0 }
				}

				add_to_array = { resource_list_left_price_bar_array = left_bar_temp }
				add_to_array = { resource_list_right_price_bar_array = right_bar_temp }
				
				if = {
					limit = {
						check_variable = { global_market_balance@var:vv > 0 }
					}
					set_temp_variable = { right_bar_temp = global_market_balance@var:vv }
					divide_temp_variable = { right_bar_temp = highest_balance_temp }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
				}
				else = {
					set_temp_variable = { right_bar_temp = global_market_balance@var:vv }
					divide_temp_variable = { right_bar_temp = lowest_balance_temp }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
					subtract_from_temp_variable = { left_bar_temp = right_bar_temp }
					set_temp_variable = { right_bar_temp = 0 }
				}

				add_to_array = { resource_list_left_balance_bar_array = left_bar_temp }
				add_to_array = { resource_list_right_balance_bar_array = right_bar_temp }
			}
		}
		else = { # NATIONAL MARKET
			for_each_loop = {
				array = resource_list_token_array
				index = ii
				value = vv
				break = bb

				if = {
					limit = {
						check_variable = { selected_market:price_compared_to_base@var:vv > 0 }
					}
					set_temp_variable = { right_bar_temp = selected_market:price_compared_to_base@var:vv }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
				}
				else = {
					set_temp_variable = { right_bar_temp = selected_market:price_compared_to_base@var:vv }
					multiply_temp_variable = { right_bar_temp = -100 }
					divide_temp_variable = { right_bar_temp = 0.75 }
					
					set_temp_variable = { left_bar_temp = 100 }
					subtract_from_temp_variable = { left_bar_temp = right_bar_temp }
					set_temp_variable = { right_bar_temp = 0 }
				}

				add_to_array = { resource_list_left_price_bar_array = left_bar_temp }
				add_to_array = { resource_list_right_price_bar_array = right_bar_temp }
				
				if = {
					limit = {
						check_variable = { selected_market:balance@var:vv > 0 }
					}
					set_temp_variable = { right_bar_temp = selected_market:balance@var:vv }
					divide_temp_variable = { right_bar_temp = highest_balance_temp }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
				}
				else = {
					set_temp_variable = { right_bar_temp = selected_market:balance@var:vv }
					divide_temp_variable = { right_bar_temp = lowest_balance_temp }
					multiply_temp_variable = { right_bar_temp = 100 }
					divide_temp_variable = { right_bar_temp = 1 }
					
					set_temp_variable = { left_bar_temp = 100 }
					subtract_from_temp_variable = { left_bar_temp = right_bar_temp }
					set_temp_variable = { right_bar_temp = 0 }
				}

				add_to_array = { resource_list_left_balance_bar_array = left_bar_temp }
				add_to_array = { resource_list_right_balance_bar_array = right_bar_temp }
			}
		}

		# Visible Markets
		# market_list_can_trade_filter
		# market_list_allied_filter
		# market_list_enemy_filter
		clear_array = market_list
		for_each_loop = {
			array = global.markets
			value = country_temp

			if = {
				limit = {
					OR = {
						NOT = { has_country_flag = market_list_can_trade_filter }
						can_trade_with = yes
					}
					OR = {
						NOT = { has_country_flag = market_list_allied_filter }
						is_in_faction_with = var:country_temp
						tag = var:country_temp
					}
					OR = {
						NOT = { has_country_flag = market_list_enemy_filter }
						has_war_with = var:country_temp
					}
				}
				add_to_array = { market_list = country_temp }
			}
		}
	}
    

    global_economy_update = { # Updates the list of market leaders & other global variables
        # Global Scope

		set_variable = { global.gdp = 0 }
		clear_array = global.markets
		every_country = {
			limit = {
				check_variable = { market_leader = THIS }
                NOT = { has_variable = has_afr_empire_mechanic_system }
			}
			set_temp_variable = { gdp_temp = gdp }
			divide_temp_variable = { gdp_temp = 1000 }
			add_to_variable = { global.gdp = gdp_temp }

			for_each_loop = {
				array = global.markets
				index = ii
				value = vv
				break = bb

				if = {
					limit = {
						check_variable = { vv:market_gdp < market_gdp }
					}
					add_to_array = { 
						array = global.markets 
						value = THIS
						index = ii
					}
					set_temp_variable = { bb = 1 }
				}
			}
			if = {
				limit = {
					check_variable = { bb = 0 }
				}
				add_to_array = { global.markets = THIS }
			}
		}
    }

    approximate_square_root = {
        # Given sqrt_temp, approximates the square root of the value using Heron's method. Outputs using the same variable

        # Sets initial estimate
        set_temp_variable = { sqrt_approx_temp = 1 }
        set_temp_variable = { sqrt_check = sqrt_temp }
        if = {
            limit = {
                NOT = { check_variable = { sqrt_check < 1000000 } }
            }
            set_temp_variable = { sqrt_approx_temp = 1000 }
            divide_temp_variable = { sqrt_check = 1000000 }
        }
        else_if = {
            limit = {
                NOT = { check_variable = { sqrt_check < 10000 } }
            }
            set_temp_variable = { sqrt_approx_temp = 100 }
            divide_temp_variable = { sqrt_check = 10000 }
        }
        else_if = {
            limit = {
                NOT = { check_variable = { sqrt_check < 100 } }
            }
            set_temp_variable = { sqrt_approx_temp = 10 }
            divide_temp_variable = { sqrt_check = 100 }
        }
        
        if = {
            limit = {
                check_variable = { sqrt_check < 25 }
            }
            if = {
                limit = {
                    check_variable = { sqrt_check < 2 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 1 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 4 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 1.414 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 9 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 2 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 16 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 3 }
            }
            else = {
                multiply_temp_variable = { sqrt_approx_temp = 4 }
            }
        }
        else = {
            if = {
                limit = {
                    check_variable = { sqrt_check < 36 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 5 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 49 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 6 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 64 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 7 }
            }
            else_if = {
                limit = {
                    check_variable = { sqrt_check < 81 }
                }
                multiply_temp_variable = { sqrt_approx_temp = 8 }
            }
            else = {
                multiply_temp_variable = { sqrt_approx_temp = 9 }
            }
        }

        # Algorithm - x1 = 1/2 (x0 + S/x0)
        
        set_temp_variable = { sqrt_next_temp = sqrt_temp }
        divide_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        add_to_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        divide_temp_variable = { sqrt_next_temp = 2 }
        set_temp_variable = { sqrt_approx_temp = sqrt_next_temp }
        
        set_temp_variable = { sqrt_next_temp = sqrt_temp }
        divide_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        add_to_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        divide_temp_variable = { sqrt_next_temp = 2 }
        set_temp_variable = { sqrt_approx_temp = sqrt_next_temp }
        
        set_temp_variable = { sqrt_next_temp = sqrt_temp }
        divide_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        add_to_temp_variable = { sqrt_next_temp = sqrt_approx_temp }
        divide_temp_variable = { sqrt_next_temp = 2 }
        set_temp_variable = { sqrt_approx_temp = sqrt_next_temp }

        # Output
        set_temp_variable = { actual_temp = sqrt_approx_temp }
        multiply_temp_variable = { actual_temp = actual_temp }
        log = "Initial: [?sqrt_temp] | Approximation: [?sqrt_approx_temp] | Result: [?actual_temp]"
        set_temp_variable = { sqrt_temp = sqrt_approx_temp }
    }
    trade_ai_determine_max_trade = {
        # Takes in a single route, given as resource_temp, and gives the max trade of that route as amount_temp
        
        # D = Demand, S = Supply, Sg = Global Supply, Dg = Global Demand, T = Trade
        # Exporting: T = (S*Dg / Sg) - D
        # Importing: T = (D*Sg / Dg) - S

        # Check if this is/will be an export route by checking if offers is negative, if so multiply direction_temp by -1
        # This will mean productive export routes will export more and unproductive ones will export less
        # If zero offers, checks if price is less than global price
        if = {
            limit = {
                if = {
                    limit = {
                        check_variable = { offers@var:resource_temp = 0 }
                    }
                    check_variable = { price@var:resource_temp < global_market_price@var:resource_temp }
                }
                else = {
                    check_variable = { offers@var:resource_temp < 0 }
                }
            }
            # EXPORTING
            # T = (S*Dg / Sg) - D
            set_temp_variable = { d_t = need@var:resource_temp }
            set_temp_variable = { s_t = production@var:resource_temp }

            set_temp_variable = { sg_t = global_market_supply@var:resource_temp }
            set_temp_variable = { dg_t = global_market_demand@var:resource_temp }

            # Dividing by 100 so it doesn't overflow when multiplying
            divide_temp_variable = { d_t = 100 }
            divide_temp_variable = { s_t = 100 }
            divide_temp_variable = { sg_t = 100 }
            divide_temp_variable = { dg_t = 100 }

            # Calculation
            set_temp_variable = { amount_temp = s_t }
            multiply_temp_variable = { amount_temp = dg_t }
            divide_temp_variable = { amount_temp = sg_t }
            subtract_from_temp_variable = { amount_temp = d_t }
            multiply_temp_variable = { amount_temp = 100 }
            round_temp_variable = amount_temp
            multiply_temp_variable = { amount_temp = -1 }
        }
        else = {
            # IMPORTING
            # T = (D*Sg / Dg) - S
            
            set_temp_variable = { d_t = need@var:resource_temp }
            set_temp_variable = { s_t = production@var:resource_temp }

            set_temp_variable = { sg_t = global_market_supply@var:resource_temp }
            set_temp_variable = { dg_t = global_market_demand@var:resource_temp }

            # Dividing by 100 so it doesn't overflow when multiplying
            divide_temp_variable = { d_t = 100 }
            divide_temp_variable = { s_t = 100 }
            divide_temp_variable = { sg_t = 100 }
            divide_temp_variable = { dg_t = 100 }

            # Calculation
            set_temp_variable = { amount_temp = d_t }
            multiply_temp_variable = { amount_temp = sg_t }
            divide_temp_variable = { amount_temp = dg_t }
            subtract_from_temp_variable = { amount_temp = s_t }
            multiply_temp_variable = { amount_temp = 100 }
            round_temp_variable = amount_temp
        }

        log = "Result: [?amount_temp]"
    }
    trade_ai_evaluate_route = {
        # Takes in a single route, given as resource_temp, and gives a direction that the trade ought to go in
        # Creates direction_temp. >0 signals to increase trade. <0 Signals to decrease. 0 signals to not change.
        # Adjusts trade amount via steps WITHOUT trade_update

        set_temp_variable = { productivity_upper_bound = workforce_earnings_avg } # If productivity is above this, increase trade
        multiply_temp_variable = { productivity_upper_bound = 1.5 }
        set_temp_variable = { productivity_lower_bound = workforce_earnings_avg } # If productivity is below this, decrease trade
        log = "Resource: [?resource_temp.GetTokenLocalizedKey]: [?offers@var:resource_temp], [?trade_productivity@var:resource_temp]"

        if = {
            limit = { # Checks that stuff is valid
                check_variable = { trade_ai@var:resource_temp = 0 }
                is_in_array = { global.resource_token_array = resource_temp }
                NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }

                check_variable = { shipping_usage < 1 }
            }

            set_temp_variable = { direction_temp = 0 } # Direction of new trade. >0 is to import more, <0 is to export more

            if = { # Set direction_temp to 1 signaling to increase trade
                limit = {
                    check_variable = { trade_productivity@var:resource_temp > productivity_upper_bound }
                }
                set_temp_variable = { direction_temp = 1 }
            }
            else_if = { # Set direction_temp to -1 signaling to decrease trade
                limit = {
                    check_variable = { trade_productivity@var:resource_temp < productivity_lower_bound }
                }
                set_temp_variable = { direction_temp = -1 }
            }

            if = {
                limit = {
                    NOT = { check_variable = { direction_temp = 0 } }
                }
                
                multiply_temp_variable = { productivity_upper_bound = 2 }
                if = { # Setting trade if productivity is too high - Disabled for the moment
                    limit = {
                        always = no
                        #check_variable = { trade_productivity@var:resource_temp > productivity_upper_bound }
                    }
                    trade_ai_determine_max_trade = yes
                    multiply_temp_variable = { amount_temp = 0.95 }
                    set_temp_variable = { no_update_temp = 1 }
                    set_trade = yes
                }
                else = { # Adjust trade by a small amount
                    # Check if this is/will be an export route by checking if offers is negative, if so multiply direction_temp by -1
                    # This will mean productive export routes will export more and unproductive ones will export less
                    # If zero offers, checks if price is less than global price
                    if = {
                        limit = {
                            if = {
                                limit = {
                                    check_variable = { offers@var:resource_temp = 0 }
                                }
                                check_variable = { price@var:resource_temp < global_market_price@var:resource_temp }
                            }
                            else = {
                                check_variable = { offers@var:resource_temp < 0 }
                            }
                        }
                        multiply_temp_variable = { direction_temp = -1 }
                    }

                    # Checks if importing/exporting this is even a good idea at all
                    if = {
                        limit = {
                            NOT = { check_variable = { global_market_price@var:resource_temp = price@var:resource_temp } }
                        }
                        # Adjust trade
                        set_temp_variable = { steps_temp = direction_temp }
                        set_temp_variable = { no_update_temp = 1 }
                        adjust_trade_step = yes
                    }

                }
                
                # Update Shipping Use of the route
                subtract_from_variable = { shipping_use = shipping_use@var:resource_temp }
                set_variable = { shipping_use@var:resource_temp = offers@var:resource_temp }
                if = {
                    limit = {
                        check_variable = { shipping_use@var:resource_temp < 0 }
                    }
                    multiply_variable = { shipping_use@var:resource_temp = -1 }
                }
                multiply_variable = { shipping_use@var:resource_temp = global.shipping_cost@var:resource_temp }
                set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
                add_to_temp_variable = { modifier_temp = 1 }
                multiply_variable = { shipping_use@var:resource_temp = modifier_temp }
                add_to_variable = { shipping_use = shipping_use@var:resource_temp }

                #Shipping Efficiency
                if = {
                    limit = {
                        check_variable = { shipping_capacity_use > shipping_capacity }
                    }
                    set_variable = { shipping_efficiency = shipping_capacity }
                    divide_variable = { shipping_efficiency = shipping_capacity_use }
                }
                else = {
                    set_variable = { shipping_efficiency = 1 }
                }
                
                if = {
                    limit = {
                        check_variable = { shipping_capacity = 0 }
                    }
                    set_variable = { shipping_usage = 1 }
                }
                else = {
                    set_variable = { shipping_usage = shipping_capacity_use }
                    divide_variable = { shipping_usage = shipping_capacity }
                }
            }
        }
    }
    trade_ai_remove_unproductive_route = {
        # Takes in a single route, given as resource_temp, and reduces it if the route is unproductive
        # Adjusts trade amount via steps WITHOUT trade_update

        set_temp_variable = { productivity_lower_bound = workforce_earnings_avg } # If productivity is below this, decrease trade
        
        if = {
            limit = { # Checks that stuff is valid
                check_variable = { trade_ai@var:resource_temp = 0 }
                is_in_array = { global.resource_token_array = resource_temp }
                NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }
                
                check_variable = { trade_productivity@var:resource_temp < productivity_lower_bound } # Route is unprofitable!
                NOT = { check_variable = { offers@var:resource_temp = 0 } } # There is actual trade here
            }

            # Check if this is/will be an export route by checking if offers is negative, if so set steps_temp to 1
            # Otherwise, set it to -1. This will unproductive ones will export/import less
            if = {
                limit = {
                    check_variable = { offers@var:resource_temp < 0 }
                }
                set_temp_variable = { steps_temp = 1 } # Setting to +1 to decrease trade on an export route - since offers is negative
            }
            else = {
                set_temp_variable = { steps_temp = -1 } # Setting to -1 to decrease trade on an import route - since offers is positive
            }

            divide_temp_variable = { productivity_lower_bound = 2 }
            if = {
                limit = {
                    check_variable = { trade_productivity@var:resource_temp < productivity_lower_bound } # Route is very unprofitable!
                }
                multiply_temp_variable = { steps_temp = 2 }

                divide_temp_variable = { productivity_lower_bound = 2 }
                if = {
                    limit = {
                        check_variable = { trade_productivity@var:resource_temp < productivity_lower_bound } # Route is very unprofitable!
                    }
                    multiply_temp_variable = { steps_temp = 2 }
                }
            }
            if = {
                limit = {
                    check_variable = { trade_productivity@var:resource_temp < 0 } # Route is unproductive!
                }
                multiply_temp_variable = { steps_temp = 3 }
            }

            if = {
                limit = {
                    check_variable = { trade_productivity@var:resource_temp = 0 }
                    check_variable = { price@var:resource_temp = global_market_price@var:resource_temp }
                    OR = {
                        check_variable = { global_market_price_compared_to_base@var:resource_temp = -0.75 }
                        check_variable = { global_market_price_compared_to_base@var:resource_temp = 1 }
                    }
                }
                multiply_temp_variable = { steps_temp = 20 }
            }

            # Adjust trade
            set_temp_variable = { no_update_temp = 1 }
            adjust_trade_step = yes

            # Shipping Use of the route
            subtract_from_variable = { shipping_use = shipping_use@var:resource_temp }
            set_variable = { shipping_use@var:resource_temp = offers@var:resource_temp }
            if = {
                limit = {
                    check_variable = { shipping_use@var:resource_temp < 0 }
                }
                multiply_variable = { shipping_use@var:resource_temp = -1 }
            }
            multiply_variable = { shipping_use@var:resource_temp = global.shipping_cost@var:resource_temp }
            set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { shipping_use@var:resource_temp = modifier_temp }
            add_to_variable = { shipping_use = shipping_use@var:resource_temp }

            #Shipping Efficiency
            if = {
                limit = {
                    check_variable = { shipping_capacity_use > shipping_capacity }
                }
                set_variable = { shipping_efficiency = shipping_capacity }
                divide_variable = { shipping_efficiency = shipping_capacity_use }
            }
            else = {
                set_variable = { shipping_efficiency = 1 }
            }
            
            if = {
                limit = {
                    check_variable = { shipping_capacity = 0 }
                }
                set_variable = { shipping_usage = 1 }
            }
            else = {
                set_variable = { shipping_usage = shipping_capacity_use }
                divide_variable = { shipping_usage = shipping_capacity }
            }
        }
    }
    trade_ai_optimize_route = {
        # Takes in a single route, given as resource_temp, and reduces it if the route is less profitable than the average
        # Adjusts trade amount via steps WITHOUT trade_update
   
        if = {
            limit = { # Checks that stuff is valid
                check_variable = { trade_ai@var:resource_temp = 0 }
                is_in_array = { global.resource_token_array = resource_temp }
                NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }
                
                OR = { 
                    check_variable = { trade_productivity@var:resource_temp < trade_productivity } # Trade productivity < average
                    NOT = { check_variable = { trade_productivity@var:resource_temp > 0 } } # Route is unprofitable!
                }
                NOT = { check_variable = { offers@var:resource_temp = 0 } } # There is actual trade here
            }

            # Check if this is/will be an export route by checking if offers is negative, if so set steps_temp to 1
            # Otherwise, set it to -1. This will unproductive ones will export/import less
            if = {
                limit = {
                    check_variable = { offers@var:resource_temp < 0 }
                }
                set_temp_variable = { steps_temp = 1 } # Setting to +1 to decrease trade on an export route - since offers is negative
            }
            else = {
                set_temp_variable = { steps_temp = -1 } # Setting to -1 to decrease trade on an import route - since offers is positive
            }

            # Adjust trade
            set_temp_variable = { no_update_temp = 1 }
            adjust_trade_step = yes

            # Shipping Use of the route
            subtract_from_variable = { shipping_use = shipping_use@var:resource_temp }
            set_variable = { shipping_use@var:resource_temp = offers@var:resource_temp }
            if = {
                limit = {
                    check_variable = { shipping_use@var:resource_temp < 0 }
                }
                multiply_variable = { shipping_use@var:resource_temp = -1 }
            }
            multiply_variable = { shipping_use@var:resource_temp = global.shipping_cost@var:resource_temp }
            set_temp_variable = { modifier_temp = modifier@shipping_cost_modifier }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { shipping_use@var:resource_temp = modifier_temp }
            add_to_variable = { shipping_use = shipping_use@var:resource_temp }

            #Shipping Efficiency
            if = {
                limit = {
                    check_variable = { shipping_capacity_use > shipping_capacity }
                }
                set_variable = { shipping_efficiency = shipping_capacity }
                divide_variable = { shipping_efficiency = shipping_capacity_use }
            }
            else = {
                set_variable = { shipping_efficiency = 1 }
            }
            
            if = {
                limit = {
                    check_variable = { shipping_capacity = 0 }
                }
                set_variable = { shipping_usage = 1 }
            }
            else = {
                set_variable = { shipping_usage = shipping_capacity_use }
                divide_variable = { shipping_usage = shipping_capacity }
            }
        }
    }
    trade_ai_calculation = {
        for_each_loop = { # Add Routes
            array = global.resource_token_array
            value = resource_temp
            set_temp_variable = { productivity_upper_bound = workforce_earnings_avg } # If productivity is above this, increase trade
            multiply_temp_variable = { productivity_upper_bound = 2 }
            if = {
                limit = {
                    check_variable = { trade_ai@var:resource_temp = 0 }
                    NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }

                    check_variable = { offers@var:resource_temp = 0 }
                    NOT = { is_in_array = { trade_routes = resource_temp } }
                    check_variable = { trade_productivity@var:resource_temp > productivity_upper_bound }

                    OR = {
                        check_variable = { supply@var:resource_temp > 0 }
                        check_variable = { demand@var:resource_temp > 0 }
                    }
                }

                set_temp_variable = { no_update_temp = 1 }
                add_trade = yes
            }
        }

        for_each_loop = { # Optimize & Evaluate Routes
            array = trade_routes
            value = resource_temp

            if = {
                limit = {
                    check_variable = { trade_ai@var:resource_temp = 0 }
                    NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }
                }

                if = {
                    limit = {
                        check_variable = { shipping_usage > 1 }
                    }
                    trade_ai_optimize_route = yes
                }
                else = {
                    set_temp_variable = { optimization_break = 1 }
                }
            }

            if = {
                limit = {
                    check_variable = { trade_ai@var:resource_temp = 0 }
                    NOT = { is_in_array = { global.non_tradeable_resources = resource_temp } }
                }

                trade_ai_evaluate_route = yes
            }
        }
        
        for_each_loop = { # Remove Routes
            array = trade_routes
            value = resource_temp
            
            if = {
                limit = {
                    check_variable = { trade_ai@var:resource_temp = 0 }
                }
                trade_ai_remove_unproductive_route = yes
                if = {
                    limit = {
                        check_variable = { offers@var:resource_temp = 0 }
                    }
                    set_temp_variable = { no_update_temp = 1 }
                    remove_trade = yes
                }
            }
        }
    }
#

#Budget
    budget_update = {
        hidden_effect = {
            budget_clamp = yes

            taxes_update = yes
            spending_update = yes

            net_budget_update = yes
        }
    }
    budget_clamp = {
        # Set min & max
            set_variable = { income_tax_upper_strata_max = 100 }
            add_to_variable = { income_tax_upper_strata_max = modifier@upper_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_upper_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@upper_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_upper_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_upper_strata_max max = 100 min = 0 }
            round_variable = income_tax_upper_strata_max
            
            set_variable = { income_tax_upper_strata_min = 0 }
            add_to_variable = { income_tax_upper_strata_min = modifier@upper_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_upper_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_upper_strata_min }
            set_temp_variable = { modifier_temp = modifier@upper_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_upper_strata_min = add_temp }
            clamp_variable ={ var = income_tax_upper_strata_min max = income_tax_upper_strata_max min = 0 }
            round_variable = income_tax_upper_strata_min
            
            set_variable = { income_tax_middle_strata_max = 100 }
            add_to_variable = { income_tax_middle_strata_max = modifier@middle_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_middle_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@middle_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_middle_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_middle_strata_max max = 100 min = 0 }
            round_variable = income_tax_middle_strata_max
            
            set_variable = { income_tax_middle_strata_min = 0 }
            add_to_variable = { income_tax_middle_strata_min = modifier@middle_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_middle_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_middle_strata_min }
            set_temp_variable = { modifier_temp = modifier@middle_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_middle_strata_min = add_temp }
            clamp_variable ={ var = income_tax_middle_strata_min max = income_tax_middle_strata_max min = 0 }
            round_variable = income_tax_middle_strata_min
            
            set_variable = { income_tax_lower_strata_max = 100 }
            add_to_variable = { income_tax_lower_strata_max = modifier@lower_strata_income_tax_max_modifier }
            add_to_variable = { income_tax_lower_strata_max = modifier@income_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@lower_strata_income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { income_tax_lower_strata_max = modifier_temp }
            clamp_variable ={ var = income_tax_lower_strata_max max = 100 min = 0 }
            round_variable = income_tax_lower_strata_max
            
            set_variable = { income_tax_lower_strata_min = 0 }
            add_to_variable = { income_tax_lower_strata_min = modifier@lower_strata_income_tax_min_modifier }
            add_to_variable = { income_tax_lower_strata_min = modifier@income_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = income_tax_lower_strata_min }
            set_temp_variable = { modifier_temp = modifier@lower_strata_income_tax_min_factor }
            add_to_temp_variable = { modifier_temp = modifier@income_tax_min_factor }
            multiply_temp_variable = { add_temp = modifier_temp }
            add_to_variable = { income_tax_lower_strata_min = add_temp }
            clamp_variable ={ var = income_tax_lower_strata_min max = income_tax_lower_strata_max min = 0 }
            round_variable = income_tax_lower_strata_min

            
            set_variable = { sales_tax_max = 100 }
            add_to_variable = { sales_tax_max = modifier@sales_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@sales_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { sales_tax_max = modifier_temp }
            clamp_variable ={ var = sales_tax_max max = 100 min = 0 }
            round_variable = sales_tax_max
            
            set_variable = { sales_tax_min = 0 }
            add_to_variable = { sales_tax_min = modifier@sales_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = sales_tax_min }
            multiply_temp_variable = { add_temp = modifier@sales_tax_min_factor }
            add_to_variable = { sales_tax_min = add_temp }
            clamp_variable ={ var = sales_tax_min max = sales_tax_max min = 0 }
            round_variable = sales_tax_min
            
            set_variable = { corporate_tax_max = 100 }
            add_to_variable = { corporate_tax_max = modifier@corporate_tax_max_modifier }
            set_temp_variable = { modifier_temp = modifier@corporate_tax_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { corporate_tax_max = modifier_temp }
            clamp_variable ={ var = corporate_tax_max max = 100 min = 0 }
            round_variable = corporate_tax_max
            
            set_variable = { corporate_tax_min = 0 }
            add_to_variable = { corporate_tax_min = modifier@corporate_tax_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = corporate_tax_min }
            multiply_temp_variable = { add_temp = modifier@corporate_tax_min_factor }
            add_to_variable = { corporate_tax_min = add_temp }
            clamp_variable ={ var = corporate_tax_min max = corporate_tax_max min = 0 }
            round_variable = corporate_tax_min
            
            
            set_variable = { import_tariff_max = 100 }
            add_to_variable = { import_tariff_max = modifier@import_tariff_max_modifier }
            set_temp_variable = { modifier_temp = modifier@import_tariff_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { import_tariff_max = modifier_temp }
            clamp_variable ={ var = import_tariff_max max = import_tariff_max min = -100 }
            round_variable = import_tariff_max
            
            set_variable = { import_tariff_min = -100 }
            add_to_variable = { import_tariff_min = modifier@import_tariff_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = import_tariff_min }
            multiply_temp_variable = { add_temp = modifier@import_tariff_min_factor }
            divide_temp_variable = { add_temp = 2 }
            add_to_variable = { import_tariff_min = add_temp }
            clamp_variable ={ var = import_tariff_min max = 100 min = -100 }
            round_variable = import_tariff_min
            
            set_variable = { export_tariff_max = 100 }
            add_to_variable = { export_tariff_max = modifier@export_tariff_max_modifier }
            set_temp_variable = { modifier_temp = modifier@export_tariff_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { export_tariff_max = modifier_temp }
            clamp_variable ={ var = export_tariff_max max = 100 min = -100 }
            round_variable = export_tariff_max
            
            set_variable = { export_tariff_min = -100 }
            add_to_variable = { export_tariff_min = modifier@export_tariff_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = export_tariff_min }
            multiply_temp_variable = { add_temp = modifier@export_tariff_min_factor }
            divide_temp_variable = { add_temp = 2 }
            add_to_variable = { export_tariff_min = add_temp }
            clamp_variable ={ var = export_tariff_min max = export_tariff_max min = -100 }
            round_variable = export_tariff_min
            
            
            set_variable = { military_spending_max = 100 }
            add_to_variable = { military_spending_max = modifier@military_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@military_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { military_spending_max = modifier_temp }
            clamp_variable ={ var = military_spending_max max = 100 min = 0 }
            round_variable = military_spending_max
            
            set_variable = { military_spending_min = 0 }
            add_to_variable = { military_spending_min = modifier@military_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = military_spending_min }
            multiply_temp_variable = { add_temp = modifier@military_spending_min_factor }
            add_to_variable = { military_spending_min = add_temp }
            clamp_variable ={ var = military_spending_min max = military_spending_max min = 0 }
            round_variable = military_spending_min
            
            set_variable = { research_spending_max = 100 }
            add_to_variable = { research_spending_max = modifier@research_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@research_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { research_spending_max = modifier_temp }
            clamp_variable ={ var = research_spending_max max = 100 min = 0 }
            round_variable = research_spending_max
            
            set_variable = { research_spending_min = 0 }
            add_to_variable = { research_spending_min = modifier@research_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = research_spending_min }
            multiply_temp_variable = { add_temp = modifier@research_spending_min_factor }
            add_to_variable = { research_spending_min = add_temp }
            clamp_variable ={ var = research_spending_min max = research_spending_max min = 0 }
            round_variable = research_spending_min
            
            set_variable = { construction_spending_max = 100 }
            add_to_variable = { construction_spending_max = modifier@construction_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@construction_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { construction_spending_max = modifier_temp }
            clamp_variable ={ var = construction_spending_max max = 100 min = 0 }
            round_variable = construction_spending_max
            
            set_variable = { construction_spending_min = 0 }
            add_to_variable = { construction_spending_min = modifier@construction_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = construction_spending_min }
            multiply_temp_variable = { add_temp = modifier@construction_spending_min_factor }
            add_to_variable = { construction_spending_min = add_temp }
            clamp_variable ={ var = construction_spending_min max = construction_spending_max min = 0 }
            round_variable = construction_spending_min
            
            set_variable = { subsidies_spending_max = 100 }
            add_to_variable = { subsidies_spending_max = modifier@subsidies_spending_max_modifier }
            set_temp_variable = { modifier_temp = modifier@subsidies_spending_max_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { subsidies_spending_max = modifier_temp }
            clamp_variable ={ var = subsidies_spending_max max = 100 min = 0 }
            round_variable = subsidies_spending_max
            
            set_variable = { subsidies_spending_min = 0 }
            add_to_variable = { subsidies_spending_min = modifier@subsidies_spending_min_modifier }
            set_temp_variable = { add_temp = 100 }
            subtract_from_temp_variable = { add_temp = subsidies_spending_min }
            multiply_temp_variable = { add_temp = modifier@subsidies_spending_min_factor }
            add_to_variable = { subsidies_spending_min = add_temp }
            clamp_variable ={ var = subsidies_spending_min max = subsidies_spending_max min = 0 }
            round_variable = subsidies_spending_min
        #

        # Clamping
            clamp_variable = { var = income_tax_upper_strata_percentage max = income_tax_upper_strata_max min = income_tax_upper_strata_min }
            clamp_variable = { var = income_tax_middle_strata_percentage max = income_tax_middle_strata_max min = income_tax_middle_strata_min }
            clamp_variable = { var = income_tax_lower_strata_percentage max = income_tax_lower_strata_max min = income_tax_lower_strata_min }
            
            clamp_variable = { var = sales_tax_percentage max = sales_tax_max min = sales_tax_min }
            clamp_variable = { var = corporate_tax_percentage max = corporate_tax_max min = corporate_tax_min }
            
            clamp_variable = { var = import_tariff_percentage max = import_tariff_max min = import_tariff_min }
            clamp_variable = { var = export_tariff_percentage max = export_tariff_max min = export_tariff_min }
            
            clamp_variable = { var = military_spending_percentage max = military_spending_max min = military_spending_min }
            clamp_variable = { var = research_spending_percentage max = research_spending_max min = research_spending_min }
            clamp_variable = { var = construction_spending_percentage max = construction_spending_max min = construction_spending_min }
            clamp_variable = { var = subsidies_spending_percentage max = subsidies_spending_max min = subsidies_spending_min }
        #

        # Max position adds +11 to position, Min is -2. This is to make the stoppers (min/max) look nice. I made it a var to make it easy to adjust
        set_temp_variable = { max_pos_add = 11 }
        set_temp_variable = { min_pos_sub = 2 }

        # Tariff Slider Positions
            set_variable = { import_tariff_slider_pos = import_tariff_percentage }
            divide_variable = { import_tariff_slider_pos = 2 }
            subtract_from_variable = { import_tariff_slider_pos = 0.499 }
            round_variable = import_tariff_slider_pos
            add_to_variable = { import_tariff_slider_pos = 50 }
            
            set_variable = { import_tariff_max_pos = import_tariff_max }
            divide_variable = { import_tariff_max_pos = 2 }
            subtract_from_variable = { import_tariff_max_pos = 0.499 }
            round_variable = import_tariff_max_pos
            add_to_variable = { import_tariff_max_pos = max_pos_add }
            add_to_variable = { import_tariff_max_pos = 50 }
            
            set_variable = { import_tariff_min_pos = import_tariff_min }
            divide_variable = { import_tariff_min_pos = 2 }
            subtract_from_variable = { import_tariff_min_pos = 0.499 }
            round_variable = import_tariff_min_pos
            subtract_from_variable = { import_tariff_min_pos = min_pos_sub }
            add_to_variable = { import_tariff_min_pos = 50 }
            

            set_variable = { export_tariff_slider_pos = export_tariff_percentage }
            divide_variable = { export_tariff_slider_pos = 2 }
            subtract_from_variable = { export_tariff_slider_pos = 0.499 }
            round_variable = export_tariff_slider_pos
            add_to_variable = { export_tariff_slider_pos = 50 }
            
            set_variable = { export_tariff_max_pos = export_tariff_max }
            divide_variable = { export_tariff_max_pos = 2 }
            subtract_from_variable = { export_tariff_max_pos = 0.499 }
            round_variable = export_tariff_max_pos
            add_to_variable = { export_tariff_max_pos = max_pos_add }
            add_to_variable = { export_tariff_max_pos = 50 }
            
            set_variable = { export_tariff_min_pos = export_tariff_min }
            divide_variable = { export_tariff_min_pos = 2 }
            subtract_from_variable = { export_tariff_min_pos = 0.499 }
            round_variable = export_tariff_min_pos
            subtract_from_variable = { export_tariff_min_pos = min_pos_sub }
            add_to_variable = { export_tariff_min_pos = 50 }
        #

        # Min/Max Pos of everything else
            set_variable = { income_tax_upper_strata_max_pos = income_tax_upper_strata_max }
            add_to_variable = { income_tax_upper_strata_max_pos = max_pos_add }
            set_variable = { income_tax_upper_strata_min_pos = income_tax_upper_strata_min }
            subtract_from_variable = { income_tax_upper_strata_min_pos = min_pos_sub }
            
            set_variable = { income_tax_middle_strata_max_pos = income_tax_middle_strata_max }
            add_to_variable = { income_tax_middle_strata_max_pos = max_pos_add }
            set_variable = { income_tax_middle_strata_min_pos = income_tax_middle_strata_min }
            subtract_from_variable = { income_tax_middle_strata_min_pos = min_pos_sub }
            
            set_variable = { income_tax_lower_strata_max_pos = income_tax_lower_strata_max }
            add_to_variable = { income_tax_lower_strata_max_pos = max_pos_add }
            set_variable = { income_tax_lower_strata_min_pos = income_tax_lower_strata_min }
            subtract_from_variable = { income_tax_lower_strata_min_pos = min_pos_sub }
            
            set_variable = { sales_tax_max_pos = sales_tax_max }
            add_to_variable = { sales_tax_max_pos = max_pos_add }
            set_variable = { sales_tax_min_pos = sales_tax_min }
            subtract_from_variable = { sales_tax_min_pos = min_pos_sub }
            
            set_variable = { corporate_tax_max_pos = corporate_tax_max }
            add_to_variable = { corporate_tax_max_pos = max_pos_add }
            set_variable = { corporate_tax_min_pos = corporate_tax_min }
            subtract_from_variable = { corporate_tax_min_pos = min_pos_sub }
            
            
            set_variable = { military_spending_max_pos = military_spending_max }
            add_to_variable = { military_spending_max_pos = max_pos_add }
            set_variable = { military_spending_min_pos = military_spending_min }
            subtract_from_variable = { military_spending_min_pos = min_pos_sub }
            
            set_variable = { research_spending_max_pos = research_spending_max }
            add_to_variable = { research_spending_max_pos = max_pos_add }
            set_variable = { research_spending_min_pos = research_spending_min }
            subtract_from_variable = { research_spending_min_pos = min_pos_sub }
            
            set_variable = { construction_spending_max_pos = construction_spending_max }
            add_to_variable = { construction_spending_max_pos = max_pos_add }
            set_variable = { construction_spending_min_pos = construction_spending_min }
            subtract_from_variable = { construction_spending_min_pos = min_pos_sub }
            
            set_variable = { subsidies_spending_max_pos = subsidies_spending_max }
            add_to_variable = { subsidies_spending_max_pos = max_pos_add }
            set_variable = { subsidies_spending_min_pos = subsidies_spending_min }
            subtract_from_variable = { subsidies_spending_min_pos = min_pos_sub }
        #
    }
	taxes_update = {
		#Country Scope

        set_temp_variable = { corruption_temp = modifier@corruption_factor }
        if = {
            limit = {
                check_variable = { corruption_temp > 1 }
            }
            set_temp_variable = { corruption_temp = 1 }
        }
        else_if = {
            limit = {
                check_variable = { corruption_temp > 1 }
            }
            set_temp_variable = { corruption_temp = 0 }
        }

        # Actual Taxation Percentages
            set_variable = { income_tax_upper_strata_percentage_actual = income_tax_upper_strata_percentage }
            multiply_variable = { income_tax_upper_strata_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { income_tax_middle_strata_percentage_actual = income_tax_middle_strata_percentage }
            multiply_variable = { income_tax_middle_strata_percentage_actual = modifier@tax_efficiency_factor }
            
            set_variable = { income_tax_lower_strata_percentage_actual = income_tax_lower_strata_percentage }
            multiply_variable = { income_tax_lower_strata_percentage_actual = modifier@tax_efficiency_factor }
            
            set_variable = { sales_tax_percentage_actual = sales_tax_percentage }
            multiply_variable = { sales_tax_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { corporate_tax_percentage_actual = corporate_tax_percentage }
            multiply_variable = { corporate_tax_percentage_actual = modifier@tax_efficiency_factor }
        
            set_variable = { import_tariff_percentage_actual = import_tariff_percentage }
            multiply_variable = { import_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }
            
            set_variable = { export_tariff_percentage_actual = export_tariff_percentage }
            multiply_variable = { export_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }
        #

		#Income Taxes
        set_temp_variable = { upper_earnings_limit = pops_earnings_avg }
        multiply_temp_variable = { upper_earnings_limit = 3 }
        set_temp_variable = { lower_earnings_limit = pops_earnings_avg }

        set_temp_variable = { upper_income_earnings = 0 }
        set_temp_variable = { middle_income_earnings = 0 }
        set_temp_variable = { lower_income_earnings = 0 }

        set_variable = { consumer_goods_earnings = 0 }
		every_controlled_state = {
            #Adding to Earnings
                set_temp_variable = { avg_earnings_temp = slaves_earnings }
                divide_temp_variable = { avg_earnings_temp = slaves }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = slaves_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = slaves_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = slaves_earnings }
                }

                set_temp_variable = { avg_earnings_temp = peasants_earnings }
                divide_temp_variable = { avg_earnings_temp = peasants }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = peasants_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = peasants_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = peasants_earnings }
                }

                set_temp_variable = { avg_earnings_temp = laborers_earnings }
                divide_temp_variable = { avg_earnings_temp = laborers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = laborers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = laborers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = laborers_earnings }
                }

                set_temp_variable = { avg_earnings_temp = workers_earnings }
                divide_temp_variable = { avg_earnings_temp = workers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = workers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = workers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = workers_earnings }
                }

                set_temp_variable = { avg_earnings_temp = professionals_earnings }
                divide_temp_variable = { avg_earnings_temp = professionals }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = professionals_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = professionals_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = professionals_earnings }
                }

                set_temp_variable = { avg_earnings_temp = specialists_earnings }
                divide_temp_variable = { avg_earnings_temp = specialists }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = specialists_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = specialists_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = specialists_earnings }
                }

                set_temp_variable = { avg_earnings_temp = capitalists_earnings }
                divide_temp_variable = { avg_earnings_temp = capitalists }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = capitalists_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = capitalists_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = capitalists_earnings }
                }

                set_temp_variable = { avg_earnings_temp = aristocrats_earnings }
                divide_temp_variable = { avg_earnings_temp = aristocrats }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = aristocrats_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = aristocrats_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = aristocrats_earnings }
                }

                set_temp_variable = { avg_earnings_temp = bureaucrats_earnings }
                divide_temp_variable = { avg_earnings_temp = bureaucrats }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = bureaucrats_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = bureaucrats_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = bureaucrats_earnings }
                }

                set_temp_variable = { avg_earnings_temp = soldiers_earnings }
                divide_temp_variable = { avg_earnings_temp = soldiers }
                if = {
                    limit = {
                        check_variable = { avg_earnings_temp < lower_earnings_limit }
                    }
                    add_to_temp_variable = { lower_income_earnings = soldiers_earnings }
                }
                else_if = {
                    limit = {
                        check_variable = { avg_earnings_temp < upper_earnings_limit }
                    }
                    add_to_temp_variable = { middle_income_earnings = soldiers_earnings }
                }
                else = {
                    add_to_temp_variable = { upper_income_earnings = soldiers_earnings }
                }
            #
            for_each_loop = {
                array = buildings
                index = sp_i
                value = sp_token
                if = {
                    limit = {
                        check_variable = { sp_token = token:building_civilian_industry }
                    }
                    add_to_variable = { PREV.consumer_goods_earnings = expenses@var:sp_token }
                }
            }
		}
        multiply_variable = { consumer_goods_earnings = modifier@consumer_goods_factor }
        multiply_variable = { consumer_goods_earnings = 3 }
        set_variable = { public_enterprise_revenue = consumer_goods_earnings }

		set_variable = { income_tax_upper_strata_revenue = upper_income_earnings }
		set_variable = { income_tax_middle_strata_revenue = middle_income_earnings }
		set_variable = { income_tax_lower_strata_revenue = lower_income_earnings }

        if = {
            limit = {
                check_variable = { income_tax_upper_strata_revenue > 1000 }
            }
		    divide_variable = { income_tax_upper_strata_revenue = 100 }
		    multiply_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_percentage_actual }
        }
        else = {
		    multiply_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_percentage_actual }
		    divide_variable = { income_tax_upper_strata_revenue = 100 }
        }
        if = {
            limit = {
                check_variable = { income_tax_middle_strata_revenue > 1000 }
            }
		    divide_variable = { income_tax_middle_strata_revenue = 100 }
		    multiply_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_percentage_actual }
        }
        else = {
		    multiply_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_percentage_actual }
		    divide_variable = { income_tax_middle_strata_revenue = 100 }
        }
        if = {
            limit = {
                check_variable = { income_tax_lower_strata_revenue > 1000 }
            }
		    divide_variable = { income_tax_lower_strata_revenue = 100 }
		    multiply_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_percentage_actual }
        }
        else = {
		    multiply_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_percentage_actual }
		    divide_variable = { income_tax_lower_strata_revenue = 100 }
        }

        set_variable = { income_tax_upper_strata_corruption = income_tax_upper_strata_revenue }
        multiply_variable = { income_tax_upper_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_upper_strata_revenue = income_tax_upper_strata_corruption }
        set_variable = { income_tax_middle_strata_corruption = income_tax_middle_strata_revenue }
        multiply_variable = { income_tax_middle_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_middle_strata_revenue = income_tax_middle_strata_corruption }
        set_variable = { income_tax_lower_strata_corruption = income_tax_lower_strata_revenue }
        multiply_variable = { income_tax_lower_strata_corruption = corruption_temp }
        subtract_from_variable = { income_tax_lower_strata_revenue = income_tax_lower_strata_corruption }

		set_variable = { income_tax_revenue = income_tax_upper_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_middle_strata_revenue }
		add_to_variable = { income_tax_revenue = income_tax_lower_strata_revenue }

		set_variable = { income_tax_corruption = income_tax_upper_strata_corruption }
		add_to_variable = { income_tax_corruption = income_tax_middle_strata_corruption }
		add_to_variable = { income_tax_corruption = income_tax_lower_strata_corruption }

		#Sales Tax
			set_variable = { sales_tax_revenue = 0 }
            every_controlled_state = {
                add_to_variable = { PREV.sales_tax_revenue = pops_needs_spending }
            }
            if = {
                limit = {
                    check_variable = { sales_tax_revenue > 1000 }
                }
                divide_variable = { sales_tax_revenue = 100 }
                multiply_variable = { sales_tax_revenue = sales_tax_percentage_actual }
            }
            else = {
                multiply_variable = { sales_tax_revenue = sales_tax_percentage_actual }
                divide_variable = { sales_tax_revenue = 100 }
            }
                
            set_variable = { sales_tax_corruption = sales_tax_revenue }
            multiply_variable = { sales_tax_corruption = corruption_temp }
            subtract_from_variable = { sales_tax_revenue = sales_tax_corruption }
		#

		#Corporate
            set_variable = { corporate_tax_revenue = capitalists_dividends }
            add_to_variable = { corporate_tax_revenue = aristocrats_dividends }
            if = {
                limit = {
                    check_variable = { corporate_tax_revenue < 0 }
                }
                set_variable = { corporate_tax_revenue = 0 }
            }
            if = {
                limit = {
                    check_variable = { corporate_tax_revenue > 1000 }
                }
                divide_variable = { corporate_tax_revenue = 100 }
                multiply_variable = { corporate_tax_revenue = corporate_tax_percentage_actual }
            }
            else = {
                multiply_variable = { corporate_tax_revenue = corporate_tax_percentage_actual }
                divide_variable = { corporate_tax_revenue = 100 }
            }
            
            set_variable = { corporate_tax_corruption = corporate_tax_revenue }
            multiply_variable = { corporate_tax_corruption = corruption_temp }
            subtract_from_variable = { corporate_tax_revenue = corporate_tax_corruption }
		#

		#Tariffs
			set_variable = { export_tariffs = 0 }
			set_variable = { import_tariffs = 0 }

            for_each_loop = {
                array = trade_routes
                value = r_token

                if = { #Import
                    limit = {
                        check_variable = { trade@var:r_token > 0 }
                    }
                    add_to_variable = { import_tariffs = trade_tariffs@var:r_token }
                }
                else_if = { #Export
                    limit = {
                        check_variable = { trade@var:r_token < 0 }
                    }
                    subtract_from_variable = { export_tariffs = trade_tariffs@var:r_token }
                }
            }

            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
                divide_variable = { export_tariffs = modifier@bureaucratic_efficiency_factor }
            }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
                divide_variable = { import_tariffs = modifier@bureaucratic_efficiency_factor }
            }

			set_variable = { net_tariffs = import_tariffs }
            add_to_variable = { net_tariffs = export_tariffs }

			set_variable = { tariff_revenue = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs > 0 }
                }
			    add_to_variable = { tariff_revenue = import_tariffs }

                set_variable = { import_tariffs_corruption = import_tariffs }
                multiply_variable = { import_tariffs_corruption = corruption_temp }
                subtract_from_variable = { import_tariffs = import_tariffs_corruption }
            }
            else = {
                set_variable = { import_tariffs_corruption = 0 }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs > 0 }
                }
			    add_to_variable = { tariff_revenue = export_tariffs }

                set_variable = { export_tariffs_corruption = export_tariffs }
                multiply_variable = { export_tariffs_corruption = corruption_temp }
                subtract_from_variable = { export_tariffs = export_tariffs_corruption }
            }
            else = {
                set_variable = { export_tariffs_corruption = 0 }
            }
			set_variable = { tariff_corruption = import_tariffs_corruption }
            add_to_variable = { tariff_corruption = export_tariffs_corruption }
            subtract_from_variable = { net_tariffs = tariff_corruption }
		#

        set_variable = { modifier_revenue = modifier@treasury_gain_monthly }
        set_temp_variable = { rev_temp = pops }
        multiply_temp_variable = { rev_temp = modifier@treasury_gain_monthly_per_c }
        add_to_variable = { modifier_revenue = rev_temp }
        set_temp_variable = { rev_temp = gdp_amount }
        multiply_temp_variable = { rev_temp = modifier@treasury_gain_monthly_per_gdp }
        add_to_variable = { modifier_revenue = rev_temp }

		set_variable = { other_revenue = public_enterprise_revenue }
        add_to_variable = { other_revenue = modifier_revenue }

		set_variable = { revenue = income_tax_revenue }
		add_to_variable = { revenue = sales_tax_revenue }
        add_to_variable = { revenue = corporate_tax_revenue }
		add_to_variable = { revenue = tariff_revenue }
        add_to_variable = { revenue = other_revenue }

        if = {
            limit = {
                is_ai = no
            }
            create_pie_chart_revenue = yes
        }
	}
	spending_update = {
		proj_update = yes

        # Spending Effects
            # MILITARY
            set_temp_variable = { factor_temp = 100 }
            subtract_from_temp_variable = { factor_temp = military_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }

            set_variable = { military_spending_supply_consumption_factor = global.min_military_spending_supply_consumption_factor }
            set_variable = { military_spending_naval_coordination = global.min_military_spending_naval_coordination }
            set_variable = { military_spending_training_time_army_factor = global.min_military_spending_training_time_army_factor }
            set_variable = { military_spending_army_org_factor = global.min_military_spending_army_org_factor }
            set_variable = { military_spending_army_bonus_air_superiority_factor = global.min_military_spending_army_bonus_air_superiority_factor }
            set_variable = { military_spending_air_accidents_factor = global.min_military_spending_air_accidents_factor }
            set_variable = { military_spending_attrition = global.min_military_spending_attrition }
            set_variable = { military_spending_max_command_power_mult = global.min_military_spending_max_command_power_mult }
            set_variable = { military_spending_army_morale_factor = global.min_military_spending_army_morale_factor }
            set_variable = { military_spending_naval_morale_factor = global.min_military_spending_naval_morale_factor }
            
            multiply_variable = { military_spending_supply_consumption_factor = factor_temp }
            multiply_variable = { military_spending_naval_coordination = factor_temp }
            multiply_variable = { military_spending_training_time_army_factor = factor_temp }
            multiply_variable = { military_spending_army_org_factor = factor_temp }
            multiply_variable = { military_spending_army_bonus_air_superiority_factor = factor_temp }
            multiply_variable = { military_spending_air_accidents_factor = factor_temp }
            multiply_variable = { military_spending_attrition = factor_temp }
            multiply_variable = { military_spending_max_command_power_mult = factor_temp }
            multiply_variable = { military_spending_army_morale_factor = factor_temp }
            multiply_variable = { military_spending_naval_morale_factor = factor_temp }
            
            set_variable = { military_spending_command_power_gain_mult = global.max_military_spending_command_power_gain_mult }
            multiply_variable = { military_spending_command_power_gain_mult = military_spending_percentage }
            divide_variable = { military_spending_command_power_gain_mult = 100 }

            # RESEARCH
            set_temp_variable = { factor_temp = 100 }
            subtract_from_temp_variable = { factor_temp = research_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }
            
            set_variable = { research_spending_research_speed_factor = global.min_research_spending_research_speed_factor }
            set_variable = { research_spending_support_tech = global.min_research_spending_support_tech }
            set_variable = { research_spending_cat_artillery_techs = global.min_research_spending_cat_artillery_techs }
            set_variable = { research_spending_armor = global.min_research_spending_armor }
            set_variable = { research_spending_aviation_tech = global.min_research_spending_aviation_tech }
            set_variable = { research_spending_air_equipment = global.min_research_spending_air_equipment }
            set_variable = { research_spending_cat_projects_techs = global.min_research_spending_cat_projects_techs }
            set_variable = { research_spending_naval_equipment = global.min_research_spending_naval_equipment }

            multiply_variable = { research_spending_research_speed_factor = factor_temp }
            multiply_variable = { research_spending_support_tech = factor_temp }
            multiply_variable = { research_spending_cat_artillery_techs = factor_temp }
            multiply_variable = { research_spending_armor = factor_temp }
            multiply_variable = { research_spending_aviation_tech = factor_temp }
            multiply_variable = { research_spending_air_equipment = factor_temp }
            multiply_variable = { research_spending_cat_projects_techs = factor_temp }
            multiply_variable = { research_spending_naval_equipment = factor_temp }
            
            set_temp_variable = { factor_temp = research_spending_percentage }
            divide_temp_variable = { factor_temp = 100 }
            multiply_temp_variable = { factor_temp = global.max_research_spending_research_speed_factor }
            add_to_variable = { research_spending_research_speed_factor = factor_temp }
        #

		set_variable = { construction_spending = 0 }
		set_variable = { projects_spending = 0 }
		set_variable = { industrial_subsidy = 0 }
		set_variable = { infrastructure_subsidy = 0 }

		set_variable = { administration_spending = 0 }
		set_variable = { military_payroll_spending = 0 }
        set_variable = { military_production_payroll_spending = 0 }
        set_variable = { public_enterprise_payroll_spending = 0 }
		every_controlled_state = {
			#Administration
			set_temp_variable = { admin_temp = pops_earnings }
			multiply_temp_variable = { admin_temp = global.administration_base_expense }
			divide_temp_variable = { admin_temp = 100 }
			if = {
				limit = {
					check_variable = { pops < global.administration_population_expense }
				}
				set_temp_variable = { modifier_temp = global.administration_population_expense }
				subtract_from_temp_variable = { modifier_temp = pops }
				divide_temp_variable = { modifier_temp = global.administration_population_expense }
				multiply_temp_variable = { modifier_temp = global.administration_population_expense_modifier }
				add_to_temp_variable = { modifier_temp = 1 }
				multiply_temp_variable = { admin_temp = modifier_temp }
			}
			add_to_variable = { PREV.administration_spending = admin_temp }

            for_each_loop = {
                array = buildings
                index = sp_i
                value = sp_token

                #Industrial

                #Construction
                if = {
                    limit = {
                        check_variable = { under_construction@var:sp_token > 0 }
                        check_variable = { financer@var:sp_token = PREV }
                    }
                    add_to_variable = { PREV.construction_spending = construction_expenses@var:sp_token }
                }

                #Infrastructure

                #Public Enterprise & Military Production
                if = {
                    limit = {
                        OR = {
                            check_variable = { sp_token = token:building_military_industry }
                            check_variable = { sp_token = token:building_naval_industry }
                        }
                    }
                    add_to_variable = { PREV.military_production_payroll_spending = expenses@var:sp_token }
                }
                else_if = {
                    limit = {
                        check_variable = { global.building_government_control@var:sp_token = 1}
                    }
                    add_to_variable = { PREV.public_enterprise_payroll_spending = expenses@var:sp_token }
                }
            }
		}
        #divide_variable = { military_production_payroll_spending = modifier@bureaucratic_efficiency_factor }
        #divide_variable = { public_enterprise_payroll_spending = modifier@bureaucratic_efficiency_factor }

        set_temp_variable = { modifier_temp = modifier@administration_cost_per_c }
        multiply_temp_variable = { modifier_temp = pops }
        add_to_variable = { administration_spending = modifier_temp }
        log = "Admin cost per c: [?modifier_temp]"
        set_temp_variable = { modifier_temp = modifier@administration_cost_per_gdp }
        multiply_temp_variable = { modifier_temp = gdp_amount }
        add_to_variable = { administration_spending = modifier_temp }
        log = "Admin cost per GDP: [?modifier_temp]"

        set_temp_variable = { modifier_temp = modifier@administration_cost_factor }
        add_to_temp_variable = { modifier_temp = 1 }
        multiply_variable = { administration_spending = modifier_temp }
        

        divide_variable = { administration_spending = modifier@bureaucratic_efficiency_factor }
        divide_variable = { construction_spending = modifier@bureaucratic_efficiency_factor }

        #Military Payroll
        set_variable = { military_payroll_spending = military_manpower_k }
        multiply_variable = { military_payroll_spending = pops_earnings_avg }
        divide_variable = { military_payroll_spending = global.pops_workforce_participation }
        divide_variable = { military_payroll_spending = modifier@bureaucratic_efficiency_factor }

        set_temp_variable = { modifier_temp = modifier@military_payroll_cost_factor }
        add_to_temp_variable = { modifier_temp = 1 }
        multiply_variable = { military_payroll_spending = modifier_temp }

        #Military Production
            set_variable = { military_production_resources_spending = 0 }
            for_each_loop = {
                array = global.resource_token_array
                value = r_type

                set_temp_variable = { spending_temp = resource_consumed@var:r_type }
                multiply_temp_variable = { spending_temp = price@var:r_type }
                add_to_variable = { military_production_resources_spending = spending_temp }
            }
            divide_variable = { military_production_resources_spending = modifier@bureaucratic_efficiency_factor }
        #
        set_variable = { military_mandatory_spending = military_production_resources_spending }
        add_to_variable = { military_mandatory_spending = military_production_payroll_spending }
        add_to_variable = { military_mandatory_spending = military_payroll_spending }

        set_variable = { modifier_spending = modifier@treasury_cost_monthly }
        set_temp_variable = { exp_temp = pops }
        multiply_temp_variable = { exp_temp = modifier@treasury_cost_monthly_per_c }
        add_to_variable = { modifier_spending = exp_temp }
        set_temp_variable = { exp_temp = gdp_amount }
        multiply_temp_variable = { exp_temp = modifier@treasury_cost_monthly_per_gdp }
        add_to_variable = { modifier_spending = exp_temp }

		set_variable = { other_spending = public_enterprise_payroll_spending }
        add_to_variable = { other_spending = modifier_spending }

		#Military
			set_variable = { military_spending@token:resource_food = 0 }
			set_variable = { military_spending@token:resource_consumer_goods = 0 }
			set_variable = { military_spending@token:resource_luxury_goods = 0 }
			set_variable = { military_spending@token:resource_industrial_goods = 0 }

			set_variable = { military_army_spending = 0 }
			set_variable = { military_navy_spending = 0 }
            for_each_loop = {
                array = global.resource_token_array
                value = r_token

                set_temp_variable = { cost_temp = military_army_demand@var:r_token }
                multiply_temp_variable = { cost_temp = price@var:r_token }
                add_to_variable = { military_army_spending = cost_temp }
                add_to_variable = { military_spending@var:r_token = cost_temp }

                set_temp_variable = { cost_temp = military_navy_demand@var:r_token }
                multiply_temp_variable = { cost_temp = price@var:r_token }
                add_to_variable = { military_navy_spending = cost_temp }
                add_to_variable = { military_spending@var:r_token = cost_temp }

                set_temp_variable = { cost_temp = military_airforce_demand@var:r_token }
                multiply_temp_variable = { cost_temp = price@var:r_token }
                add_to_variable = { military_airforce_spending = cost_temp }
                add_to_variable = { military_spending@var:r_token = cost_temp }
            }
            
            divide_variable = { military_army_spending = modifier@bureaucratic_efficiency_factor }
            divide_variable = { military_navy_spending = modifier@bureaucratic_efficiency_factor }
            divide_variable = { military_airforce_spending = modifier@bureaucratic_efficiency_factor }

			set_variable = { military_spending = military_army_spending }
			add_to_variable = { military_spending = military_navy_spending }
			add_to_variable = { military_spending = military_airforce_spending }
		#

		#Projects

			for_each_loop = {
				array = proj_id
				value = project_token_temp
                index = pii

                set_temp_variable = { project_scope_temp = proj_scope^pii }

				add_to_variable = { projects_spending = project_scope_temp:proj_estimated_monthly_cost@var:project_token_temp }
			}
            divide_variable = { projects_spending = modifier@bureaucratic_efficiency_factor }

			add_to_variable = { construction_spending = projects_spending }
		#

		#Trade Subsidies
			set_variable = { export_tariffs = 0 }
			set_variable = { import_tariffs = 0 }

            for_each_loop = {
                array = trade_routes
                value = r_token

                if = { #Import
                    limit = {
                        check_variable = { trade@var:r_token > 0 }
                    }
                    add_to_variable = { import_tariffs = trade_tariffs@var:r_token }
                }
                else_if = { #Export
                    limit = {
                        check_variable = { trade@var:r_token < 0 }
                    }
                    subtract_from_variable = { export_tariffs = trade_tariffs@var:r_token }
                }
            }

            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
                divide_variable = { export_tariffs = modifier@bureaucratic_efficiency_factor }
            }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
                divide_variable = { import_tariffs = modifier@bureaucratic_efficiency_factor }
            }

			set_variable = { net_tariffs = import_tariffs }
            add_to_variable = { net_tariffs = export_tariffs }

			set_variable = { trade_subsidy = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs < 0 }
                }
			    subtract_from_variable = { trade_subsidy = import_tariffs }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs < 0 }
                }
			    subtract_from_variable = { trade_subsidy = export_tariffs }
            }
            
			set_variable = { tariff_revenue = 0 }
            if = {
                limit = {
                    check_variable = { import_tariffs > 0 }
                }
			    add_to_variable = { tariff_revenue = import_tariffs }

                set_variable = { import_tariffs_corruption = import_tariffs }
                multiply_variable = { import_tariffs_corruption = corruption_temp }
                subtract_from_variable = { import_tariffs = import_tariffs_corruption }
            }
            else = {
                set_variable = { import_tariffs_corruption = 0 }
            }
            if = {
                limit = {
                    check_variable = { export_tariffs > 0 }
                }
			    add_to_variable = { tariff_revenue = export_tariffs }

                set_variable = { export_tariffs_corruption = export_tariffs }
                multiply_variable = { export_tariffs_corruption = corruption_temp }
                subtract_from_variable = { export_tariffs = export_tariffs_corruption }
            }
            else = {
                set_variable = { export_tariffs_corruption = 0 }
            }
			set_variable = { tariff_corruption = import_tariffs_corruption }
            add_to_variable = { tariff_corruption = export_tariffs_corruption }
            subtract_from_variable = { net_tariffs = tariff_corruption }
		#
        # Research Subsidies
            set_variable = { research_spending = global.research_base_expense }
            set_temp_variable = { expense_add_temp = pops_earnings_avg }
            multiply_temp_variable = { expense_add_temp = global.research_pops_earnings_avg_expense_add }
            add_to_variable = { research_spending = expense_add_temp }
            multiply_variable = { research_spending = pops }
            divide_variable = { research_spending = 100 }
            multiply_variable = { research_spending = research_spending_percentage }
            divide_variable = { research_spending = modifier@bureaucratic_efficiency_factor }

            set_temp_variable = { research_modifier_temp = modifier@research_cost_factor }
            add_to_temp_variable = { research_modifier_temp = 1 }
            multiply_variable = { research_spending = research_modifier_temp }
        #

        # Order Spending
            set_variable = { order_and_intel_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@order_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { order_and_intel_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@order_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { order_and_intel_spending = modifier_temp }
            divide_variable = { order_and_intel_spending = modifier@bureaucratic_efficiency_factor }
        #

        # Social Spending
            set_variable = { education_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@education_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { education_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@education_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { education_spending = modifier_temp }
            divide_variable = { education_spending = modifier@bureaucratic_efficiency_factor }
            
            set_variable = { healthcare_spending = 0 }
            set_temp_variable = { modifier_temp = modifier@healthcare_cost_per_c }
            multiply_temp_variable = { modifier_temp = pops }
            add_to_variable = { healthcare_spending = modifier_temp }
            set_temp_variable = { modifier_temp = modifier@healthcare_cost_per_gdp }
            multiply_temp_variable = { modifier_temp = gdp_amount }
            add_to_variable = { healthcare_spending = modifier_temp }
            divide_variable = { healthcare_spending = modifier@bureaucratic_efficiency_factor }

            set_variable = { social_spending = education_spending }
            add_to_variable = { social_spending = healthcare_spending }
        #

		set_variable = { subsidies_spending = 0 }

		set_variable = { discretionary_spending = subsidies_spending }
		add_to_variable = { discretionary_spending = construction_spending }
		add_to_variable = { discretionary_spending = research_spending }
		add_to_variable = { discretionary_spending = military_spending }

        set_temp_variable = { local_debt_payment_temp = debt_to_national_bank_k }
        multiply_temp_variable = { local_debt_payment_temp = domestic_interest_rate }
        divide_temp_variable = { local_debt_payment_temp = 1.2 }
        set_temp_variable = { foreign_debt_payment_temp = debt_to_foreign_countries_k }
        multiply_temp_variable = { foreign_debt_payment_temp = foreign_interest_rate }
        divide_temp_variable = { foreign_debt_payment_temp = 1.2 }
        set_variable = { national_debt_interest = local_debt_payment_temp }
        add_to_variable = { national_debt_interest = foreign_debt_payment_temp }

		set_variable = { mandatory_spending = national_debt_interest }
		add_to_variable = { mandatory_spending = administration_spending }
		add_to_variable = { mandatory_spending = military_mandatory_spending }
        add_to_variable = { mandatory_spending = order_and_intel_spending }
        add_to_variable = { mandatory_spending = social_spending }
		add_to_variable = { mandatory_spending = other_spending }
        
		set_variable = { spending = discretionary_spending }
		add_to_variable = { spending = mandatory_spending }
		add_to_variable = { spending = trade_subsidy }
        
        if = {
            limit = {
                is_ai = no
            }
            create_pie_chart_spending = yes
        }
	}
	net_budget_update = {
		#Literally three lines

		set_variable = { net_budget = revenue }
		subtract_from_variable = { net_budget = spending }
	}

    spending_effects_update = {
        # Only in the on-monthly code
        # Applies changes to discretionary spending modifiers

        set_variable = { military_spending_supply_consumption_factor_actual = military_spending_supply_consumption_factor }
        set_variable = { military_spending_naval_coordination_actual = military_spending_naval_coordination }
        set_variable = { military_spending_training_time_army_factor_actual = military_spending_training_time_army_factor }
        set_variable = { military_spending_army_org_factor_actual = military_spending_army_org_factor }
        set_variable = { military_spending_army_bonus_air_superiority_factor_actual = military_spending_army_bonus_air_superiority_factor }
        set_variable = { military_spending_air_accidents_factor_actual = military_spending_air_accidents_factor }
        set_variable = { military_spending_attrition_actual = military_spending_attrition }
        set_variable = { military_spending_command_power_gain_mult_actual = military_spending_command_power_gain_mult }
        set_variable = { military_spending_army_morale_factor_actual = military_spending_army_morale_factor }
        set_variable = { military_spending_naval_morale_factor_actual = military_spending_naval_morale_factor }
        set_variable = { military_spending_max_command_power_mult_actual = military_spending_max_command_power_mult }

        set_variable = { research_spending_research_speed_factor_actual = research_spending_research_speed_factor }

        remove_ideas = {
            research_subsidies_0
            research_subsidies_1
            research_subsidies_2
            research_subsidies_3
            research_subsidies_4
            research_subsidies_5
            research_subsidies_6
            research_subsidies_7
            research_subsidies_8
            research_subsidies_9
            research_subsidies_10
            research_subsidies_11
            research_subsidies_12
            research_subsidies_13
            research_subsidies_14
            research_subsidies_15
            research_subsidies_16
            research_subsidies_17
            research_subsidies_18
            research_subsidies_19
            research_subsidies_20
            research_subsidies_21
            research_subsidies_22
            research_subsidies_23
            research_subsidies_24
            research_subsidies_25
            research_subsidies_26
            research_subsidies_27
            research_subsidies_28
            research_subsidies_29
            research_subsidies_30
            research_subsidies_31
            research_subsidies_32
            research_subsidies_33
            research_subsidies_34
            research_subsidies_35
            research_subsidies_36
            research_subsidies_37
            research_subsidies_38
            research_subsidies_39
            research_subsidies_40
            research_subsidies_41
            research_subsidies_42
            research_subsidies_43
            research_subsidies_44
            research_subsidies_45
            research_subsidies_46
            research_subsidies_47
            research_subsidies_48
            research_subsidies_49
            research_subsidies_50
            research_subsidies_51
            research_subsidies_52
            research_subsidies_53
            research_subsidies_54
            research_subsidies_55
            research_subsidies_56
            research_subsidies_57
            research_subsidies_58
            research_subsidies_59
            research_subsidies_60
            research_subsidies_61
            research_subsidies_62
            research_subsidies_63
            research_subsidies_64
            research_subsidies_65
            research_subsidies_66
            research_subsidies_67
            research_subsidies_68
            research_subsidies_69
            research_subsidies_70
            research_subsidies_71
            research_subsidies_72
            research_subsidies_73
            research_subsidies_74
            research_subsidies_75
            research_subsidies_76
            research_subsidies_77
            research_subsidies_78
            research_subsidies_79
            research_subsidies_80
            research_subsidies_81
            research_subsidies_82
            research_subsidies_83
            research_subsidies_84
            research_subsidies_85
            research_subsidies_86
            research_subsidies_87
            research_subsidies_88
            research_subsidies_89
            research_subsidies_90
            research_subsidies_91
            research_subsidies_92
            research_subsidies_93
            research_subsidies_94
            research_subsidies_95
            research_subsidies_96
            research_subsidies_97
            research_subsidies_98
            research_subsidies_99
        }
        if = {
            limit = {
                check_variable = { research_spending_percentage < 100 }
            }
            meta_effect = {
                text = {
                    add_ideas = research_subsidies_[NUM_LEVEL]
                }
                NUM_LEVEL = "[?research_spending_percentage|0]"
            }
        }
    }

	change_upper_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Upper Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { income_tax_upper_strata_percentage = percent_change_temp }
        budget_clamp = yes

        set_variable = { income_tax_upper_strata_percentage_actual = income_tax_upper_strata_percentage }
        multiply_variable = { income_tax_upper_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
	}
	change_middle_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Middle Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { income_tax_middle_strata_percentage = percent_change_temp }
        budget_clamp = yes

        set_variable = { income_tax_middle_strata_percentage_actual = income_tax_middle_strata_percentage }
        multiply_variable = { income_tax_middle_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
	}
	change_lower_strata_income_tax = {
		#Scope: Country
		#Increases/Decreases the Lower Strata Income Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { income_tax_lower_strata_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { income_tax_lower_strata_percentage_actual = income_tax_lower_strata_percentage }
        multiply_variable = { income_tax_lower_strata_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
	}

	change_sales_tax = {
		#Scope: Country
		#Increases/Decreases the Sales Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { sales_tax_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { sales_tax_percentage_actual = sales_tax_percentage }
        multiply_variable = { sales_tax_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
        }
        budget_update = yes
	}
	change_corporate_tax = {
		#Scope: Country
		#Increases/Decreases the Corporate Tax level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { corporate_tax_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { corporate_tax_percentage_actual = corporate_tax_percentage }
        multiply_variable = { corporate_tax_percentage_actual = modifier@tax_efficiency_factor }

        if = {
            limit = {
                is_ai = no
            }
            every_controlled_state = {
                pops_update = yes
            }
            investment_fund_update = yes
        }
        budget_update = yes
	}
	change_import_tariff = {
		#Scope: Country
		#Increases/Decreases the Import Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { import_tariff_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { import_tariff_percentage_actual = import_tariff_percentage }
        multiply_variable = { import_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }

        trade_update_value = yes
        budget_update = yes
	}
	change_export_tariff = {
		#Scope: Country
		#Increases/Decreases the Export Tariff level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { export_tariff_percentage = percent_change_temp }
        budget_clamp = yes
        
        set_variable = { export_tariff_percentage_actual = export_tariff_percentage }
        multiply_variable = { export_tariff_percentage_actual = modifier@bureaucratic_efficiency_factor }

        trade_update_value = yes
        budget_update = yes
	}

	change_military_spending = {
		#Scope: Country
		#Increases/Decreases the Military Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { military_spending_percentage = percent_change_temp }
        budget_clamp = yes
        market_leader_check = yes
        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
        }
	}
	change_intelligence_spending = {
		#Scope: Country
		#Increases/Decreases the Intelligence Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { intelligence_spending_percentage = percent_change_temp }
        budget_clamp = yes
        budget_update = yes
	}
	change_construction_spending = {
		#Scope: Country
		#Increases/Decreases the Construction Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { construction_spending_percentage = percent_change_temp }
        budget_clamp = yes

        every_controlled_state = {
            buildings_update_construction = yes
        }
        proj_update = yes
        market_leader_check = yes
        if = {
            limit = {
                check_variable = { market_leader = THIS }
            }
            market_update = yes
        }
	}
    change_research_spending = {
		#Scope: Country
		#Increases/Decreases the Research Spending level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { research_spending_percentage = percent_change_temp }
        budget_update = yes
    }
	change_infrastructure_subsidy = {
		#Scope: Country
		#Increases/Decreases the Infrastructure Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { infrastructure_subsidy_percentage = percent_change_temp }
        budget_update = yes
	}
	change_industrial_subsidy = {
		#Scope: Country
		#Increases/Decreases the Industrial Subsidy level
		#INPUT:
			#percent_change_temp - Amount to decrease it by. 1.0 increases it by 1%,  -10.0 decreases it by 10%

		add_to_variable = { industrial_subsidy_percentage = percent_change_temp }
        budget_update = yes
	}
    
	create_pie_chart_revenue = {
		# this creates a pie chart of revenue - can be easily adapted to show anything that adds up to 100%
		# This code is much different from Yard's, but I'll credit him anyway
		# Country Scope

        set_variable = { revenue_piechart_income_percentage = income_tax_revenue }
        divide_variable = { revenue_piechart_income_percentage = revenue }
        set_variable = { revenue_piechart_corporate_percentage = corporate_tax_revenue }
        divide_variable = { revenue_piechart_corporate_percentage = revenue }
        set_variable = { revenue_piechart_sales_percentage = sales_tax_revenue }
        divide_variable = { revenue_piechart_sales_percentage = revenue }

        set_variable = { revenue_piechart_other_percentage = 1 }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_income_percentage }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_corporate_percentage }
        subtract_from_variable = { revenue_piechart_other_percentage = revenue_piechart_sales_percentage }

		clear_array = pie_chart_revenue_type
		resize_array = {
			array = pie_chart_revenue_type
			value = 1 # 1 is value for RGO frame
			size = 100 # 100 pieces, each percent is one piece
		}

		clear_temp_array = pie_slices_percentage
		add_to_temp_array = { pie_slices_percentage = 0 }
		add_to_temp_array = { pie_slices_percentage = revenue_piechart_other_percentage } # Black
		add_to_temp_array = { pie_slices_percentage = revenue_piechart_sales_percentage } # Yellow
		add_to_temp_array = { pie_slices_percentage = 0 } # light Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Dark Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Darkest Red
		add_to_temp_array = { pie_slices_percentage = revenue_piechart_corporate_percentage } # Dark Blue
		add_to_temp_array = { pie_slices_percentage = revenue_piechart_income_percentage } # Green
		add_to_temp_array = { pie_slices_percentage = 0 } # Light Blue
		add_to_temp_array = { pie_slices_percentage = 0 } # Gray

        set_temp_variable = { total_temp = 0 }
        set_temp_variable = { largest = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            if = {
                limit = {
                    check_variable = { pie_slices_percentage^rr > pie_slices_percentage^largest }
                }
                set_temp_variable = { largest = rr }
            }

            multiply_temp_variable = { pie_slices_percentage^rr = 100 }
            round_temp_variable = pie_slices_percentage^rr
            add_to_temp_variable = { total_temp = pie_slices_percentage^rr }
        }

        if = {
            limit = {
                NOT = { check_variable = { total_temp = 100 } }
            }
            add_to_temp_variable = { pie_slices_percentage^largest = 100 }
            subtract_from_temp_variable = { pie_slices_percentage^largest = total_temp }
        }

		set_temp_variable = { pie_pop = 0 }
		for_each_loop = {
			array = pie_slices_percentage
			index = rr
			value = vv

			set_variable = { last_idx = pie_pop }
			set_temp_variable = { pie_pop = vv }

			add_to_temp_variable = { pie_pop = last_idx }
			#subtract_from_temp_variable = { pie_pop = 1 }
			if = {
				limit = {
					check_variable = { pie_pop > 100 }
				}
				set_temp_variable = { pie_pop = 100 }
			}
			for_loop_effect = {
				start = last_idx
				end = pie_pop
				set_variable = { pie_chart_revenue_type^v = rr }
			}
			set_variable = { last_idx = pie_pop }
		}
		clear_variable = last_idx

		add_to_variable = { update_state_econ_window = 1 }
	}
	create_pie_chart_spending = {
		# this creates a pie chart of spending - can be easily adapted to show anything that adds up to 100%
		# This code is much different from Yard's, but I'll credit him anyway
		# Country Scope

        set_variable = { spending_piechart_military_percentage = military_spending }
        add_to_variable = { spending_piechart_military_percentage = military_mandatory_spending }
        divide_variable = { spending_piechart_military_percentage = spending }
        set_variable = { spending_piechart_government_percentage = administration_spending }
        add_to_variable = { spending_piechart_government_percentage = research_spending }
        add_to_variable = { spending_piechart_government_percentage = public_enterprise_payroll_spending }
        add_to_variable = { spending_piechart_government_percentage = order_and_intel_spending }
        divide_variable = { spending_piechart_government_percentage = spending }
        set_variable = { spending_piechart_civilian_percentage = subsidies_spending }
        add_to_variable = { spending_piechart_civilian_percentage = construction_spending }
        add_to_variable = { spending_piechart_civilian_percentage = social_spending }
        divide_variable = { spending_piechart_civilian_percentage = spending }

        set_variable = { spending_piechart_other_percentage = 1 }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_military_percentage }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_government_percentage }
        subtract_from_variable = { spending_piechart_other_percentage = spending_piechart_civilian_percentage }

		clear_array = pie_chart_spending_type
		resize_array = {
			array = pie_chart_spending_type
			value = 1 # 1 is value for RGO frame
			size = 100 # 100 pieces, each percent is one piece
		}

		clear_temp_array = pie_slices_percentage
		add_to_temp_array = { pie_slices_percentage = 0 }
		add_to_temp_array = { pie_slices_percentage = spending_piechart_other_percentage } # Black
		add_to_temp_array = { pie_slices_percentage = spending_piechart_civilian_percentage } # Yellow
		add_to_temp_array = { pie_slices_percentage = 0 } # light Red
		add_to_temp_array = { pie_slices_percentage = spending_piechart_military_percentage } # Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Dark Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Darkest Red
		add_to_temp_array = { pie_slices_percentage = 0 } # Dark Blue
		add_to_temp_array = { pie_slices_percentage = 0 } # Green
		add_to_temp_array = { pie_slices_percentage = spending_piechart_government_percentage } # Light Blue
		add_to_temp_array = { pie_slices_percentage = 0 } # Gray

        set_temp_variable = { total_temp = 0 }
        set_temp_variable = { largest = 0 }
        for_each_loop = {
            array = pie_slices_percentage
            index = rr
            if = {
                limit = {
                    check_variable = { pie_slices_percentage^rr > pie_slices_percentage^largest }
                }
                set_temp_variable = { largest = rr }
            }

            multiply_temp_variable = { pie_slices_percentage^rr = 100 }
            round_temp_variable = pie_slices_percentage^rr
            add_to_temp_variable = { total_temp = pie_slices_percentage^rr }
        }

        if = {
            limit = {
                NOT = { check_variable = { total_temp = 100 } }
            }
            add_to_temp_variable = { pie_slices_percentage^largest = 100 }
            subtract_from_temp_variable = { pie_slices_percentage^largest = total_temp }
        }

		set_temp_variable = { pie_pop = 0 }
		for_each_loop = {
			array = pie_slices_percentage
			index = rr
			value = vv

			set_variable = { last_idx = pie_pop }
			set_temp_variable = { pie_pop = vv }

			add_to_temp_variable = { pie_pop = last_idx }
			#subtract_from_temp_variable = { pie_pop = 1 }
			if = {
				limit = {
					check_variable = { pie_pop > 100 }
				}
				set_temp_variable = { pie_pop = 100 }
			}
			for_loop_effect = {
				start = last_idx
				end = pie_pop
				set_variable = { pie_chart_spending_type^v = rr }
			}
			set_variable = { last_idx = pie_pop }
		}
		clear_variable = last_idx

		add_to_variable = { update_state_econ_window = 1 }
	}
#

#Global/National Bank
	national_debt_update = {
		#Country Scope

        # National Bank
            set_variable = { national_bank_amount_k = gdp_amount }
            divide_variable = { national_bank_amount_k = 1000 }
            multiply_variable = { national_bank_amount_k = 24 }
            
            set_variable = { national_bank_amount_lent_k = 0 }
            for_each_loop = {
                array = money_lent_country
                value = borrower_country_temp
                add_to_variable = { national_bank_amount_lent_k = money_lent_k@var:borrower_country_temp }
            }

            set_variable = { national_bank_amount_left_k = national_bank_amount_k }
            subtract_from_variable = { national_bank_amount_left_k = national_bank_amount_lent_k }

            # Money Scarcity
			if = {
				limit = {
					check_variable = { national_bank_amount_left_k < 0 }
				}
				set_variable = { national_bank_interest_from_scarcity = 1 }
			}
			else = {
				set_variable = { national_bank_interest_from_scarcity = national_bank_amount_lent_k }
				divide_variable = { national_bank_interest_from_scarcity = national_bank_amount_k }
			}
			multiply_variable = { national_bank_interest_from_scarcity = global.loan_scarcity_rate }


            set_variable = { domestic_interest_rate = global.credit_rating_BB_base_interest_rate } # TODO - 4.0%
            add_to_variable = { domestic_interest_rate = national_bank_interest_from_scarcity } # Up to 5.0%
            if = {
                limit = {
                    is_great_power = yes
                }
                subtract_from_variable = { domestic_interest_rate = 1 }
            }
            add_to_variable = { domestic_interest_rate = modifier@interest_rate_modifier }
            add_to_variable = { domestic_interest_rate = modifier@domestic_interest_rate_modifier }

            set_temp_variable = { modifier_temp = modifier@interest_rate_factor }
            add_to_temp_variable = { modifier_temp = modifier@domestic_interest_rate_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { domestic_interest_rate = modifier_temp }

            set_variable = { foreign_interest_rate = global.credit_rating_BB_base_interest_rate } # TODO - 4.0%
            add_to_variable = { foreign_interest_rate = global.base_international_interest_rate } # 2.0%
            if = {
                limit = {
                    is_great_power = yes
                }
                subtract_from_variable = { foreign_interest_rate = 1 }
            }
            add_to_variable = { foreign_interest_rate = modifier@interest_rate_modifier }
            add_to_variable = { foreign_interest_rate = modifier@foreign_interest_rate_modifier }

            set_temp_variable = { modifier_temp = modifier@interest_rate_factor }
            add_to_temp_variable = { modifier_temp = modifier@foreign_interest_rate_factor }
            add_to_temp_variable = { modifier_temp = 1 }
            multiply_variable = { domestic_interest_rate = modifier_temp }
        #

		#Money owed to foreign countries & interest
			set_variable = { debt_to_foreign_countries_k = 0 }
			set_variable = { debt_to_national_bank_k = 0 }
			for_each_loop = {
				array = debt_to_bank_country
				value = country_temp
				if = {
					limit = {
						tag = country_temp
					}
					set_variable = { debt_to_national_bank_k = debt_to_bank_k@var:country_temp }
				}
				else = {
					add_to_variable = { debt_to_foreign_countries_k = debt_to_bank_k@var:country_temp }
				}
			}
		#

		set_variable = { national_debt_k = debt_to_national_bank_k }
		add_to_variable = { national_debt_k = debt_to_foreign_countries_k }
        
        if = {
            limit = {
                check_variable = { national_debt_k > 2000 }
            }
		    set_variable = { debt_to_gdp_ratio = national_debt_k }
            multiply_variable = { debt_to_gdp_ratio = 10 }
		    divide_variable = { debt_to_gdp_ratio = gdp_amount }
            multiply_variable = { debt_to_gdp_ratio = 1000 }
            divide_variable = { debt_to_gdp_ratio = 12 }
            multiply_variable = { debt_to_gdp_ratio = 10 }
        }
        else = {
		    set_variable = { debt_to_gdp_ratio = national_debt_k }
            multiply_variable = { debt_to_gdp_ratio = 1000 }
		    divide_variable = { debt_to_gdp_ratio = gdp_amount }
            multiply_variable = { debt_to_gdp_ratio = 100 }
            divide_variable = { debt_to_gdp_ratio = 12 }
        }

        #Debt Level - for integration
        set_variable = { debt_level = debt_to_gdp_ratio }
        divide_variable = { debt_level = 4 }

        debt_level_checks_effect = yes

		#Total Interest Rate
        set_temp_variable = { local_debt_payment_temp = debt_to_national_bank_k }
        multiply_temp_variable = { local_debt_payment_temp = domestic_interest_rate }
        divide_temp_variable = { local_debt_payment_temp = 1.2 }
        set_temp_variable = { foreign_debt_payment_temp = debt_to_foreign_countries_k }
        multiply_temp_variable = { foreign_debt_payment_temp = foreign_interest_rate }
        divide_temp_variable = { foreign_debt_payment_temp = 1.2 }
        set_variable = { national_debt_interest = local_debt_payment_temp }
        add_to_variable = { national_debt_interest = foreign_debt_payment_temp }

        if = {
            limit = {
                check_variable = { national_debt_k > 0 }
            }
            set_variable = { national_debt_interest_rate = national_debt_interest }
            multiply_variable = { national_debt_interest_rate = 1.2 }
            divide_variable = { national_debt_interest_rate = national_debt_k }
        }
        else = {
            set_variable = { national_debt_interest_rate = domestic_interest_rate }
        }

        #Update spending
		set_variable = { mandatory_spending = national_debt_interest }
		add_to_variable = { mandatory_spending = administration_spending }
		add_to_variable = { mandatory_spending = military_mandatory_spending }
        add_to_variable = { mandatory_spending = order_and_intel_spending }
        add_to_variable = { mandatory_spending = social_spending }
		add_to_variable = { mandatory_spending = other_spending }
        
		set_variable = { spending = discretionary_spending }
		add_to_variable = { spending = mandatory_spending }
		add_to_variable = { spending = trade_subsidy }

		set_variable = { net_budget = revenue }
		subtract_from_variable = { net_budget = spending }
        
        if = {
            limit = {
                is_ai = no
            }
            create_pie_chart_spending = yes
        }

        debt_related_country_content_effects = yes
	}

    set_debt_to_gdp = {
        # x_temp
        # Sets the debt to gdp % to x_temp (0-100)

        multiply_temp_variable = { x_temp = 0.12 }
        add_to_temp_variable = { x_temp = 0.001 } # dunno why this is needed to make it exactly the percentage you give it, but apparently it is
        multiply_temp_variable = { x_temp = gdp_amount }
        divide_temp_variable = { x_temp = 1000 }
        set_debt = yes
    }
    set_debt = {
        # x_temp
        # Sets the debt to x_temp (thousands)
        
        subtract_from_temp_variable = { x_temp = national_debt_k }
        add_debt = yes
    }
    add_debt_to_gdp = {
        # x_temp
        # Adds debt to gdp % at x_temp (0-100)

        multiply_temp_variable = { x_temp = 0.12 }
        multiply_temp_variable = { x_temp = gdp_amount }
        divide_temp_variable = { x_temp = 1000 }
        add_debt = yes
    }
    add_debt = {
		#Scope: Country
		#Adds debt without granting money. Automatically caps at the maximum amount you can borrow.
		#INPUT:
			#x_temp - Amount of money to borrow in thousands.
			#country_temp - Which country to specifically borrow from, set to 0 to borrow money from any country
            
		if = {
			limit = {
				check_variable = { x_temp > 0 }
			}

			set_temp_variable = { borrow_temp_k = x_temp }
            add_to_temp_variable = { 
				var = nonsense_var
                value = borrow_temp_k
                tooltip = debt_change_negative_tooltip
            }

            if = {
                limit = {
                    check_variable = { country_temp = 0 }
                }
                set_temp_variable = { country_temp = THIS }
            }

            #log = "Country: [?country_temp.GetName]"

            if = {
                limit = {
                    check_variable = { borrow_temp_k > country_temp:national_bank_amount_left_k }
                }
                set_temp_variable = { borrow_temp_k = country_temp:national_bank_amount_left_k }
            }
            #log = "Borrow Amount: [?borrow_temp_k]K"
            if = {
                limit = {
                    check_variable = { borrow_temp_k < 0 }
                }
                set_temp_variable = { borrow_temp_k = 0 }
                set_temp_variable = { borrow_temp = 0 }
            }
            else = {
                set_temp_variable = { borrow_temp = borrow_temp_k }
                multiply_temp_variable = { borrow_temp = 1000 }
                if = {
                    limit = {
                        is_in_array = { array = debt_to_bank_country value = country_temp }
                    }
                    add_to_variable = { debt_to_bank_k@var:country_temp = borrow_temp_k }
                    add_to_variable = { country_temp:money_lent_k@THIS = borrow_temp_k }
                }
                else = {
                    add_to_array = { debt_to_bank_country = country_temp }
                    set_variable = { debt_to_bank_k@var:country_temp = borrow_temp_k }
                    add_to_array = { country_temp:money_lent_country = THIS }
                    set_variable = { country_temp:money_lent_k@THIS = borrow_temp_k }
                }
                #log = "Debt to Bank K ([THIS.GetName]): [?debt_to_bank_k@var:country_temp]K"
                #log = "Money Lent K ([?country_temp.GetName]): [?country_temp:money_lent_k@THIS]K"

                if = {
                    limit = {
                        NOT = { check_variable = { country_temp = THIS } }
                    }
                    var:country_temp = {
                        national_debt_update = yes
                    }
                }
            }

			national_debt_update = yes
		}
        else_if = {
            limit = {
                check_variable = { x_temp < 0 }
            }
            multiply_temp_variable = { x_temp = -1 }
            remove_debt = yes
        }
        else = {
            set_temp_variable = { borrow_temp = 0 }
        }
    }
	remove_debt = {
		#Scope: Country
		#Repays oustanding debt. Automatically caps at treasury amount.
		#INPUT:
			#x_temp - Amount of debt to repay. Non-integer amounts are accepted but integers are preferable
			#country_temp - Which country to specifically repay to, set to 0 to repay debts owed to any country
			#			  - If the repay amount is higher than the owed amount, only the owed amount is payed. The excess is not payed out further

	    if = {
			limit = {
				check_variable = { x_temp > 0 }
			}

            if = {
                limit = {
                    check_variable = { country_temp = 0 }
                }
                set_temp_variable = { country_temp = THIS }
            }

            #log = "Country: [?country_temp.GetName]"

            set_temp_variable = { repay_temp_k = x_temp }
            subtract_from_temp_variable = { 
				var = nonsense_var
                value = repay_temp_k
                tooltip = debt_change_positive_tooltip
            }
            if = {
                limit = {
                    check_variable = { repay_temp_k > debt_to_bank_k@var:country_temp }
                }
                set_temp_variable = { repay_temp_k = debt_to_bank_k@var:country_temp }
            }
            #log = "Repay Amount: [?repay_temp_k]K"
            
            if = {
                limit = {
                    check_variable = { repay_temp_k < 0 }
                }
                set_temp_variable = { repay_temp_k = 0 }
                set_temp_variable = { repay_temp = 0 }
            }
            else = {
                set_temp_variable = { repay_temp = repay_temp_k }
                multiply_temp_variable = { repay_temp = 1000 }

                if = {
                    limit = {
                        check_variable = { repay_temp_k < debt_to_bank_k@var:country_temp }
                    }
                    subtract_from_variable = { debt_to_bank_k@var:country_temp = repay_temp_k }
                    subtract_from_variable = { country_temp:money_lent_k@THIS = repay_temp_k }
                }
                else = {
					remove_from_array = { array = debt_to_bank_country value = country_temp }
					remove_from_array = { array = country_temp:money_lent_country value = THIS }
                    clear_variable = debt_to_bank_k@var:country_temp
                    clear_variable = country_temp:money_lent_k@THIS
                }
                #log = "Debt to Bank K ([THIS.GetName]): [?debt_to_bank_k@var:country_temp]K"
                #log = "Money Lent K ([?country_temp.GetName]): [?country_temp:money_lent_k@THIS]K"

                if = {
                    limit = {
                        NOT = { check_variable = { country_temp = THIS } }
                    }
                    var:country_temp = {
                        national_debt_update = yes
                    }
                }
            }

			national_debt_update = yes
		}
        else = {
            set_temp_variable = { repay_temp = 0 }
        }
	}
	borrow_money = {
		#Scope: Country
		#Borrows money. Automatically caps at the maximum amount you can borrow.
		#INPUT:
			#x_temp - Amount of money to borrow. Non-integer amounts are accepted but integers are preferable
			#country_temp - Which country to specifically borrow from, set to 0 to borrow money from any country

        add_debt = yes
        if = {
            limit = {
                check_variable = { borrow_temp > 0 }
            }
            add_to_variable = { treasury = borrow_temp }
            add_to_temp_variable = { 
                var = nonsense_var
                value = borrow_temp
                tooltip = treasury_change_positive_tooltip
            }
        }

	}
	repay_debt = {
		#Scope: Country
		#Repays oustanding debt. Automatically caps at treasury amount.
		#INPUT:
			#x_temp - Amount of debt to repay. Non-integer amounts are accepted but integers are preferable
			#country_temp - Which country to specifically repay to, set to 0 to repay debts owed to any country
			#			  - If the repay amount is higher than the owed amount, only the owed amount is payed. The excess is not payed out further

        multiply_temp_variable = { x_temp = 1000 }
        if = {
            limit = {
                check_variable = { x_temp > treasury }
            }
            set_temp_variable = { x_temp = treasury }
            subtract_from_temp_variable = { x_temp = 0.5 }
            round_temp_variable = x_temp
        }
        divide_temp_variable = { x_temp = 1000 }
        if = {
            limit = {
                check_variable = { treasury > 0.999 }
            }
            remove_debt = yes
            if = {
                limit = {
                    check_variable = { repay_temp > 0 }
                }
                subtract_from_variable = { treasury = repay_temp }
                subtract_from_temp_variable = { 
                    var = nonsense_var
                    value = repay_temp
                    tooltip = treasury_change_negative_tooltip
                }
            }
        }
	}
#

#Statistics
	battalion_count_update = {
        manpower_count_update = yes
		# Land:
		#	Infantry
		#	Militia
		#	Artillery
		#	Cavalry
		#	Mobile
		#	Armor
		#	Robotic
		#	Support
		#	Total
		#	Excess (For when people add unit types without adding to this list)

		# Naval:
		#	Screen
		#	Capital
		#	Submarine
		#	Total
		#	Excess (For when people add ship types without adding to this list)

		# There is also a weighted_ count, for costing purposes

		#For air, use num_deployed_planes

		set_variable = { infantry_battalions = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@pa_infantry }
		#add_to_variable = { infantry_battalions = num_battalions_with_type@bicycle_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@feudal_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@line_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@light_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@tribal_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@state_levy_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@native_mountaineers }
		add_to_variable = { infantry_battalions = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions = num_battalions_with_type@shock_troops }

        set_variable = { militia_battalions = 0 }
		#add_to_variable = { militia_battalions = num_battalions_with_type@state_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@colonial_militia_infantry }
		#add_to_variable = { militia_battalions = num_battalions_with_type@dutch_colonial_militia_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@irregular_infantry }
		add_to_variable = { militia_battalions = num_battalions_with_type@armed_peasants }

		set_variable = { artillery_battalions = num_battalions_with_type@anti_tank_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_anti_tank_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@anti_air_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_anti_air_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@field_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@field_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@howitzer_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@howitzer_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions = num_battalions_with_type@artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@rocket_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@mot_rocket_artillery_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@motorized_rocket_brigade }
		add_to_variable = { artillery_battalions = num_battalions_with_type@railway_gun }

		set_variable = { cavalry_battalions = num_battalions_with_type@tribal_cavalry }
		#add_to_variable = { cavalry_battalions = num_battalions_with_type@tribal_camel_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@tribal_pistoleer_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@state_levy_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@feudal_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@uhlans }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@camel_cavalry }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions = num_battalions_with_type@great_war_cavalry }

		set_variable = { mobile_battalions = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions = num_battalions_with_type@armored_car }
		add_to_variable = { mobile_battalions = num_battalions_with_type@technicals }

		set_variable = { armor_battalions = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions = num_battalions_with_type@modern_tank_destroyer_brigade }

		set_variable = { robotic_battalions = num_battalions_with_type@light_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions = num_battalions_with_type@armor_walker }

		set_variable = { support_battalions = num_battalions_with_type@anti_tank }
		add_to_variable = { support_battalions = num_battalions_with_type@field_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@field_artillery_towed_support }
		add_to_variable = { support_battalions = num_battalions_with_type@howitzer_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@howitzer_artillery_towed_support }
		add_to_variable = { support_battalions = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions = num_battalions_with_type@machine_gun_company }
		add_to_variable = { support_battalions = num_battalions_with_type@artillery }
		add_to_variable = { support_battalions = num_battalions_with_type@rocket_artillery }
		add_to_variable = { support_battalions = num_battalions_with_type@engineer }
		add_to_variable = { support_battalions = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions = num_battalions_with_type@logistics_company }
		add_to_variable = { support_battalions = num_battalions_with_type@maintenance_company }
		add_to_variable = { support_battalions = num_battalions_with_type@military_police }
		add_to_variable = { support_battalions = num_battalions_with_type@recon }
		add_to_variable = { support_battalions = num_battalions_with_type@wired_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@bicycle_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@motorcycle_signal_company }
		add_to_variable = { support_battalions = num_battalions_with_type@steam_car_support_company }
		add_to_variable = { support_battalions = num_battalions_with_type@flamethrower_support_company }
		add_to_variable = { support_battalions = num_battalions_with_type@sniper_team_support }
		add_to_variable = { support_battalions = num_battalions_with_type@armor_train_company }

		set_variable = { total_battalions = infantry_battalions }
		add_to_variable = { total_battalions = artillery_battalions }
		add_to_variable = { total_battalions = cavalry_battalions }
		add_to_variable = { total_battalions = mobile_battalions }
		add_to_variable = { total_battalions = armor_battalions }
		add_to_variable = { total_battalions = robotic_battalions }
		add_to_variable = { total_battalions = support_battalions }

		set_variable = { excess_battalions = total_battalions }
		subtract_from_variable = { excess_battalions = num_battalions }


		set_variable = { screen_ships = num_ships_with_type@corvette }
		add_to_variable = { screen_ships = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships = num_ships_with_type@monitor }
		add_to_variable = { screen_ships = num_ships_with_type@primitive_rowboat }
		add_to_variable = { screen_ships = num_ships_with_type@torpedo_boat }

		set_variable = { capital_ships = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@battleship }
		add_to_variable = { capital_ships = num_ships_with_type@carrier }
		add_to_variable = { capital_ships = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@frigate }
		add_to_variable = { screen_ships = num_ships_with_type@gunboat }
		add_to_variable = { capital_ships = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships = num_ships_with_type@lineship }
		add_to_variable = { capital_ships = num_ships_with_type@primitive_sailing_boat }

		set_variable = { submarine_ships = num_ships_with_type@coastal_submarine }
		add_to_variable = { submarine_ships = num_ships_with_type@submarine }

		set_variable = { total_ships = screen_ships }
		add_to_variable = { total_ships = capital_ships }
		add_to_variable = { total_ships = submarine_ships }

		set_variable = { excess_ships = num_ships }
		subtract_from_variable = { excess_ships = total_ships }

		#WEIGHTED
		set_variable = { infantry_battalions_weighted = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@cold_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@pa_infantry }
		#add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@bicycle_infantry }
		#add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@bicycle_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@feudal_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@line_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@redcoat_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@guard_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@great_war_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@light_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@tribal_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@state_levy_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@native_mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mounted_infantry }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@early_marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@marine }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@kustjagare_battalion }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@mountaineers }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }
		add_to_variable = { infantry_battalions_weighted = num_battalions_with_type@shock_troops }

		set_variable = { militia_battalions_weighted = 0 }
		#add_to_variable = { militia_battalions_weighted = num_battalions_with_type@state_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@colonial_militia_infantry }
		#add_to_variable = { militia_battalions_weighted = num_battalions_with_type@dutch_colonial_militia_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@irregular_infantry }
		add_to_variable = { militia_battalions_weighted = num_battalions_with_type@armed_peasants }

		set_variable = { artillery_battalions_weighted = num_battalions_with_type@anti_tank_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_anti_tank_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@anti_air_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_anti_air_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@field_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@field_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@howitzer_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@howitzer_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@siege_artillery_towed }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@rocket_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@mot_rocket_artillery_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@motorized_rocket_brigade }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }
		add_to_variable = { artillery_battalions_weighted = num_battalions_with_type@railway_gun }

		set_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_cavalry }
		#add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_camel_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@tribal_pistoleer_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@state_levy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@feudal_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@light_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@heavy_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@uhlans }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@camel_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@dragoon }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@great_war_cavalry }
		add_to_variable = { cavalry_battalions_weighted = num_battalions_with_type@great_war_cavalry }

		set_variable = { mobile_battalions_weighted = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@motorized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@airborne }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@amphibious_mechanized }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@armored_car }
		add_to_variable = { mobile_battalions_weighted = num_battalions_with_type@technicals }

		set_variable = { armor_battalions_weighted = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@amphibious_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_armor }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_anti_air_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_sp_artillery_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@light_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@medium_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }
		add_to_variable = { armor_battalions_weighted = num_battalions_with_type@modern_tank_destroyer_brigade }

		set_variable = { robotic_battalions_weighted = num_battalions_with_type@light_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@medium_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@heavy_robots }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@armor_walker }
		add_to_variable = { robotic_battalions_weighted = num_battalions_with_type@armor_walker }

		set_variable = { support_battalions_weighted = num_battalions_with_type@anti_tank }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_artillery_towed_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@howitzer_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@howitzer_artillery_towed_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@siege_artillery_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@machine_gun_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@artillery }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@rocket_artillery }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@engineer }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@field_hospital }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@logistics_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@maintenance_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@military_police }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@recon }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@wired_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@bicycle_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@motorcycle_signal_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@steam_car_support_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@flamethrower_support_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@sniper_team_support }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }
		add_to_variable = { support_battalions_weighted = num_battalions_with_type@armor_train_company }


		set_variable = { screen_ships_weighted = num_ships_with_type@corvette }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@destroyer }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@light_cruiser }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@monitor }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@monitor }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@primitive_rowboat }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@torpedo_boat }

		set_variable = { capital_ships_weighted = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battle_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@battleship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@carrier }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@dreadnought }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@frigate }
		add_to_variable = { screen_ships_weighted = num_ships_with_type@gunboat }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@heavy_cruiser }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@ironclad }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@lineship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@lineship }
		add_to_variable = { capital_ships_weighted = num_ships_with_type@primitive_sailing_boat }

		set_variable = { submarine_ships_weighted = num_ships_with_type@coastal_submarine }
		add_to_variable = { submarine_ships_weighted = num_ships_with_type@submarine }
		add_to_variable = { submarine_ships_weighted = num_ships_with_type@submarine }


	}
    manpower_count_update = {
        # Adds up the total manpower being used in your country
        # Broken up by unit file


        set_variable = { military_manpower_k = 0 }
        set_variable = { army_manpower_k = 0 }
        set_variable = { navy_manpower_k = 0 }
        set_variable = { air_manpower_k = 0 }

        ## ARMY ##

        # amphibious_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@amphibious_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # amphibious_mech
            set_temp_variable = { manpower_temp = num_battalions_with_type@amphibious_mechanized }
            multiply_temp_variable = { manpower_temp = 1.2 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # anti_tank_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@mot_anti_tank_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # anti_tank
        #
        # anti-air_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mot_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # anti-air
            set_temp_variable = { manpower_temp = num_battalions_with_type@anti_air }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # armored_car_battalion
            set_temp_variable = { manpower_temp = num_battalions_with_type@armored_car }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@technicals }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # artillery_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@field_artillery }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@field_artillery_towed }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@howitzer_artillery }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@howitzer_artillery_towed }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@siege_artillery }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@siege_artillery_towed }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mot_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@rocket_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mot_rocket_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@motorized_rocket_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # artillery
            set_temp_variable = { manpower_temp = num_battalions_with_type@field_artillery_support }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@field_artillery_towed_support }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@howitzer_artillery_support }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@howitzer_artillery_towed_support }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@siege_artillery_support }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@machine_gun_company }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@artillery }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@rocket_artillery }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # cavalry
            set_temp_variable = { manpower_temp = num_battalions_with_type@tribal_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@camelry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@tribal_pistoleer_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@state_levy_cavalry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@feudal_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@heavy_cavalry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@uhlans }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@camel_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@dragoon }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@great_war_cavalry }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@cuirasse }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # engineer
            set_temp_variable = { manpower_temp = num_battalions_with_type@engineer }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # field_hospital
            set_temp_variable = { manpower_temp = num_battalions_with_type@field_hospital }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # flame_tank
        #
        # infantry
            set_temp_variable = { manpower_temp = num_battalions_with_type@armed_peasants }
            multiply_temp_variable = { manpower_temp = 2.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@tribal_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@state_levy_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@native_mountaineers }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@feudal_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@colonial_militia_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@irregular_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@line_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@redcoat_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@guard_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mounted_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@early_marine }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@bicycle_battalion }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@great_war_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@marine }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@kustjagare_battalion }
            multiply_temp_variable = { manpower_temp = 0.8 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mountaineers }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@shock_troops }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@motorized }
            multiply_temp_variable = { manpower_temp = 1.2 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@mechanized }
            multiply_temp_variable = { manpower_temp = 1.2 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@airborne }
            multiply_temp_variable = { manpower_temp = 1.2 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@cold_war_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@digital_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@future_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@pa_infantry }
            multiply_temp_variable = { manpower_temp = 1.0 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # light_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # logistics
            set_temp_variable = { manpower_temp = num_battalions_with_type@logistics_company }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # maintenance
            set_temp_variable = { manpower_temp = num_battalions_with_type@maintenance_company }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # medium_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@medium_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # military_police
            set_temp_variable = { manpower_temp = num_battalions_with_type@military_police }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # modern_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@modern_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # modern_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@modern_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # recon
            set_temp_variable = { manpower_temp = num_battalions_with_type@recon_cav }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@recon }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # robots
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_robots }
            multiply_temp_variable = { manpower_temp = 0.01 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@medium_robots }
            multiply_temp_variable = { manpower_temp = 0.01 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@heavy_robots }
            multiply_temp_variable = { manpower_temp = 0.01 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # signal
            set_temp_variable = { manpower_temp = num_battalions_with_type@wired_signal_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@signal_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # sp_anti-air_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_sp_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@medium_sp_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@heavy_sp_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@super_heavy_sp_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@modern_sp_anti_air_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # sp_artillery_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_sp_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@medium_sp_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@heavy_sp_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@super_heavy_sp_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@modern_sp_artillery_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # super_heavy_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@super_heavy_armor }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # support
            set_temp_variable = { manpower_temp = num_battalions_with_type@bicycle_signal_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@motorcycle_signal_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@steam_car_support_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@flamethrower_support_company }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@sniper_team_support }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # tank_destroyer_brigade
            set_temp_variable = { manpower_temp = num_battalions_with_type@light_tank_destroyer_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@medium_tank_destroyer_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@heavy_tank_destroyer_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@super_heavy_tank_destroyer_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_battalions_with_type@modern_tank_destroyer_brigade }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # train
            set_temp_variable = { manpower_temp = num_battalions_with_type@armor_train_company }
            multiply_temp_variable = { manpower_temp = 0.4 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #
        # walkers_armor
            set_temp_variable = { manpower_temp = num_battalions_with_type@armor_walker }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { army_manpower_k = manpower_temp }
        #

        ## NAVY ##

        # battlecruiser
            set_temp_variable = { manpower_temp = num_ships_with_type@battle_cruiser }
            multiply_temp_variable = { manpower_temp = 0.75 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # battleship
            set_temp_variable = { manpower_temp = num_ships_with_type@battleship }
            multiply_temp_variable = { manpower_temp = 2.5 } # 800, 2250 to 3200
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # carrier
            set_temp_variable = { manpower_temp = num_ships_with_type@carrier }
            multiply_temp_variable = { manpower_temp = 3.5 } # 3050 to 4090
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # coastal_submarine
            set_temp_variable = { manpower_temp = num_ships_with_type@coastal_submarine }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # corvette
            set_temp_variable = { manpower_temp = num_ships_with_type@corvette }
            multiply_temp_variable = { manpower_temp = 0.15 } # 120 to 225
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # cruiser
            set_temp_variable = { manpower_temp = num_ships_with_type@cruiser }
            multiply_temp_variable = { manpower_temp = 0.6 } # 400 to 750
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # cruiser_intermediate
            set_temp_variable = { manpower_temp = num_ships_with_type@unprotected_cruiser }
            multiply_temp_variable = { manpower_temp = 0.45 }
            add_to_variable = { navy_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_ships_with_type@protected_cruiser }
            multiply_temp_variable = { manpower_temp = 0.45 }
            add_to_variable = { navy_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_ships_with_type@armored_cruiser }
            multiply_temp_variable = { manpower_temp = 0.45 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # destroyer
            set_temp_variable = { manpower_temp = num_ships_with_type@destroyer }
            multiply_temp_variable = { manpower_temp = 0.25 } # 150 to 300
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # dreadnought
            set_temp_variable = { manpower_temp = num_ships_with_type@dreadnought }
            multiply_temp_variable = { manpower_temp = 1.6 } # 1200 to 2000
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # frigate
            set_temp_variable = { manpower_temp = num_ships_with_type@frigate }
            multiply_temp_variable = { manpower_temp = 0.5 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # gunboat
            set_temp_variable = { manpower_temp = num_ships_with_type@gunboat }
            multiply_temp_variable = { manpower_temp = 0.3 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # heavy_cruiser
            set_temp_variable = { manpower_temp = num_ships_with_type@heavy_cruiser }
            multiply_temp_variable = { manpower_temp = 0.65 } # 500 to 800
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # ironclad
            set_temp_variable = { manpower_temp = num_ships_with_type@ironclad }
            multiply_temp_variable = { manpower_temp = 0.5 } # 400 to 600
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # lineship
            set_temp_variable = { manpower_temp = num_ships_with_type@lineship }
            multiply_temp_variable = { manpower_temp = 1.2 } # 1000/1200
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # monitor
            set_temp_variable = { manpower_temp = num_ships_with_type@monitor }
            multiply_temp_variable = { manpower_temp = 0.15 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # primitive_rowboat
            set_temp_variable = { manpower_temp = num_ships_with_type@primitive_rowboat }
            multiply_temp_variable = { manpower_temp = 0.015 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # primitive_sailing_boat
            set_temp_variable = { manpower_temp = num_ships_with_type@primitive_sailing_boat }
            multiply_temp_variable = { manpower_temp = 0.05 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # submarine
            set_temp_variable = { manpower_temp = num_ships_with_type@submarine }
            multiply_temp_variable = { manpower_temp = 0.1 }
            add_to_variable = { navy_manpower_k = manpower_temp }
        #
        # torpedo_boat
            set_temp_variable = { manpower_temp = num_ships_with_type@torpedo_boat }
            multiply_temp_variable = { manpower_temp = 0.08 } # 50 to 100
            add_to_variable = { navy_manpower_k = manpower_temp }
        #

        ## AIRFORCE ##
        
        # air
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@balloon }
            multiply_temp_variable = { manpower_temp = 0.05 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@zeppelin }
            multiply_temp_variable = { manpower_temp = 0.6 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@fighter }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@scout_plane }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@cv_fighter }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@heavy_fighter }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@jet_fighter }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@multirole_fighter }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@cas }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@cv_cas }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@jet_cas }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@nav_bomber }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@cv_nav_bomber }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@tac_bomber }
            multiply_temp_variable = { manpower_temp = 0.04 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@jet_tac_bomber }
            multiply_temp_variable = { manpower_temp = 0.08 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@strat_bomber }
            multiply_temp_variable = { manpower_temp = 0.08 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@jet_strat_bomber }
            multiply_temp_variable = { manpower_temp = 0.16 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@transport_plane }
            multiply_temp_variable = { manpower_temp = 0.08 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@rocket_interceptor }
            multiply_temp_variable = { manpower_temp = 0.05 }
            add_to_variable = { air_manpower_k = manpower_temp }
            
            set_temp_variable = { manpower_temp = num_deployed_planes_with_type@suicide_craft }
            multiply_temp_variable = { manpower_temp = 0.02 }
            add_to_variable = { air_manpower_k = manpower_temp }
        #

        set_variable = { military_manpower_k = army_manpower_k }
        add_to_variable = { military_manpower_k = navy_manpower_k }
        add_to_variable = { military_manpower_k = air_manpower_k }
    }

    gdp_update = {
        #State
        set_variable = { gdp_amount = 0 }
        for_each_loop = {
            array = global.resource_token_array
            value = r_token

            set_temp_variable = { gdp_temp = production@var:r_token }
            subtract_from_temp_variable = { gdp_temp = demand_input@var:r_token }
            multiply_temp_variable = { gdp_temp = price@var:r_token }
            add_to_variable = { gdp_amount = gdp_temp }
        }

        set_variable = { gdp_per_capita = gdp_amount }
        divide_variable = { gdp_per_capita = pops }


        if = {
            limit = {
                check_variable = { gdp_per_capita > global.highest_state_gdp_c }
            }
            set_variable = { global.highest_state_gdp_c = gdp_per_capita }
        }
        if = {
            limit = {
                check_variable = { gdp_amount > global.highest_state_gdp }
            }
            set_variable = { global.highest_state_gdp = gdp_amount }
        }
    }
    country_calc_gdp = {
        set_variable = { gdp_amount = 0 }

        every_controlled_state = {
            gdp_update = yes

            add_to_variable = { PREV.gdp_amount = gdp_amount }
        }

        set_variable = { gdp_per_capita = gdp_amount }
        divide_variable = { gdp_per_capita = pops }
    }
    market_calc_gdp = {
        if = {
            limit = {
                check_variable = { market_leader = THIS }
                check_variable = { market_countries^num > 1 }
            }
            set_variable = { market_gdp = 0 }
            set_temp_variable = { home_temp = THIS }
            for_each_scope_loop = {
                array = market_countries
                country_calc_gdp = yes
                add_to_variable = { home_temp:market_gdp = gdp_amount }
            }
        }
        else_if = {
            limit = {
                NOT = { check_variable = { market_leader = THIS } }
            }
            set_variable = { market_gdp = market_leader:market_gdp }
        }
        else = {
            country_calc_gdp = yes
            set_variable = { market_gdp = gdp_amount }
        }
    }

    initialize_gdp_graph = {
        # run after gdp_update
        clear_array = gdp_amount_array
        add_to_array = { gdp_amount_array = gdp_amount }
        for_loop_effect = {
            start = 0
            end = 36
            value = i

            set_temp_variable = { random_growth_temp = random }
            subtract_from_temp_variable = { random_growth_temp = 0.5 }

            set_temp_variable = { growth_rate_temp = 1.00 }
            if = {
                limit = {
                    has_variable = controller:initial_gdp_growth_rate
                }
                set_temp_variable = { growth_rate_temp = controller:initial_gdp_growth_rate }
            }
            divide_temp_variable = { growth_rate_temp = 12 }
            add_to_temp_variable = { growth_rate_temp = 100 }
            add_to_temp_variable = { growth_rate_temp = random_growth_temp }
        
            set_temp_variable = { temp_val = gdp_amount_array^0 }
            if = {
                limit = {
                    check_variable = { temp_val > 10000 }
                }
                divide_temp_variable = { temp_val = growth_rate_temp }
                multiply_temp_variable = { temp_val = 100 }
            }
            else = {
                multiply_temp_variable = { temp_val = 100 }
                divide_temp_variable = { temp_val = growth_rate_temp }
            }

            add_to_array = { array = gdp_amount_array index = 0 value = temp_val }
        }
        econ_rerender_gdp_graph = yes
    }
    econ_rerender_gdp_graph = {
        # Code courtesy of TNO (totally not stolen. Sorry, couldn't figure out the graph line thing on my own. I can make complicated economy systems but graphs? Nah).
        # Find the maximum and minimum GDP values for the graph
        set_temp_variable = { min = gdp_amount_array^0 }
        set_temp_variable = { max = gdp_amount_array^0 }
        for_loop_effect = {
            start = 0
            end = gdp_amount_array^num
            value = i

            if = {
                limit = { check_variable = { gdp_amount_array^i > max } }
                set_temp_variable = { max = gdp_amount_array^i }
            }
            if = {
                limit = { check_variable = { gdp_amount_array^i < min } }
                set_temp_variable = { min = gdp_amount_array^i }
            }
        }

        # Our range is (min value / 1.1) - (max value * 1.1)
        multiply_temp_variable = { max = 1.05 }
        divide_temp_variable = { min = 1.05 }


        set_temp_variable = { range = max }
        subtract_from_temp_variable = { range = min }
        divide_temp_variable = { range = 100 }

        # Get all segments Progress Bar values
        clear_array = gdp_graph_frames
        for_loop_effect = {
            start = 1
            end = gdp_amount_array^num
            value = i

            set_temp_variable = { j = i }
            add_to_temp_variable = { j = -1 }

            set_temp_variable = { hi = gdp_amount_array^i }
            set_temp_variable = { lo = gdp_amount_array^j }


            subtract_from_temp_variable = { hi = min }
            subtract_from_temp_variable = { lo = min }
            divide_temp_variable = { hi = range }
            divide_temp_variable = { lo = range }

            round_temp_variable = hi
            round_temp_variable = lo

            set_temp_variable = { endpoints = lo }
            multiply_temp_variable = { endpoints = 1000 }
            add_to_temp_variable = { endpoints = hi }
            add_to_array = { gdp_graph_frames = endpoints }
        }
        
		#Correcting the max/min
        set_variable = { gdp_graph_min = min }
        set_variable = { gdp_graph_max = max }
		if = {
			limit = {
				check_variable = { gdp_graph_max > 1000 } #gdp_graph_min should always be less than max, so there's no point to checking it
			}
			divide_variable = { gdp_graph_min = 1000 }
			divide_variable = { gdp_graph_max = 1000 }
			set_state_flag = gdp_graph_thousands
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 100 }
			}
			divide_variable = { gdp_graph_min = 100 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 100 }
			multiply_variable = { gdp_graph_min = 100 }
			multiply_variable = { gdp_graph_max = 100 }
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 10 }
			}
			divide_variable = { gdp_graph_min = 10 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 10 }
			multiply_variable = { gdp_graph_min = 10 }
			multiply_variable = { gdp_graph_max = 10 }
		}

		add_to_variable = { update_state_econ_window = 1 }
    }
    initialize_country_gdp_graph = {
        # run after gdp_update
        set_temp_variable = { gdp_amount_temp = gdp_amount }
        divide_temp_variable = { gdp_amount_temp = 1000 }
        multiply_temp_variable = { gdp_amount_temp = 12 }
        clear_array = gdp_amount_quarterly
        add_to_array = { gdp_amount_quarterly = gdp_amount_temp }
        for_loop_effect = {
            start = 0
            end = 40
            value = i

            set_temp_variable = { random_growth_temp = random }
            subtract_from_temp_variable = { random_growth_temp = 0.5 }

            set_temp_variable = { growth_rate_temp = 1.00 }
            if = {
                limit = {
                    has_variable = controller:initial_gdp_growth_rate
                }
                set_temp_variable = { growth_rate_temp = initial_gdp_growth_rate }
            }
            divide_temp_variable = { growth_rate_temp = 4 }
            add_to_temp_variable = { growth_rate_temp = 100 }
            add_to_temp_variable = { growth_rate_temp = random_growth_temp }
        
            set_temp_variable = { temp_val = gdp_amount_quarterly^0 }
            if = {
                limit = {
                    check_variable = { temp_val > 10000 }
                }
                divide_temp_variable = { temp_val = growth_rate_temp }
                multiply_temp_variable = { temp_val = 100 }
            }
            else = {
                multiply_temp_variable = { temp_val = 100 }
                divide_temp_variable = { temp_val = growth_rate_temp }
            }

            add_to_array = { array = gdp_amount_quarterly index = 0 value = temp_val }
        }
        econ_rerender_country_gdp_graph = yes
    }
    econ_rerender_country_gdp_graph = {
        # Code courtesy of TNO (totally not stolen. Sorry, couldn't figure out the graph line thing on my own. I can make complicated economy systems but graphs? Nah).
        # Find the maximum and minimum GDP values for the graph
        set_temp_variable = { min = gdp_amount_quarterly^0 }
        set_temp_variable = { max = gdp_amount_quarterly^0 }
        for_loop_effect = {
            start = 0
            end = gdp_amount_quarterly^num
            value = i

            if = {
                limit = { check_variable = { gdp_amount_quarterly^i > max } }
                set_temp_variable = { max = gdp_amount_quarterly^i }
            }
            if = {
                limit = { check_variable = { gdp_amount_quarterly^i < min } }
                set_temp_variable = { min = gdp_amount_quarterly^i }
            }
        }

        # Our range is (min value / 1.1) - (max value * 1.1)
        multiply_temp_variable = { max = 1.05 }
        divide_temp_variable = { min = 1.05 }


        set_temp_variable = { range = max }
        subtract_from_temp_variable = { range = min }
        divide_temp_variable = { range = 100 }

        # Get all segments Progress Bar values
        clear_array = gdp_graph_frames
        for_loop_effect = {
            start = 1
            end = gdp_amount_quarterly^num
            value = i

            set_temp_variable = { j = i }
            add_to_temp_variable = { j = -1 }

            set_temp_variable = { hi = gdp_amount_quarterly^i }
            set_temp_variable = { lo = gdp_amount_quarterly^j }


            subtract_from_temp_variable = { hi = min }
            subtract_from_temp_variable = { lo = min }
            divide_temp_variable = { hi = range }
            divide_temp_variable = { lo = range }

            round_temp_variable = hi
            round_temp_variable = lo

            set_temp_variable = { endpoints = lo }
            multiply_temp_variable = { endpoints = 1000 }
            add_to_temp_variable = { endpoints = hi }
            add_to_array = { gdp_graph_frames = endpoints }
        }
        
		#Correcting the max/min
        set_variable = { gdp_graph_min = min }
        set_variable = { gdp_graph_max = max }
		if = {
			limit = {
				check_variable = { gdp_graph_max > 1000 } #gdp_graph_min should always be less than max, so there's no point to checking it
			}
			divide_variable = { gdp_graph_min = 1000 }
			divide_variable = { gdp_graph_max = 1000 }
			set_country_flag = gdp_graph_thousands
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 100 }
			}
			divide_variable = { gdp_graph_min = 100 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 100 }
			multiply_variable = { gdp_graph_min = 100 }
			multiply_variable = { gdp_graph_max = 100 }
		}
		else_if = {
			limit = {
				check_variable = { gdp_graph_max > 10 }
			}
			divide_variable = { gdp_graph_min = 10 } #This gets rid of some decimals so there's only up to 4 digits
			divide_variable = { gdp_graph_max = 10 }
			multiply_variable = { gdp_graph_min = 10 }
			multiply_variable = { gdp_graph_max = 10 }
		}

		add_to_variable = { update_state_econ_window = 1 }
    }
    
    initialize_country_budget_graph = {
        # run after budget_update
        clear_array = net_budget_array
        add_to_array = { net_budget_array = net_budget }
        for_loop_effect = {
            start = 0
            end = 32
            value = i

            set_temp_variable = { random_change_temp = random }
            subtract_from_temp_variable = { random_change_temp = 0.5 }
            multiply_temp_variable = { random_change_temp = revenue }
            divide_temp_variable = { random_change_temp = 50 }
        
            set_temp_variable = { temp_val = net_budget }
            add_to_temp_variable = { temp_val = random_change_temp }

            add_to_array = { array = net_budget_array index = 0 value = temp_val }
        }
        econ_rerender_country_budget_graph = yes
    }
    econ_rerender_country_budget_graph = {
        # Code courtesy of TNO (totally not stolen. Sorry, couldn't figure out the graph line thing on my own. I can make complicated economy systems but graphs? Nah).
        # Find the maximum and minimum budget values for the graph
        set_temp_variable = { min = net_budget_array^0 }
        set_temp_variable = { max = net_budget_array^0 }
        for_loop_effect = {
            start = 0
            end = net_budget_array^num
            value = i

            if = {
                limit = { check_variable = { net_budget_array^i > max } }
                set_temp_variable = { max = net_budget_array^i }
            }
            if = {
                limit = { check_variable = { net_budget_array^i < min } }
                set_temp_variable = { min = net_budget_array^i }
            }
        }

        # The range is maximum(max, min) * 2 * 1.2
        if = {
            limit = {
                check_variable = { max < 0 }
            }
            set_temp_variable = { max = min }
            multiply_temp_variable = { max = -1 }
        }
        else_if = {
            limit = {
                check_variable = { min < 0 }
            }
            multiply_temp_variable = { min = -1 }
            if = {
                limit = {
                    check_variable = { max > min }
                }
                set_temp_variable = { min = max }
                multiply_temp_variable = { min = -1 }
            }
            else = {
                set_temp_variable = { max = min }
                multiply_temp_variable = { min = -1 }
            }
        }
        else = {
            set_temp_variable = { min = max }
            multiply_temp_variable = { min = -1 }
        }
        
        multiply_temp_variable = { max = 1.2 }
        multiply_temp_variable = { min = 1.2 }


        set_temp_variable = { range = max }
        subtract_from_temp_variable = { range = min }
        divide_temp_variable = { range = 100 }

        # Get all segments Progress Bar values
        clear_array = budget_graph_frames
        for_loop_effect = {
            start = 1
            end = net_budget_array^num
            value = i

            set_temp_variable = { j = i }
            add_to_temp_variable = { j = -1 }

            set_temp_variable = { hi = net_budget_array^i }
            set_temp_variable = { lo = net_budget_array^j }

            subtract_from_temp_variable = { hi = min }
            subtract_from_temp_variable = { lo = min }
            
            divide_temp_variable = { hi = range }
            divide_temp_variable = { lo = range }

            round_temp_variable = hi
            round_temp_variable = lo

            set_temp_variable = { endpoints = lo }
            multiply_temp_variable = { endpoints = 1000 }
            add_to_temp_variable = { endpoints = hi }
            add_to_array = { budget_graph_frames = endpoints }
        }
        
        set_variable = { budget_graph_min = min }
        set_variable = { budget_graph_max = max }

		add_to_variable = { update_state_econ_window = 1 }
    }

    create_buildings_under_construction_list = {
        # Country Scope
        # FIRE ONLY IF PLAYER COUNTRY. AI does not need this information
        # Creates a list of buildings under construction in your country, sorted by completion time.

        clear_array = under_construction_list_state
        clear_array = under_construction_list_building
        clear_array = under_construction_list_type
        clear_array = under_construction_list_time

        every_controlled_state = { # Iterate through each state, only going to states with constructions in it
            limit = {
                any_of = {
                    array = buildings
                    value = building_token
                    check_variable = { construction_amount@var:building_token > 0 }
                    check_variable = { construction_speed@var:building_token > 0 }
                }
            }

            for_each_loop = { # Iterate through each building, adding buildings under construction to the list
                array = buildings
                value = building_token
                if = {
                    limit = {
                        check_variable = { construction_amount@var:building_token > 0 }
                        check_variable = { construction_speed@var:building_token > 0 }
                    }
                    set_temp_variable = { months_temp = construction_amount@var:building_token }
                    if = {
                        limit = {
                            check_variable = { months_temp > 0 }
                        }
                    }
                    divide_temp_variable = { months_temp = construction_speed@var:building_token }
                    add_to_temp_variable = { months_temp = 0.499 }
                    round_temp_variable = months_temp
                    
                    for_each_loop = { # Put buildings in list in sorted order
                        array = PREV.under_construction_list_time
                        index = ii
                        value = vv
                        break = bb

                        if = {
                            limit = {
                                check_variable = { vv > months_temp }
                            }
                            add_to_array = { 
                                array = PREV.under_construction_list_time 
                                value = months_temp
                                index = ii
                            }
                            add_to_array = { 
                                array = PREV.under_construction_list_type 
                                value = building_token
                                index = ii
                            }
                            add_to_array = { 
                                array = PREV.under_construction_list_building
                                value = building_token
                                index = ii
                            }
                            add_to_array = { 
                                array = PREV.under_construction_list_state 
                                value = THIS
                                index = ii
                            }
                            set_temp_variable = { bb = 1 }
                        }
                    }
                    if = {
                        limit = {
                            check_variable = { bb = 0 }
                        }
                        add_to_array = { PREV.under_construction_list_state = THIS }
                        add_to_array = { PREV.under_construction_list_type = building_token }
                        add_to_array = { PREV.under_construction_list_building = building_token }
                        add_to_array = { PREV.under_construction_list_time = months_temp }
                    }
                }
            }
        }
        
        # set_temp_variable = { years_temp = months_temp }
        # divide_temp_variable = { years_temp = 12 }
        # subtract_from_temp_variable = { years_temp = 0.5 }
        # round_temp_variable = years_temp

        # set_temp_variable = { months_sub_temp = years_temp }
        # multiply_temp_variable = { months_sub_temp = 12 }
        # subtract_from_temp_variable = { months_temp = months_sub_temp }
    }
#

#Modifiers
    r_update_modifiers_state_effects = {
        set_variable = { wage_factor = global.base_wage_factor }

        set_variable = { building_construction_speed_factor = controller:modifier@building_construction_speed_factor }
        set_variable = { building_construction_cost_factor = controller:modifier@building_construction_cost_factor }
        set_variable = { building_upgrade_speed_factor = controller:modifier@building_upgrade_speed_factor }
        set_variable = { building_upgrade_cost_factor = controller:modifier@building_upgrade_cost_factor }
        add_to_variable = { building_construction_speed_factor = modifier@local_building_construction_speed_factor }
        add_to_variable = { building_construction_cost_factor = modifier@local_building_construction_cost_factor }
        add_to_variable = { building_upgrade_speed_factor = modifier@local_building_upgrade_speed_factor }
        add_to_variable = { building_upgrade_cost_factor = modifier@local_building_upgrade_cost_factor }

        #Economies of Scale
            #For all but subsistence farms
			for_each_loop = {
				array = industries
				value = modifier_token
                set_variable = { building_throughput_factor@var:modifier_token = 0 }
                if = {
                    limit = {
                        NOT = { check_variable = { modifier_token = token:building_subsistence_farm } }
                    }

                    # set_temp_variable = { mod_temp = size@var:modifier_token }
                    # multiply_temp_variable = { mod_temp = global.buildings_economy_of_scale_factor }
                    set_variable = { building_throughput_factor@var:modifier_token = 0 }
                }
			}

        #
    }
    r_update_modifiers_country_effects = {
        set_variable = { wage_factor = global.base_wage_factor }

        set_variable = { building_construction_speed_factor = modifier@building_construction_speed_factor }
        set_variable = { building_construction_cost_factor = modifier@building_construction_cost_factor }
        set_variable = { building_upgrade_speed_factor = modifier@building_upgrade_speed_factor }
        set_variable = { building_upgrade_cost_factor = modifier@building_upgrade_cost_factor }

        #Consumer_goods_factory
            set_variable = { building_input_factor@token:building_consumer_goods_factory = modifier@building_consumer_goods_factory_input_factor }
            set_variable = { building_output_factor@token:building_consumer_goods_factory = modifier@building_consumer_goods_factory_output_factor }
            set_variable = { building_throughput_factor@token:building_consumer_goods_factory = modifier@building_consumer_goods_factory_throughput_factor }
            set_variable = { building_industrial_capacity_use_factor@token:building_consumer_goods_factory = modifier@building_consumer_goods_factory_industrial_capacity_use_factor }
        #
    }
#