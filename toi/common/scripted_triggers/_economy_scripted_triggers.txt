
#is_in_japan = {
#	custom_trigger_tooltip = {
#		tooltip = eoanb_is_in_japan_tt
#		OR = {
#			state = 282
#			#... so on
#		}
#	}
#}

#INDUSTRIES
	can_build_building = {
		# industry_token
		# size_temp - defaulted to 1
		# State Scope

		round_temp_variable = size_temp

		if = {
			limit = {
				is_in_array = { global.industry_token_array = industry_token }
			}
			check_variable = { buildings^num < 8 }
			check_variable = { buildings^num < modifier@local_industry_slots }
		}
		if = {
			limit = {
				check_variable = { size_temp < 0 }
			}
			always = yes
		}
		else = {
			if = { limit = { check_variable = { size_temp = 0 } } set_temp_variable = { size_temp = 1 } }
			
			is_valid_industry = yes
			if = {
				limit = {
					check_variable = { global.building_arable_land_use@var:industry_token > 0 }
				}
				set_temp_variable = { arable_land_use_temp = global.building_arable_land_use@var:industry_token }
				multiply_temp_variable = { arable_land_use_temp = size_temp }
				NOT = { check_variable = { arable_land_use_temp > arable_land_available } }
			}
		}
	}
	is_valid_industry = {
		# industry_token
		# State Scope
		if = {
			limit = {
				check_variable = { global.building_tech_unlock@var:industry_token = 0 }
			}
			always = yes
		}
		else = {
			var:controller = { has_tech = var:global.building_tech_unlock@var:industry_token }
		}
	}
	is_valid_pm = {
		# pm_temp, industry_token
		# State Scope

		OR = {
			is_in_array = { controller:building_unlocked_pms@var:industry_token = pm_temp }
			is_in_array = { controller:building_unlocked_ams@var:industry_token = pm_temp }
		}
	}
	has_free_industry_slots = {
		# Checks if a state has open building slots
		# industry_token_temp - checks if specific industry is already built in state
		custom_trigger_tooltip = {
			tooltip = has_free_industry_slots_tt
			OR = {
				if = {
					limit = { check_variable = { industry_token_temp > 0 } }
					is_in_array = { array = buildings value = var:industry_token_temp }
				}
				check_variable = { buildings^num < modifier@local_industry_slots }
			}
		}
	}
	is_in_industry_slot = {
		# Checks if a state has open building slots
		# industry_token_temp - checks if specific industry is already built in state
		custom_trigger_tooltip = {
			tooltip = is_in_industry_slot_tt
			is_in_array = { array = buildings value = var:industry_token_temp }
		}
	}
#

return_earliest_production_method = {
	# building_token
	# State Scope
	# Returns pm_temp
	# Returns a temporary variable which has the earliest production method available (as the number) and returns -1 if not available
	
	set_temp_variable = { pm_temp = -1 }

	#Checks earliest first
	if = {
		limit = {
			OR = {
				check_variable = { global.building_basic_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_basic_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_basic_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 0 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_advanced_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_advanced_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_advanced_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 1 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_industrialized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_industrialized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_industrialized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 2 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_mechanized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_mechanized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_mechanized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 3 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_electrified_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_electrified_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_electrified_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 4 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_motorized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_motorized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_motorized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 5 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_modernized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_modernized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_modernized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 6 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_roboticized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_roboticized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_roboticized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 7 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_computerized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_computerized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_computerized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 8 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_digitalized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_digitalized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_digitalized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 9 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_automatized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_automatized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_automatized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 10 }
	}
	else_if = {
		limit = {
			OR = {
				check_variable = { global.building_futurized_tech_unlock@var:building_token = 1 }
				AND = {
					NOT = { check_variable = { global.building_futurized_tech_unlock@var:building_token = 0 } }
					set_temp_variable = { tech_temp = global.building_futurized_tech_unlock@var:building_token }
					controller = { has_tech = var:tech_temp }
				}
			}
		}
		set_temp_variable = { pm_temp = 11 }
	}
}

is_valid_production_method = {
	# pm_temp, building_token
	# State Scope

	set_temp_variable = { latest_pm_temp = controller:latest_production_method@var:building_token }
	NOT = { check_variable = { latest_pm_temp = -1 } }
	check_variable = { pm_temp < latest_pm_temp }
	
	set_temp_variable = { earliest_pm_temp = controller:earliest_production_method@var:building_token }
	NOT = { check_variable = { earliest_pm_temp = -1 } }
	check_variable = { pm_temp > earliest_pm_temp }
}
has_valid_production_method = {
	# building_token
	# State Scope

	NOT = { check_variable = { controller:latest_production_method@var:building_token = -1 } }
	NOT = { check_variable = { controller:earliest_production_method@var:building_token = -1 } }
}

can_trade = {
	#Checks if you can trade with ANYONE

	#Checks the following:
	# Uses Eco System (AKA doesn't use african tribal mechanics)
	# Is not a rebel country (rebel_uprising flag)
	# Doesn't have trade restricted (trade_restricted flag)

	NOT = { has_variable = has_afr_empire_mechanic_system }
	NOT = { has_country_flag = rebel_uprising }
	NOT = { has_country_flag = trade_restricted }
}
can_trade_by_sea = {
	#Checks if you can trade with ANYONE by sea
	# THIS DOES NOT CHECK IF YOU CAN TRADE IN GENERAL. USE CAN_TRADE FOR THAT.

	#Checks the following:
	# Is coastal
	# Not Blockaded
	
	any_controlled_state = {
		OR = {
			is_coastal = yes
			has_state_flag = internationally_navigable_river
		}
	}
	NOT = { has_country_flag = blockaded }
}
can_trade_with = {
	#Checks if you can trade with the given country
	# country_temp - country to trade with

	#Checks the following:
	# Can Trade
	# Country exists
	# Not this country
	# Not at war with country
	# Not embargoing each other
	# Other Country Can Trade
	# Either neighbors or coastal
	# If not neighbors, then neither under blockade

	can_trade = yes
	country_exists = var:country_temp
	NOT = { tag = var:country_temp }
	NOT = { has_war_with = var:country_temp }
	NOT = { var:country_temp = { is_embargoed_by = PREV } }
	NOT = { var:country_temp = { is_embargoing = PREV } }

	var:country_temp = {
		can_trade = yes
	}

	OR = {
		is_neighbor_of = var:country_temp
		AND = {
			can_trade_by_sea = yes
			var:country_temp = {
				can_trade_by_sea = yes
			}
		}
	}
}